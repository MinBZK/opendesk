# Source: nubus/charts/keycloak/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ums-keycloak
  namespace: tn-openbsw-opendesk
  labels:
    app.kubernetes.io/name: keycloak
    helm.sh/chart: keycloak-0.5.2
    app.kubernetes.io/instance: ums
    app.kubernetes.io/managed-by: Helm
  annotations:
automountServiceAccountToken: false
---
# Source: nubus/charts/nubusKeycloakBootstrap/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ums-keycloak-bootstrap
  namespace: tn-openbsw-opendesk
  labels:
    app.kubernetes.io/name: keycloak-bootstrap
    helm.sh/chart: nubusKeycloakBootstrap-0.3.0
    app.kubernetes.io/instance: ums
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 0.0.1
  annotations:
    intended.usage: compliance
automountServiceAccountToken: false
---
# Source: nubus/charts/nubusKeycloakExtensions/templates/serviceaccount-handler.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ums-keycloak-extensions-handler
  labels:
    app.kubernetes.io/name: keycloak-extensions
    helm.sh/chart: nubusKeycloakExtensions-0.11.0
    app.kubernetes.io/instance: ums
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 21.0.1
  annotations:
automountServiceAccountToken: false
---
# Source: nubus/charts/nubusKeycloakExtensions/templates/serviceaccount-proxy.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ums-keycloak-extensions-proxy
  labels:
    app.kubernetes.io/name: keycloak-extensions
    helm.sh/chart: nubusKeycloakExtensions-0.11.0
    app.kubernetes.io/instance: ums
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 21.0.1
  annotations:
automountServiceAccountToken: false
---
# Source: nubus/charts/nubusLdapServer/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ums-ldap-server
  namespace: tn-openbsw-opendesk
  labels:
    app.kubernetes.io/name: ldap-server
    helm.sh/chart: nubusLdapServer-0.25.2
    app.kubernetes.io/instance: ums
    app.kubernetes.io/managed-by: Helm
  annotations:
    intents.otterize.com/service-name: ums-ldap-server
automountServiceAccountToken: false
---
# Source: nubus/charts/nubusNotificationsApi/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ums-notifications-api
  namespace: tn-openbsw-opendesk
  labels:
    app.kubernetes.io/name: notifications-api
    helm.sh/chart: nubusNotificationsApi-0.42.2
    app.kubernetes.io/instance: ums
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 1.16.0
  annotations:
    intents.otterize.com/service-name: ums-notifications-api
automountServiceAccountToken: false
---
# Source: nubus/charts/nubusPortalFrontend/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ums-portal-frontend
  namespace: tn-openbsw-opendesk
  labels:
    app.kubernetes.io/name: portal-frontend
    helm.sh/chart: nubusPortalFrontend-0.42.2
    app.kubernetes.io/instance: ums
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 1.16.0
  annotations:
    intents.otterize.com/service-name: ums-portal-frontend
automountServiceAccountToken: false
---
# Source: nubus/charts/nubusPortalServer/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ums-portal-server
  namespace: tn-openbsw-opendesk
  labels:
    app.kubernetes.io/name: portal-server
    helm.sh/chart: nubusPortalServer-0.42.2
    app.kubernetes.io/instance: ums
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 1.16.0
  annotations:
    intents.otterize.com/service-name: ums-portal-server
automountServiceAccountToken: false
---
# Source: nubus/charts/nubusProvisioning/charts/nats/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ums-provisioning-nats
  namespace: tn-openbsw-opendesk
  labels:
    app.kubernetes.io/name: provisioning-nats
    helm.sh/chart: nats-0.1.2
    app.kubernetes.io/instance: ums
    app.kubernetes.io/managed-by: Helm
  annotations:
    intents.otterize.com/service-name: ums-provisioning-nats
automountServiceAccountToken: false
---
# Source: nubus/charts/nubusProvisioning/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ums-provisioning
  namespace: tn-openbsw-opendesk
  labels:
    app.kubernetes.io/name: provisioning
    helm.sh/chart: nubusProvisioning-0.44.0
    app.kubernetes.io/instance: ums
    app.kubernetes.io/managed-by: Helm
  annotations:
automountServiceAccountToken: false
---
# Source: nubus/charts/nubusSelfServiceConsumer/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ums-selfservice-listener
  namespace: tn-openbsw-opendesk
  labels:
    app.kubernetes.io/name: selfservice-listener
    helm.sh/chart: nubusSelfServiceConsumer-0.11.3
    app.kubernetes.io/instance: ums
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 0.0.1
  annotations:
automountServiceAccountToken: false
---
# Source: nubus/charts/nubusUdmListener/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ums-provisioning-listener
  namespace: tn-openbsw-opendesk
  labels:
    app.kubernetes.io/name: provisioning-listener
    helm.sh/chart: nubusUdmListener-0.44.0
    app.kubernetes.io/instance: ums
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 1.16.0
  annotations:
automountServiceAccountToken: false
---
# Source: nubus/charts/nubusUdmRestApi/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ums-udm-rest-api
  namespace: tn-openbsw-opendesk
  labels:
    app.kubernetes.io/name: udm-rest-api
    helm.sh/chart: nubusUdmRestApi-0.25.1
    app.kubernetes.io/instance: ums
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 12.0.7
  annotations:
    intended.usage: compliance
    intents.otterize.com/service-name: ums-udm-rest-api
automountServiceAccountToken: false
---
# Source: nubus/charts/nubusUmcGateway/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ums-umc-gateway
  namespace: tn-openbsw-opendesk
  labels:
    app.kubernetes.io/name: umc-gateway
    helm.sh/chart: nubusUmcGateway-0.34.1
    app.kubernetes.io/instance: ums
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 12.0.29
  annotations:
automountServiceAccountToken: false
---
# Source: nubus/charts/nubusUmcServer/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ums-umc-server
  namespace: tn-openbsw-opendesk
  labels:
    app.kubernetes.io/name: umc-server
    helm.sh/chart: nubusUmcServer-0.34.1
    app.kubernetes.io/instance: ums
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 12.0.29
  annotations:
    intents.otterize.com/service-name: ums-umc-server
automountServiceAccountToken: false
---
# Source: nubus/charts/keycloak/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: ums-keycloak
  namespace: tn-openbsw-opendesk
  labels:
    app.kubernetes.io/instance: ums
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: ums-keycloak
    helm.sh/chart: keycloak-0.5.2
data:
  KEYCLOAK_PASSWORD_CHANGE_ENDPOINT: portal.opendesk.apps.digilab.network
  KC_LOG_LEVEL: INFO
  KC_HOSTNAME: https://id.opendesk.apps.digilab.network
  KC_PROXY: edge
  KC_DB: postgres
  # https://www.keycloak.org/server/caching
  KC_CACHE: ispn
  # https://www.keycloak.org/server/caching#_available_transport_stacks
  KC_CACHE_STACK: kubernetes
  KC_METRICS_ENABLED: 'true'
  KC_HOSTNAME_BACKCHANNEL_DYNAMIC: 'true'

  KC_DB_URL_HOST: postgresql
  KC_DB_URL_PORT: '5432'
  KC_DB_USERNAME: keycloak_user
  KC_DB_URL_DATABASE: keycloak

  UNIVENTION_THEME: https://portal.opendesk.apps.digilab.network/univention/theme.css
  UNIVENTION_CUSTOM_THEME: https://portal.opendesk.apps.digilab.network/univention/portal/css/custom.css
  UNIVENTION_FAVICON: https://portal.opendesk.apps.digilab.network/favicon.ico

  CACHE_OWNERS_COUNT: '1'
  CACHE_OWNERS_AUTH_SESSIONS_COUNT: '1'
  # Needed for the headless service
  PROXY_ADDRESS_FORWARDING: 'true'
  JAVA_OPTS_APPEND: -Djgroups.dns.query=ums-keycloak.tn-openbsw-opendesk.svc.cluster.local
---
# Source: nubus/charts/nubusGuardian/templates/configmap-authorization-api.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: ums-guardian-authorization-api
  namespace: tn-openbsw-opendesk
  labels:
    app.kubernetes.io/name: guardian
    helm.sh/chart: nubusGuardian-0.14.0
    app.kubernetes.io/instance: ums
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 2.0.0

data:
  HOME: /guardian_service_dir
  GUARDIAN__AUTHZ__CORS__ALLOWED_ORIGINS: '*'
  GUARDIAN__AUTHZ__ADAPTER__SETTINGS_PORT: env
  GUARDIAN__AUTHZ__ADAPTER__PERSISTENCE_PORT: udm_data
  GUARDIAN__AUTHZ__ADAPTER__POLICY_PORT: opa
  GUARDIAN__AUTHZ__ADAPTER__AUTHENTICATION_PORT: fast_api_oauth
  IS_UNIVENTION_APPCENTER: '0'
  UDM_DATA_ADAPTER__URL: http://ums-udm-rest-api/udm/
  UDM_DATA_ADAPTER__USERNAME_FILE: /var/secrets/udmDataAdapterUsername
  UDM_DATA_ADAPTER__PASSWORD_FILE: /var/secrets/udmDataAdapterPassword
  OPA_ADAPTER__URL: http://ums-guardian-open-policy-agent/
  GUARDIAN__AUTHZ__LOGGING__LEVEL: INFO
  GUARDIAN__AUTHZ__LOGGING__STRUCTURED: 'true'
  GUARDIAN__AUTHZ__LOGGING__FORMAT: <green>{time:YYYY-MM-DD HH:mm:ss.SSS ZZ}</green>
    | <level>{level}</level> | <level>{message}</level> | {extra}
  OAUTH_ADAPTER__WELL_KNOWN_URL: http://ums-keycloak:8080/realms/opendesk/.well-known/openid-configuration

---
# Source: nubus/charts/nubusGuardian/templates/configmap-init-management-ui.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: ums-guardian-init-config-management-ui
  namespace: tn-openbsw-opendesk
  labels:
    app.kubernetes.io/name: guardian
    helm.sh/chart: nubusGuardian-0.14.0
    app.kubernetes.io/instance: ums
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 2.0.0

data:
  10-generate_config.sh: |
    #!/bin/bash

    set -eo pipefail

    env_variable_names=$(compgen -e)
    config='{}'

    for variable_name in $env_variable_names; do
        if [[ "$variable_name" == VITE__* ]]; then
            config=$(echo "$config" | jq --arg value "${!variable_name}" ".$variable_name = \$value")
        fi
    done
    echo "$config" > /app/config.json
---
# Source: nubus/charts/nubusGuardian/templates/configmap-init-management-ui.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: ums-guardian-nginx-conf
  namespace: tn-openbsw-opendesk
  labels:
    app.kubernetes.io/name: guardian
    helm.sh/chart: nubusGuardian-0.14.0
    app.kubernetes.io/instance: ums
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 2.0.0

data:
  nginx.conf: |
    server {
     listen 8383;
     server_name management-ui;
     root /app;
     location /univention/guardian/management-ui {
       alias /app/;
       try_files $uri /index.html;
     }

     location /univention/guardian/management-ui/favicon.ico {
       alias /app/favicon.ico;
       try_files $uri =404;
     }
     location /univention/guardian/management-ui/config.json {
       alias /app/config.json;
       try_files $uri =404;
     }

     location /univention/guardian/management-ui/assets/ {
       alias /app/assets/;
       try_files $uri =404;
     }
    }
---
# Source: nubus/charts/nubusGuardian/templates/configmap-management-api.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: ums-guardian-management-api
  namespace: tn-openbsw-opendesk
  labels:
    app.kubernetes.io/name: guardian
    helm.sh/chart: nubusGuardian-0.14.0
    app.kubernetes.io/instance: ums
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 2.0.0

data:
  HOME: /guardian_service_dir
  GUARDIAN__MANAGEMENT__CORS__ALLOWED_ORIGINS: '*'
  GUARDIAN__MANAGEMENT__ADAPTER__SETTINGS_PORT: env
  GUARDIAN__MANAGEMENT__ADAPTER__APP_PERSISTENCE_PORT: sql
  GUARDIAN__MANAGEMENT__ADAPTER__CONDITION_PERSISTENCE_PORT: sql
  GUARDIAN__MANAGEMENT__ADAPTER__CONTEXT_PERSISTENCE_PORT: sql
  GUARDIAN__MANAGEMENT__ADAPTER__NAMESPACE_PERSISTENCE_PORT: sql
  GUARDIAN__MANAGEMENT__ADAPTER__PERMISSION_PERSISTENCE_PORT: sql
  GUARDIAN__MANAGEMENT__ADAPTER__ROLE_PERSISTENCE_PORT: sql
  GUARDIAN__MANAGEMENT__ADAPTER__CAPABILITY_PERSISTENCE_PORT: sql
  GUARDIAN__MANAGEMENT__ADAPTER__AUTHENTICATION_PORT: fast_api_oauth
  GUARDIAN__MANAGEMENT__ADAPTER__AUTHORIZATION_API_URL: http://ums-guardian-authorization-api/guardian/authorization
  GUARDIAN__MANAGEMENT__ADAPTER__RESOURCE_AUTHORIZATION_PORT: guardian
  # NOTE: Seems to be only used during stopping the containers for univention-app command
  # We can probably drop it, since it is used on some bash termiation script
  IS_UNIVENTION_APPCENTER: '0'
  OAUTH_ADAPTER__WELL_KNOWN_URL: http://ums-keycloak:8080/realms/opendesk/.well-known/openid-configuration
  OAUTH_ADAPTER__M2M_SECRET_FILE: /var/secrets/oauthAdapterM2mSecret
  GUARDIAN__MANAGEMENT__LOGGING__LEVEL: DEBUG
  GUARDIAN__MANAGEMENT__LOGGING__STRUCTURED: 'true'
  GUARDIAN__MANAGEMENT__LOGGING__FORMAT: <green>{time:YYYY-MM-DD HH:mm:ss.SSS ZZ}</green>
    | <level>{level}</level> | <level>{message}</level> | {extra}
  GUARDIAN__MANAGEMENT__BASE_URL: https://portal.opendesk.apps.digilab.network
  SQL_PERSISTENCE_ADAPTER__DIALECT: postgresql
  SQL_PERSISTENCE_ADAPTER__HOST: postgresql
  SQL_PERSISTENCE_ADAPTER__PORT: '5432'
  SQL_PERSISTENCE_ADAPTER__USERNAME: guardianmanagementapi_user
  SQL_PERSISTENCE_ADAPTER__DB_NAME: guardianmanagementapi

---
# Source: nubus/charts/nubusGuardian/templates/configmap-management-ui.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: ums-guardian-management-ui
  namespace: tn-openbsw-opendesk
  labels:
    app.kubernetes.io/name: guardian
    helm.sh/chart: nubusGuardian-0.14.0
    app.kubernetes.io/instance: ums
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 2.0.0

data:
  VITE__MANAGEMENT_UI__ADAPTER__AUTHENTICATION_PORT: keycloak
  VITE__MANAGEMENT_UI__ADAPTER__DATA_PORT: api
  VITE__API_DATA_ADAPTER__URI: https://portal.opendesk.apps.digilab.network/guardian/management
  VITE__KEYCLOAK_AUTHENTICATION_ADAPTER__SSO_URI: https://id.opendesk.apps.digilab.network
  VITE__KEYCLOAK_AUTHENTICATION_ADAPTER__REALM: opendesk
  VITE__KEYCLOAK_AUTHENTICATION_ADAPTER__CLIENT_ID: guardian-ui

---
# Source: nubus/charts/nubusGuardian/templates/configmap-open-policy-agent.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: ums-guardian-open-policy-agent
  namespace: tn-openbsw-opendesk
  labels:
    app.kubernetes.io/name: guardian
    helm.sh/chart: nubusGuardian-0.14.0
    app.kubernetes.io/instance: ums
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 2.0.0

data:
  IS_UNIVENTION_APPCENTER: '0'
  OPA_DATA_BUNDLE: bundles/GuardianDataBundle.tar.gz
  OPA_POLICY_BUNDLE: bundles/GuardianPolicyBundle.tar.gz
  OPA_POLLING_MIN_DELAY: '10'
  OPA_POLLING_MAX_DELAY: '15'
  OPA_GUARDIAN_MANAGEMENT_URL: http://ums-guardian-management-api/guardian/management
---
# Source: nubus/charts/nubusKeycloakBootstrap/templates/configmap.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: ums-keycloak-bootstrap
  namespace: tn-openbsw-opendesk
  labels:
    app.kubernetes.io/name: keycloak-bootstrap
    helm.sh/chart: nubusKeycloakBootstrap-0.3.0
    app.kubernetes.io/instance: ums
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 0.0.1
  annotations:
    argocd.argoproj.io/hook: Sync
data:
  DEBUG: 'false'
  DOMAIN: opendesk.apps.digilab.network
  SUBDOMAIN_PORTAL: portal
  KEYCLOAK_USERNAME: kcadmin
  KEYCLOAK_HOST: ums-keycloak
  KEYCLOAK_REALM: opendesk
  KEYCLOAK_URL: http://ums-keycloak:8080
  UNIVENTION_KEYCLOAK_BOOTSTRAP_TEMP_DIR: /tmp
  UNIVENTION_KEYCLOAK_BOOTSTRAP_DEBUG_PAUSE_BEFORE_SCRIPT_START: '0'
  LDAP_BASE_DN: dc=swp-ldap,dc=internal
  LDAP_BIND_DN: uid=ldapsearch_keycloak,cn=users,dc=swp-ldap,dc=internal
  LDAP_URI: ldap://ums-ldap-server:389
  SAML_SERVICE_PROVIDER_HOSTNAME: portal.opendesk.apps.digilab.network
---
# Source: nubus/charts/nubusKeycloakBootstrap/templates/configmap.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: ums-keycloak-bootstrap-bootstrap-data
  namespace: tn-openbsw-opendesk
  labels:
    app.kubernetes.io/name: keycloak-bootstrap
    helm.sh/chart: nubusKeycloakBootstrap-0.3.0
    app.kubernetes.io/instance: ums
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 0.0.1
  annotations:
    argocd.argoproj.io/hook: Sync
data:
  ldap.mappers.yaml: |2

    - ldapAndUserModelAttributeName: opendeskProjectmanagementAdmin
    - ldapAndUserModelAttributeName: oxContextIDNum
  loginlinks.yaml: |2

    - link_number: 1
      language: "de"
      description: "Passwort vergessen?"
      href: "https://portal.opendesk.apps.digilab.network/univention/portal/#/selfservice/passwordforgotten"
    - link_number: 1
      language: "en"
      description: "Forgot password?"
      href: "https://portal.opendesk.apps.digilab.network/univention/portal/#/selfservice/passwordforgotten"

  2fa.yaml: |2

    enabled: true
    group: 2fa-users
---
# Source: nubus/charts/nubusKeycloakExtensions/templates/configmap-handler.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: ums-keycloak-extensions-handler
  namespace: tn-openbsw-opendesk
  labels:
    app.kubernetes.io/instance: ums
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: ums-keycloak-extensions-handler
    app.kubernetes.io/version: 21.0.1
    helm.sh/chart: nubusKeycloakExtensions-0.11.0
data:
  KC_AUTH_URL: http://ums-keycloak:8080/admin
  KC_USER: kcadmin
  KC_REALM: opendesk
  KC_USER_REALM: master
  POSTGRES_HOST: postgresql
  POSTGRES_PORT: '5432'
  POSTGRES_USER: keycloak_extensions_user
  POSTGRES_DATABASE_NAME: keycloak_extensions
  LOG_LEVEL: WARN
  FAILED_ATTEMPTS_FOR_IP_BLOCK: '7'
  FAILED_ATTEMPTS_FOR_DEVICE_BLOCK: '5'
  FAILED_ATTEMPTS_FOR_CAPTCHA_TRIGGER: '3'
  EVENTS_RETENTION_PERIOD: '1'
  AUTO_EXPIRE_RULE_IN_MINS: '1'
  DEVICE_PROTECTION_ENABLE: 'True'
  IP_PROTECTION_ENABLE: 'True'
  CAPTCHA_PROTECTION_ENABLE: 'False'
  NEW_DEVICE_LOGIN_NOTIFICATION_ENABLE: 'True'
  NEW_DEVICE_LOGIN_SUBJECT: New device login on your MijnBureau account
  SMTP_HOST: postfix.tn-openbsw-opendesk.svc.cluster.local
  SMTP_PORT: '25'
  SMTP_USERNAME: ''
  SMTP_AUTH_ENABLED: 'false'
  SMTP_SSL_ENABLED: 'false'
  SMTP_STARTTLS_ENABLED: 'false'
  MAIL_FROM: no-reply@opendesk.apps.digilab.network

---
# Source: nubus/charts/nubusKeycloakExtensions/templates/configmap-proxy.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: ums-keycloak-extensions-proxy
  namespace: tn-openbsw-opendesk
  labels:
    app.kubernetes.io/instance: ums
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: ums-keycloak-extensions-proxy
    app.kubernetes.io/version: 21.0.1
    helm.sh/chart: nubusKeycloakExtensions-0.11.0
data:
  KEYCLOAK_URL: http://ums-keycloak:8080
  KC_AUTH_URL: http://ums-keycloak:8080/admin
  KC_USER: kcadmin
  KC_REALM: opendesk
  KC_USER_REALM: master
  POSTGRES_HOST: postgresql
  POSTGRES_PORT: '5432'
  POSTGRES_USER: keycloak_extensions_user
  POSTGRES_DATABASE_NAME: keycloak_extensions
  CAPTCHA_SITE_KEY: ''
  CAPTCHA_SECRET_KEY: ''
  LOG_LEVEL: info
---
# Source: nubus/charts/nubusLdapNotifier/templates/configmap.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: ums-ldap-notifier
  namespace: tn-openbsw-opendesk
  labels:
    app.kubernetes.io/name: ldap-notifier
    helm.sh/chart: nubusLdapNotifier-0.25.2
    app.kubernetes.io/instance: ums
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 14.0.4
data:
  ENVIRONMENT: production
  LDAP_SERVER_UID: '101'
  LDAP_SERVER_GID: '102'
---
# Source: nubus/charts/nubusLdapServer/templates/configmap-primary.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: ums-ldap-server-primary
  namespace: tn-openbsw-opendesk
  labels:
    app.kubernetes.io/name: ldap-server
    helm.sh/chart: nubusLdapServer-0.25.2
    app.kubernetes.io/instance: ums
    app.kubernetes.io/managed-by: Helm
  annotations:
    intents.otterize.com/service-name: ums-ldap-server
data:
  PRIMARY_LDAP_URI: ldap://ums-ldap-server-primary
  PRIMARY_SERVICE: ums-ldap-server-primary
  LDAP_BASEDN: dc=swp-ldap,dc=internal
  SYNC_USER_DN: cn=admin,dc=swp-ldap,dc=internal
  ADMIN_DN: cn=admin,dc=swp-ldap,dc=internal
  LDAP_PORT: '389'
  LDAP_PROTOCOL: ldap
  REPLICACOUNT: '1'
  ENABLE_SOCKET_OVERLAY: 'false'
---
# Source: nubus/charts/nubusLdapServer/templates/configmap-primary.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: ums-ldap-server-primary-scripts
  namespace: tn-openbsw-opendesk
  labels:
    app.kubernetes.io/name: ldap-server
    helm.sh/chart: nubusLdapServer-0.25.2
    app.kubernetes.io/instance: ums
    app.kubernetes.io/managed-by: Helm
  annotations:
    intents.otterize.com/service-name: ums-ldap-server
data:
  append-slapd.conf.sh: |
    #!/usr/bin/env bash
    set -euxo pipefail
    env | sort
    # Export the SERVERID
    export SERVERID=$(echo "${HOSTNAME}" | awk -F '-' '{print $(NF)+1}')

    # Determine the PRIMARY_LDAP_URI based on the trailing digit of the HOSTNAME
    trailing_digit=$(echo "${HOSTNAME}" | awk -F '-' '{print $(NF)}')
    replicacount="${REPLICACOUNT}"

    if [[ "${replicacount}" -eq 2 ]]; then
      if [[ "${trailing_digit}" -eq 0 ]]; then
        export PRIMARY_LDAP_URI="${LDAP_PROTOCOL}://${PRIMARY_SERVICE}-1.${PRIMARY_SERVICE}:${LDAP_PORT}"
      else
        export PRIMARY_LDAP_URI="${LDAP_PROTOCOL}://${PRIMARY_SERVICE}-0.${PRIMARY_SERVICE}:${LDAP_PORT}"
      fi
    else
      if [[ "${trailing_digit}" -eq 0 ]]; then
        export PRIMARY_LDAP_URI="${LDAP_PROTOCOL}://${PRIMARY_SERVICE}-$((replicacount - 1)).${PRIMARY_SERVICE}:${LDAP_PORT}"
      elif [[ "${trailing_digit}" -eq $((replicacount - 1)) ]]; then
        export PRIMARY_LDAP_URI="${LDAP_PROTOCOL}://${PRIMARY_SERVICE}-0.${PRIMARY_SERVICE}:${LDAP_PORT}"
      else
        export PRIMARY_LDAP_URI="${LDAP_PROTOCOL}://${PRIMARY_SERVICE}-$((trailing_digit - 1)).${PRIMARY_SERVICE}:${LDAP_PORT}"
      fi
    fi

    # Read the slapd.conf.tpl file
    template=$(cat /config/templates/slapd.conf.tpl)

    # Replace placeholders with environment variable values using sed and eval
    while IFS=$'\n' read -r line; do
      # Skip empty lines
      if [[ -z "${line}" ]]; then
        continue
      fi

      # Get the leading spaces from the line
      leading_spaces=$(echo "${line}" | sed -n 's/^\(\s*\).*/\1/p')

      # Evaluate the line to expand any environment variables
      evaluated_line=$(eval echo "${line}")

      # Prepend the leading spaces to the evaluated line
      evaluated_line="${leading_spaces}${evaluated_line}"

      # Escape special characters in the line
      escaped_line=$(echo "${line}" | sed 's|[\/&]|\\&|g; s|\.|\\.|g; s|\+|\\+|g; s|\=|\\=|g')

      # Replace the line in the template with the evaluated line, preserving indentation
      template=$(echo "${template}" | sed "s|^${escaped_line}|${evaluated_line}|")
    done < <(echo "${template}")

    # Read the existing slapd.conf file
    slapd_conf=$(cat /etc/ldap/slapd.conf)

    # Initialize an empty modified slapd.conf file
    modified_slapd_conf="serverID 2${SERVERID}\n"

    # Initialize the replication ID counter
    replication_id=1

    # Initialize the suffix variable
    suffix=""

    # Process the slapd.conf file line by line
    while IFS=$'\n' read -r line; do
      # Append the current line to the modified slapd.conf
      modified_slapd_conf+="${line}\n"

      # Check if the current line starts with "modulepath" and append the moduleload for back_sock.so
      if [[ "${line}" =~ ^modulepath ]] && [[ "${ENABLE_SOCKET_OVERLAY}" == "true" ]]; then
        modified_slapd_conf+="moduleload back_sock.so\n"
        line="moduleload back_ldap.so\n"
      fi

      # Check if the current line starts with "suffix"
      if [[ "${line}" =~ ^suffix ]]; then
        # Extract the suffix value
        suffix=$(echo "${line}" | awk '{print $2}' | tr -d '"')
      fi

      # The ucs based slapd.conf does not allow for networked admin access to cn=internal, this adds it.
      # Check if the current line contains 'by sockname="PATH=/var/run/slapd/ldapi" write', if true, append the acl.
      if ([[ "${suffix}" == "cn=internal" ]] || [[ "${suffix}" == "cn=translog" ]]) && echo "${line}" | grep -q '^[[:space:]]*by sockname="PATH=/var/run/slapd/ldapi" write'; then
        echo "The suffix is ${suffix} and this line contains the socket acl."
        echo "Line: ${line}"
        # Append the syncrepl configuration to the modified slapd.conf
        modified_slapd_conf+="    by dn=\"cn=admin,${LDAP_BASEDN}\" write\n"
      fi

      # The ucs based slapd.conf does not allow for networked admin access to cn=internal and does not specify a rootdn, this adds both.
      # Check if the current line contains 'cn=translog', if true, append a roodn entry and the syncrepl configuration.
      if echo "${line}" | grep -q '^.*suffix.*cn=translog.*'; then
        echo "The suffix is ${suffix} and this line contains the cn=translog suffix."
        echo "Line: ${line}"
        # Append the syncrepl configuration to the modified slapd.conf
        modified_slapd_conf+="rootdn \"cn=admin,${LDAP_BASEDN}\"\n"

        # Set the line to the rootdn line so the following syncrepl configuration is added after it.
        line="rootdn \"cn=admin,${LDAP_BASEDN}\"\n"
      fi

      # Check if the current line starts with "rootdn"
      if [[ "${line}" =~ ^rootdn ]]; then
        # Generate the syncrepl configuration with the current replication ID and suffix
        syncrepl_config=$(echo "${template}" | sed "s/PLACEHOLDER_REPLICATION_ID/${replication_id}/" | sed "s|PLACEHOLDER_LDAP_BASEDN|${suffix}|")

        # Append the syncrepl configuration to the modified slapd.conf, preserving indentation
        modified_slapd_conf+="${syncrepl_config}\n"

        # Increment the replication ID
        replication_id=$((replication_id + 1))
      fi

      if [[ "${line}" =~ ^suffix ]] && [[ "${suffix}" == "${LDAP_BASEDN}" ]] && [[ "${ENABLE_SOCKET_OVERLAY}" == "true" ]]; then
        modified_slapd_conf+=$(cat /config/templates/slapd.conf.socket_overlay.tpl)
      fi

    done < <(echo "${slapd_conf}")

    # Write the modified slapd.conf
    echo -e "${modified_slapd_conf}" > /etc/ldap/slapd.conf
    # TODO: Comment this back out
    cat /etc/ldap/slapd.conf
    # slaptest -f /etc/ldap/slapd.conf
---
# Source: nubus/charts/nubusLdapServer/templates/configmap-primary.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: ums-ldap-server-primary-config-templates
  namespace: tn-openbsw-opendesk
  labels:
    app.kubernetes.io/name: ldap-server
    helm.sh/chart: nubusLdapServer-0.25.2
    app.kubernetes.io/instance: ums
    app.kubernetes.io/managed-by: Helm
  annotations:
    intents.otterize.com/service-name: ums-ldap-server
data:
  slapd.conf.tpl: |
    overlay syncprov
    syncprov-checkpoint 100 10
    syncprov-sessionlog 100

  slapd.conf.socket_overlay.tpl: |
    overlay sock
    extensions binddn connid peername
    socketpath /var/lib/univention-ldap/slapd-sock/sock
    sockops add delete modify modrdn
    sockresps extendedresult

---
# Source: nubus/charts/nubusLdapServer/templates/configmap-proxy.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: ums-ldap-server-proxy
  namespace: tn-openbsw-opendesk
  labels:
    app.kubernetes.io/name: ldap-server
    helm.sh/chart: nubusLdapServer-0.25.2
    app.kubernetes.io/instance: ums
    app.kubernetes.io/managed-by: Helm
  annotations:
    intents.otterize.com/service-name: ums-ldap-server
data:
  PRIMARY_LDAP_URI: ldap://ums-ldap-server-primary
  SECONDARY_LDAP_URI: ldap://ums-ldap-server-secondary
  LDAP_BASEDN: dc=swp-ldap,dc=internal
  ADMIN_DN: cn=admin,dc=swp-ldap,dc=internal
---
# Source: nubus/charts/nubusLdapServer/templates/configmap-proxy.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: ums-ldap-server-proxy-config-templates
  namespace: tn-openbsw-opendesk
  labels:
    app.kubernetes.io/name: ldap-server
    helm.sh/chart: nubusLdapServer-0.25.2
    app.kubernetes.io/instance: ums
    app.kubernetes.io/managed-by: Helm
  annotations:
    intents.otterize.com/service-name: ums-ldap-server
data:
  slapd.conf-proxy.tpl: |
    PLACEHOLDER_SCHEMAS
    attributeoptions "entry-" "lang-"
    moduleload	constraint.so


    pidfile /var/run/slapd/slapd.pid
    argsfile /var/run/slapd/slapd.args

    modulepath /usr/lib/ldap
    moduleload back_ldap.so

    database ldap
    suffix "dc=swp-ldap,dc=internal"
    overlay constraint
    constraint_attribute uidNumber regex ^[^0]+[0-9]*$
    constraint_attribute gidNumber regex ^[^0]+[0-9]*$
    moduleload            memberof.so
    overlay               memberof
    memberof-group-oc     posixGroup
    memberof-member-ad    uniqueMember
    memberof-memberof-ad  memberOf
    memberof-dangling     ignore
    memberof-refint       false
    uri ldap://ums-ldap-server-secondary
    lastmod on
    chase-referrals yes
    rebind-as-user yes
    # idassert-bind mode=self bindmethod=simple
    #   binddn="cn=admin,dc=swp-ldap,dc=internal"
    #   credentials="PLACEHOLDER_LDAP_CN_ADMIN_PW"
    #   tls_reqcert=never
    # idassert-passthru "dn.regex:.*"
    authz-regexp
      uid=([^,]*),cn=(gssapi|saml|oauthbearer),cn=auth
      ldap:///PLACEHOLDER_LDAP_BASEDN??sub?uid=$1
    access to * by * read

    # database ldap
    # suffix "cn=translog"
    # overlay constraint
    # uri ldap://ums-ldap-server-secondary
    # lastmod on
    # chase-referrals yes
    # rebind-as-user yes
    # idassert-passthru "dn.regex:.*"
    # access to * by * read


    sasl-secprops none,minssf=0

---
# Source: nubus/charts/nubusLdapServer/templates/configmap-proxy.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: ums-ldap-server-proxy-scripts
  namespace: tn-openbsw-opendesk
  labels:
    app.kubernetes.io/name: ldap-server
    helm.sh/chart: nubusLdapServer-0.25.2
    app.kubernetes.io/instance: ums
    app.kubernetes.io/managed-by: Helm
  annotations:
    intents.otterize.com/service-name: ums-ldap-server
data:
  wait-for-secondary.sh: |
    #!/bin/bash
    set -uxo pipefail
    echo "Waiting for secondary LDAP to be available ..."
    retry_interval=5
    error=1
    while [ $error -ne 0 ]; do
      (set +x; ldapsearch -H "${SECONDARY_LDAP_URI}" -x -D "${ADMIN_DN}" -w "${LDAP_CN_ADMIN_PW}" -b "${LDAP_BASEDN}" -s base >/dev/null 2>&1)
      error=$?
      if [ $error -eq 49 ]; then
        echo "Failed to authenticate with secondary LDAP at '${SECONDARY_LDAP_URI}' using binddn '${ADMIN_DN}' , retrying in ${retry_interval} seconds ..."
      else
        echo "Secondary LDAP not available at '${SECONDARY_LDAP_URI}' yet, errorcode was '$error', retrying in ${retry_interval} seconds ..."
      fi
      sleep ${retry_interval}
    done

  generate-slapd.conf.sh: |
    #!/usr/bin/env bash
    set -euo pipefail

    # Read the existing slapd.conf file
    slapd_conf=$(cat /etc/ldap/slapd.conf)

    # Initialize the schema_definition_lines variable
    schema_definition_lines=""

    # Process the slapd.conf file line by line
    while IFS=$'\n' read -r line; do
      # Check if the current line starts with "include" and append the moduleload for back_ldap.so
      if [[ "${line}" =~ ^include ]]; then
        echo "Appending schema definition from slapd.conf"
        schema_definition_lines+="${line}\n"
      fi
    done < <(echo "${slapd_conf}")

    echo "Schema definitions: ${schema_definition_lines}\n"

    # Read the slapd.conf-proxy.tpl file
    template=$(cat /config/templates/slapd.conf-proxy.tpl)

    # Initialize the generated slapd.conf variable
    generated_slapd_conf=""

    # Replace placeholders with environment variable values using sed and eval
    while IFS=$'\n' read -r line; do
      # Skip empty lines
      if [[ -z "${line}" ]]; then
        continue
      fi

      # Check if the current line contains the placeholder for the schema definitions and append the schema definitions
      if [[ "${line}" =~ ^PLACEHOLDER_SCHEMAS ]]; then
        echo "Found placeholder line. Appending schema definitions."
        generated_slapd_conf+="${schema_definition_lines}\n"
        continue
      fi

      PLACEHOLDER_LDAP_CN_ADMIN_PW=$(echo "${LDAP_CN_ADMIN_PW}" | sed 's/[&/\]/\\&/g')

      modified_line=$(echo "${line}" | sed "s|PLACEHOLDER_LDAP_CN_ADMIN_PW|${PLACEHOLDER_LDAP_CN_ADMIN_PW}|g" | sed "s|PLACEHOLDER_LDAP_BASEDN|${LDAP_BASEDN}|g")

      generated_slapd_conf+="${modified_line}\n"

    done < <(echo "${template}")


    # Write the modified slapd.conf
    echo -e "${generated_slapd_conf}" > /etc/ldap/slapd.conf
    slaptest -f /etc/ldap/slapd.conf
---
# Source: nubus/charts/nubusLdapServer/templates/configmap-secondary.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: ums-ldap-server-secondary
  namespace: tn-openbsw-opendesk
  labels:
    app.kubernetes.io/name: ldap-server
    helm.sh/chart: nubusLdapServer-0.25.2
    app.kubernetes.io/instance: ums
    app.kubernetes.io/managed-by: Helm
  annotations:
    intents.otterize.com/service-name: ums-ldap-server
data:
  PRIMARY_LDAP_URI: ldap://ums-ldap-server-primary
  LDAP_BASEDN: dc=swp-ldap,dc=internal
  SYNC_USER_DN: cn=admin,dc=swp-ldap,dc=internal
---
# Source: nubus/charts/nubusLdapServer/templates/configmap-secondary.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: ums-ldap-server-secondary-scripts
  namespace: tn-openbsw-opendesk
  labels:
    app.kubernetes.io/name: ldap-server
    helm.sh/chart: nubusLdapServer-0.25.2
    app.kubernetes.io/instance: ums
    app.kubernetes.io/managed-by: Helm
  annotations:
    intents.otterize.com/service-name: ums-ldap-server
data:
  wait-for-primary.sh: |
    #!/bin/bash
    set -uxo pipefail
    echo "Waiting for primary LDAP to be available ..."
    retry_interval=5
    error=1
    while [ $error -ne 0 ]; do
      (set +x; ldapsearch -H "${PRIMARY_LDAP_URI}" -x -D "${SYNC_USER_DN}" -w "${LDAP_CN_ADMIN_PW}" -b "${LDAP_BASEDN}" -s base >/dev/null 2>&1)
      error=$?
      if [ $error -eq 49 ]; then
        echo "Failed to authenticate with primary LDAP at '${PRIMARY_LDAP_URI}' using binddn '${ADMIN_DN}' , retrying in ${retry_interval} seconds ..."
      else
        echo "Primary LDAP not available at '${PRIMARY_LDAP_URI}' yet, errorcode was '$error', retrying in ${retry_interval} seconds ..."
      fi
      sleep ${retry_interval}
    done
  append-slapd.conf.sh: |
    #!/usr/bin/env bash
    set -euxo pipefail

    # Export the SERVERID
    export SERVERID=$(echo ${HOSTNAME} | awk -F '-' '{print $(NF)+1}')

    # Read the slapd.conf.tpl file
    template=$(cat /config/templates/slapd.conf.tpl)

    # Replace placeholders with environment variable values using sed and eval
    while IFS=$'\n' read -r line; do
      # Skip empty lines
      if [[ -z "${line}" ]]; then
        continue
      fi

      # Get the leading spaces from the line
      leading_spaces=$(echo "${line}" | sed -n 's/^\(\s*\).*/\1/p')

      # Evaluate the line to expand any environment variables
      evaluated_line=$(eval echo "${line}")

      # Prepend the leading spaces to the evaluated line
      evaluated_line="${leading_spaces}${evaluated_line}"

      # Escape special characters in the line
      escaped_line=$(echo "${line}" | sed 's|[\/&]|\\&|g; s|\.|\\.|g; s|\+|\\+|g; s|\=|\\=|g')

      # Replace the line in the template with the evaluated line, preserving indentation
      template=$(echo "${template}" | sed "s|^${escaped_line}|${evaluated_line}|")
    done < <(echo "${template}")

    # Read the slapd.conf-chaining.tpl file
    templateChaining=$(cat /config/templates/slapd.conf-chaining.tpl)

    # Replace placeholders with environment variable values using sed and eval
    while IFS=$'\n' read -r line; do
      # Skip empty lines
      if [[ -z "${line}" ]]; then
        continue
      fi

      # Get the leading spaces from the line
      leading_spaces=$(echo "${line}" | sed -n 's/^\(\s*\).*/\1/p')

      # Evaluate the line to expand any environment variables
      evaluated_line=$(eval echo "${line}")

      # Prepend the leading spaces to the evaluated line
      evaluated_line="${leading_spaces}${evaluated_line}"

      # Escape special characters in the line
      escaped_line=$(echo "${line}" | sed 's|[\/&]|\\&|g; s|\.|\\.|g; s|\+|\\+|g; s|\=|\\=|g')

      # Replace the line in the templateChaining with the evaluated line, preserving indentation
      templateChaining=$(echo "${templateChaining}" | sed "s|^${escaped_line}|${evaluated_line}|")
    done < <(echo "${templateChaining}")

    # Read the existing slapd.conf file
    slapd_conf=$(cat /etc/ldap/slapd.conf)

    # Initialize an empty modified slapd.conf file
    modified_slapd_conf="serverID 2${SERVERID}\n"

    # Initialize the replication ID counter
    replication_id=1

    # Initialize the suffix variable
    suffix=""

    # Process the slapd.conf file line by line
    while IFS=$'\n' read -r line; do
      # Append the current line to the modified slapd.conf
      modified_slapd_conf+="${line}\n"

      # Check if the current line starts with "modulepath" and append the moduleload for back_ldap.so
      if [[ "${line}" =~ ^modulepath ]]; then
        modified_slapd_conf+="moduleload back_ldap.so\n"

        # Add the chaining configuration to the modified slapd.conf
        modified_slapd_conf+="${templateChaining}\n"
        line="moduleload back_ldap.so\n"
      fi

      # Check if the current line starts with "suffix"
      if [[ "${line}" =~ ^suffix ]]; then
        # Extract the suffix value
        suffix=$(echo "${line}" | awk '{print $2}' | tr -d '"')
      fi

      # The ucs based slapd.conf does not allow for networked admin access to cn=internal, this adds it.
      # Check if the current line contains 'by sockname="PATH=/var/run/slapd/ldapi" write', if true, append the acl.
      if ([[ "${suffix}" == "cn=internal" ]] || [[ "${suffix}" == "cn=translog" ]]) && echo "${line}" | grep -q '^[[:space:]]*by sockname="PATH=/var/run/slapd/ldapi" write'; then
      # if echo "${line}" | grep -q '^[[:space:]]*by sockname="PATH=/var/run/slapd/ldapi" write'; then
        echo "The suffix is ${suffix} and this line contains the socket acl."
        echo "Line: ${line}"
        # Append the syncrepl configuration to the modified slapd.conf
        modified_slapd_conf+="    by dn=\"cn=admin,${LDAP_BASEDN}\" write\n"
      fi

      # The ucs based slapd.conf does not allow for networked admin access to cn=internal and does not specify a rootdn, this adds both.
      # Check if the current line contains 'cn=translog', if true, append a roodn entry and the syncrepl configuration.
      if echo "${line}" | grep -q '^.*suffix.*cn=translog.*'; then
        echo "The suffix is ${suffix} and this line contains the cn=translog suffix."
        echo "Line: ${line}"
        # Append the syncrepl configuration to the modified slapd.conf
        modified_slapd_conf+="rootdn \"cn=admin,${LDAP_BASEDN}\"\n"

        # Set the line to the rootdn line so the following syncrepl configuration is added after it.
        line="rootdn \"cn=admin,${LDAP_BASEDN}\"\n"
      fi

      # Check if the current line starts with "rootdn"
      if [[ "${line}" =~ ^rootdn ]]; then
        # Generate the syncrepl configuration with the current replication ID and suffix
        syncrepl_config=$(echo "${template}" | sed "s/PLACEHOLDER_REPLICATION_ID/${replication_id}/"| sed "s/PLACEHOLDER_SERVER_ID/${SERVERID}/" | sed "s|PLACEHOLDER_LDAP_BASEDN|${suffix}|")

        # Append the syncrepl configuration to the modified slapd.conf, preserving indentation
        modified_slapd_conf+="${syncrepl_config}\n"

        # Increment the replication ID
        replication_id=$((replication_id + 1))
      fi
    done < <(echo "${slapd_conf}")

    # Write the modified slapd.conf
    echo -e "${modified_slapd_conf}" > /etc/ldap/slapd.conf
    # slaptest -f /etc/ldap/slapd.conf
---
# Source: nubus/charts/nubusLdapServer/templates/configmap-secondary.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: ums-ldap-server-secondary-config-templates
  namespace: tn-openbsw-opendesk
  labels:
    app.kubernetes.io/name: ldap-server
    helm.sh/chart: nubusLdapServer-0.25.2
    app.kubernetes.io/instance: ums
    app.kubernetes.io/managed-by: Helm
  annotations:
    intents.otterize.com/service-name: ums-ldap-server
data:
  slapd.conf.tpl: |
    syncrepl rid=1PLACEHOLDER_SERVER_IDPLACEHOLDER_REPLICATION_ID
      provider=$PRIMARY_LDAP_URI
      type=refreshAndPersist
      interval=00:00:00:10
      network-timeout=0
      timeout=1
      searchbase="PLACEHOLDER_LDAP_BASEDN"
      bindmethod=simple
      binddn="$SYNC_USER_DN"
      credentials=$SYNC_PASSWORD
      schemachecking=off
      scope=sub
      retry="60 +"
    updateref $PRIMARY_LDAP_URI
    # overlay chain
    # chain-uri $PRIMARY_LDAP_URI
    # chain-idassert-bind bindmethod=simple
    #   binddn="$SYNC_USER_DN"
    #   credentials=$SYNC_PASSWORD
    #   mode=self
    #   flags=prescriptive
    # chain-rebind-as-user TRUE
    # chain-return-error TRUE


  slapd.conf-chaining.tpl: |
    # placeholder

---
# Source: nubus/charts/nubusLdapServer/templates/configmap.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: ums-ldap-server
  namespace: tn-openbsw-opendesk
  labels:
    app.kubernetes.io/name: ldap-server
    helm.sh/chart: nubusLdapServer-0.25.2
    app.kubernetes.io/instance: ums
    app.kubernetes.io/managed-by: Helm
  annotations:
    intents.otterize.com/service-name: ums-ldap-server
data:
  DOMAIN_NAME: opendesk.apps.digilab.network
  LDAP_BASE_DN: dc=swp-ldap,dc=internal
  LOG_LEVEL: stats
  SAML_METADATA_URL: http://ums-keycloak:8080/realms/opendesk/protocol/saml/descriptor
  SAML_METADATA_URL_INTERNAL: http://ums-keycloak:8080/realms/opendesk/protocol/saml/descriptor
  SERVICE_PROVIDERS: https://portal.opendesk.apps.digilab.network/univention/saml/metadata
  TLS_MODE: off
---
# Source: nubus/charts/nubusLdapServer/templates/configmap.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: ums-ldap-server-scripts
  namespace: tn-openbsw-opendesk
  labels:
    app.kubernetes.io/name: ldap-server
    helm.sh/chart: nubusLdapServer-0.25.2
    app.kubernetes.io/instance: ums
    app.kubernetes.io/managed-by: Helm
  annotations:
    intents.otterize.com/service-name: ums-ldap-server
data:
  wait-for-saml-metadata.sh: |
    #!/bin/bash

    set -euxo pipefail

    # we have no UCR in this container, so just grep the SAML URL from the config file
    UCR_FILES="/etc/univention/base-defaults.conf /etc/univention/base.conf /etc/univention/base-forced.conf"
    SAML_METADATA_URL=$(grep --no-filename '^umc/saml/idp-server:' $UCR_FILES 2>/dev/null | cut --delimiter=':' --fields='2-' | tail --lines=1 | xargs || true)
    SAML_METADATA_URL_INTERNAL=$(grep --no-filename '^umc/saml/idp-server-internal:' $UCR_FILES 2>/dev/null | cut --delimiter=':' --fields='2-' | tail --lines=1 | xargs || true)

    DOWNLOAD_URL=${SAML_METADATA_URL_INTERNAL:-${SAML_METADATA_URL}}
    echo "Checking endpoint ${DOWNLOAD_URL}."

    SECONDS=0
    TIMEOUT=120

    while ! curl -k -o /dev/null -sf "${DOWNLOAD_URL}"; do
      echo "Checking if the SAML Metadata can be downloaded from keycloak ..."
      sleep 2

      if (($SECONDS > $TIMEOUT)); then
        echo "Giving up after $TIMEOUT seconds"
        exit 1
      fi
    done

    echo "Success, the SAML Metadata is available."
  init-internal-database.sh: |
    #!/bin/bash

    set -uxo pipefail
    mkdir -p /var/lib/univention-ldap/internal
    echo "dn: cn=internal
    objectClass: organizationalRole
    " | slapadd -b cn=internal -f /etc/ldap/slapd.conf
    exit 0

  is_active_master.sh: |
    #!/bin/bash
    set -uo pipefail

    # Set variables
    POD_NAME="${HOSTNAME}"
    HEADLESS_SERVICE_NAME="${PRIMARY_SERVICE}"
    LDAP_URI="${LDAP_PROTOCOL}://127.0.0.1:${LDAP_PORT}"
    LDAP_BIND_DN="${ADMIN_DN}"
    LDAP_BIND_PASSWORD="${LDAP_CN_ADMIN_PW}"
    LOCK_DN="cn=replicationlock,${LDAP_BASEDN}"

    set -x

    # Function to check if the current pod is the active master
    is_active_master() {
      # Check if the lock entry exists
      (set +x; ldapsearch -H "$LDAP_URI" -x -D "$LDAP_BIND_DN" -w "$LDAP_BIND_PASSWORD" -b "$LOCK_DN" -s base "(objectClass=*)" >/dev/null 2>&1)
      if [ $? -ne 0 ]; then
        # Lock entry doesn't exist, try to create it
        echo "dn: $LOCK_DN
    changetype: add
    objectClass: top
    objectClass: extensibleObject
    objectClass: organizationalRole
    description: $POD_NAME" | (set +x; ldapmodify -H "$LDAP_URI" -x -D "$LDAP_BIND_DN" -w "$LDAP_BIND_PASSWORD")
        if [ $? -eq 0 ]; then
          echo "Acquired lock, becoming the active master"
          echo "is_active_master.sh: Acquired lock, becoming the active master" > /proc/1/fd/1
          exit 0
        else
          echo "Failed to acquire lock, another master is active"
          echo "is_active_master.sh: Failed to acquire lock, another master is active" > /proc/1/fd/1
          exit 1
        fi
      else
        # Lock entry exists, check if it matches the current pod name
        active_master=$(set +x; ldapsearch -H "$LDAP_URI" -x -D "$LDAP_BIND_DN" -w "$LDAP_BIND_PASSWORD" -b "$LOCK_DN" -s base "(objectClass=*)" description | grep ^description: | awk '{print $2}')
        if [ "$active_master" == "$POD_NAME" ]; then
          echo "Current pod is the active master"
          echo "is_active_master.sh: Current pod is the active master" > /proc/1/fd/1
          exit 0
        else
          echo "Another pod is the active master: $active_master"
          echo "is_active_master.sh: Another pod is the active master: $active_master" > /proc/1/fd/1

          # Check if the other master is alive
          other_master_uri="${LDAP_PROTOCOL}://$active_master.${HEADLESS_SERVICE_NAME}:${LDAP_PORT}"
          (set +x; ldapsearch -H "$other_master_uri" -x -D "$LDAP_BIND_DN" -w "$LDAP_BIND_PASSWORD" -b "$LOCK_DN" -s base "(objectClass=*)" >/dev/null 2>&1)
          if [ $? -ne 0 ]; then
            echo "Other master is not responding, attempting to acquire lock"
            echo "is_active_master.sh: Other master is not responding, attempting to acquire lock" > /proc/1/fd/1
            echo "dn: $LOCK_DN
    changetype: modify
    replace: description
    description: $POD_NAME" | ( set +x; ldapmodify -H "$LDAP_URI" -x -D "$LDAP_BIND_DN" -w "$LDAP_BIND_PASSWORD")
            if [ $? -eq 0 ]; then
              echo "Acquired lock, becoming the active master"
              echo "is_active_master.sh: Acquired lock, becoming the active master" > /proc/1/fd/1
              exit 0
            else
              echo "Failed to acquire lock, another master is active"
              echo "is_active_master.sh: Failed to acquire lock, another master is active" > /proc/1/fd/1
              exit 1
            fi
          else
            echo "Other master is alive, remaining as a standby"
            echo "is_active_master.sh: Other master is alive, remaining as a standby" > /proc/1/fd/1
            exit 1
          fi
        fi
      fi
    }

    # Call the is_active_master function
    is_active_master
---
# Source: nubus/charts/nubusNotificationsApi/templates/configmap.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: ums-notifications-api
  namespace: tn-openbsw-opendesk
  labels:
    app.kubernetes.io/name: notifications-api
    helm.sh/chart: nubusNotificationsApi-0.42.2
    app.kubernetes.io/instance: ums
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 1.16.0
  annotations:
    intents.otterize.com/service-name: ums-notifications-api
data:
  APPLY_DATABASE_MIGRATIONS: 'True'
  DEV_MODE: 'False'
  ENVIRONMENT: production
  LOG_LEVEL: INFO
  SQL_ECHO: 'False'
  ROOT_PATH: /univention/portal/notifications-api/
---
# Source: nubus/charts/nubusPortalConsumer/templates/configmap.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: ums-portal-consumer-common
  namespace: tn-openbsw-opendesk
  labels:
    app.kubernetes.io/name: portal-consumer
    helm.sh/chart: nubusPortalConsumer-0.42.2
    app.kubernetes.io/instance: ums
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 1.16.0
data:
  DOMAIN_NAME: univention.intranet
  ENVIRONMENT: production
  LDAP_BASE_DN: dc=swp-ldap,dc=internal
  LDAP_HOST: ums-ldap-server-primary
  LDAP_HOST_DN: cn=admin,dc=swp-ldap,dc=internal
  LDAP_PORT: '389'
  LOG_LEVEL: INFO
  MAX_ACKNOWLEDGEMENT_RETRIES: '3'
  MACHINE_SECRET_FILE: /var/secrets/machine_secret
  PORTAL_DEFAULT_DN: cn=domain,cn=portal,cn=portals,cn=univention,dc=swp-ldap,dc=internal
  PORTAL_CONSUMER_LOG_STREAM: 'true'
  PORTAL_SERVER_ADMIN_GROUP: cn=Domain Admins,cn=groups,dc=swp-ldap,dc=internal
  PORTAL_SERVER_ASSETS_ROOT_PATH: portal-assets
  PORTAL_SERVER_AUTH_MODE: saml
  PORTAL_SERVER_EDITABLE: 'true'
  PORTAL_SERVER_PORT: '80'
  PORTAL_SERVER_UCS_INTERNAL_PATH: portal-data
  PORTAL_SERVER_UMC_GET_URL: http://ums-umc-server/get
  PORTAL_SERVER_UMC_SESSION_URL: http://ums-umc-server/get/session-info
  PORTAL_UDM_API_URL: http://ums-udm-rest-api:9979/udm/
  PORTAL_UDM_API_USERNAME: cn=admin
  PORTAL_UDM_API_PASSWORD_FILE: /var/secrets/machine_secret
  OBJECT_STORAGE_ENDPOINT: https://objectstore.opendesk.apps.digilab.network
  OBJECT_STORAGE_BUCKET: ums
  OBJECT_STORAGE_ACCESS_KEY_ID: "valueFrom:\n  secretKeyRef:\n    name: \"ums-portal-consumer-minio-credentials\"\
    \n    key: \"accessKey\""
  OBJECT_STORAGE_SECRET_ACCESS_KEY: "valueFrom:\n  secretKeyRef:\n    name: \"ums-portal-consumer-minio-credentials\"\
    \n    key: \"secretKey\""
  CA_CERT: ''
  CA_CERT_FILE: /var/secrets/ca_cert
  TLS_MODE: off
  PROVISIONING_API_BASE_URL: http://ums-provisioning-api
  PROVISIONING_API_USERNAME: portal-consumer
---
# Source: nubus/charts/nubusPortalConsumer/templates/configmap.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: ums-portal-consumer-scripts
  namespace: tn-openbsw-opendesk
  labels:
    app.kubernetes.io/name: portal-consumer
    helm.sh/chart: nubusPortalConsumer-0.42.2
    app.kubernetes.io/instance: ums
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 1.16.0
data:
  wait-for-provisioning-api.sh: |
    set -uo pipefail

    retry_interval=2
    response_code=404
    timeout_duration=120
    end_time=$((SECONDS + timeout_duration))

    while [ "$response_code" -ne 200 ]; do
      if [ $SECONDS -ge $end_time ]; then
        echo "Timeout reached. Exiting."
        exit 1
      fi

      echo "Waiting for the Provisioning API to be available ..."
      response_code=$(set +x; curl -s -o response.txt -w "%{http_code}" "${PROVISIONING_API_BASE_URL}/v1/subscriptions/${PROVISIONING_API_USERNAME}" -u "${PROVISIONING_API_USERNAME}":"${PROVISIONING_API_PASSWORD}")
      if [ "${response_code}" -ne 200 ]; then
        echo "Provisioning API is not reachable, status code: $response_code"
        cat response.txt
        sleep ${retry_interval}
      else
        echo "The Provisioning API is reachable"
        exit 0
      fi
    done

    echo "Permanent error ocurred. Exiting."
    exit 1
  wait-for-ldap.sh: |
    #!/bin/bash
    set -euxo pipefail

    while ! ldapsearch -H ldap://$LDAP_HOST -D $LDAP_HOST_DN -y $MACHINE_SECRET_FILE -b "" -s base -LLL; do
      echo "Checking if LDAP Server can be reached..."
      sleep 2
    done

    echo "Success, the LDAP Server is available"
  wait-for-udm.sh: |
    #!/bin/bash
    # TODO: find a way to not leak the udm passwort into the log
    set -euo pipefail

    while ! (set +x; curl -o- --fail --header "Accept: application/json" --user "${PORTAL_UDM_API_USERNAME}:$(cat $PORTAL_UDM_API_PASSWORD_FILE)" "${PORTAL_UDM_API_URL}ldap/base/"); do
      echo "Checking if the UDM REST API can be reached..."
      sleep 2
    done

    echo "Success, the UDM REST API is available"
  wait-for-object-store.py: |
    #!/bin/python3
    import boto3
    import os

    s3 = boto3.resource(
            's3',
            endpoint_url=os.environ["OBJECT_STORAGE_ENDPOINT"],
            aws_access_key_id=os.environ["OBJECT_STORAGE_ACCESS_KEY_ID"],
            aws_secret_access_key=os.environ["OBJECT_STORAGE_SECRET_ACCESS_KEY"]
        )

    provisioned = False
    while not provisioned:
        bucket = s3.Bucket(os.environ["OBJECT_STORAGE_BUCKET"])
        provisioned = bool(bucket.creation_date)
        if not provisioned:
           print("Waiting for the object storage service to be provisioned")
           break
        else:
           print("Object storage already provisioned")
---
# Source: nubus/charts/nubusPortalFrontend/templates/branding-configmap.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: ums-portal-frontend-branding
  namespace: tn-openbsw-opendesk
  labels:
    app.kubernetes.io/name: portal-frontend
    helm.sh/chart: nubusPortalFrontend-0.42.2
    app.kubernetes.io/instance: ums
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 1.16.0
  annotations:
    intents.otterize.com/service-name: ums-portal-frontend
binaryData:
  custom.css:
    
  favicon.ico:
    AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAACMuAAAjLgAAAAAAAAAAAAD//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////v7///j5///19v//9fb///X2///19v//9fb///X2///19v//9fb///X2///19v//+fr//////////////////////////////////////////////////////////////////////////////////////////////////u/y//y5xv/7mKr/+5Gl//uRpf/7kaX/+5Gl//uRpf/7kaX/+5Gl//uRpf/7kaX/+5Gl//uarP/9wMv///T2//////////////////////////////////////////////////////////////////////////////////7v8v/7m63/+niQ//p4kf/6eZH/+nmR//p5kf/6eZH/+nmR//p5kf/6eZH/+nmR//p5kf/6eZH/+niQ//p5kf/8prb///X3/////////////////////////////////////////////////////////////////////////////LnF//p4kf/6epL/+nqS//p6kv/6epL/+nqS//p6kv/6epL/+nqS//p6kv/6epL/+nqS//p6kv/6epL/+nqS//p6kv/9yNL////////////////////////////////////////////////////////////////////////4+f/7l6r/+niQ//p6kv/6epL/+nmR//p4kP/6eJD/+niQ//p4kP/6eJD/+niQ//p4kP/6eJD/+niQ//p4kP/6eJD/+naO//yktP///f7///////////////////////////////////////////////////////////////////X2//uRpf/6eZH/+nqS//p5kf/7iZ///Ke3//ynt//8p7f//Ke3//ynt//8p7f//Ke3//ynt//8p7f//Ke3//ynt//8prb//b/K///8/f//////////////////////////////////////////////////////////////////9fb/+5Gl//p5kf/6epL/+niQ//ynt////f3///7+///+/v///v7///7+///+/v///v7///7+///+/v///v7///7+///+/v///v7////////////////////////////////////////////////////////////////////////19v/7kaX/+nmR//p6kv/6eJD//Ke3///+/v////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////X2//uRpf/6eZH/+nqS//p4kP/8p7f///7+////////9vj//tXf//7S3f/+0t3//tLd//7S3f/+0t3//tLd//7S3f/+0t3//tLd//7W4P/+5u3///r7////////////////////////////////////////////////////////9fb/+5Gl//p5kf/6epL/+niQ//ynt////v7///////7V3//6OWv/+itg//osYf/6LGH/+ixh//osYf/6LGH/+ixh//osYf/6LGH/+i5j//s9bv/8aI7//bbJ///2+P/////////////////////////////////////////////19v/7kaX/+nmR//p6kv/6eJD//Ke3///+/v///////tLd//orYP/6HFX/+h1W//odVv/6HVb/+h1W//odVv/6HVb/+h1W//odVv/6HVb/+hxW//oaVP/6JFz//G+T//7j6v////////////////////////////////////////X2//uRpf/6eZH/+nqS//p4kP/8p7f///7+///////+0t3/+ixh//odVv/6Hlf/+h5X//oeV//6Hlf/+h5X//oeV//6Hlf/+h5X//oeV//6Hlf/+h5X//odV//6G1X/+1uE//7m7P//////////////////////////////////9fb/+5Gl//p5kf/6epL/+niQ//ynt////v7///////7S3f/6LGH/+h1W//oeV//6Hlf/+hxW//obVf/6G1X/+htV//obVf/6G1X/+htU//obVf/6Hlf/+h5X//oeV//6HFX//Hqc///6/P/////////////////////////////19v/7kaX/+nmR//p6kv/6eJD//Ke3///+/v///////tLd//osYf/6HVb/+h5X//odVv/8XIb//Zaw//2Ur//9lK///ZSv//2Ur//8h6X/+057//ofWP/6Hlf/+h5X//odVv/6LGH//snW//////////////////////////////X3//uRpf/6eZH/+nqS//p4kP/8p7f///7+///////+0t3/+ixh//odVv/6Hlf/+htV//2VsP//////////////////////////////////7PH//HOX//oeV//6Hlf/+h5X//obVP/8hKP/////////////////////////////+fr/+5qs//p4kP/6epL/+niQ//ynt////v7///////7S3f/6LGH/+h1W//oeV//6G1X//ZWw///////////////////////////////////////+4Oj/+z1u//ocVv/6Hlf/+htU//tYgv//9/n////////////////////////////9wMv/+nmR//p6kv/6eJD//Ke3///+/v///////tLd//osYf/6HVb/+h5X//obVf/9lbD////////////////////////////////////////7/P/8Y4r/+hpU//oeV//6G1X/+0d2///v8//////////////////////////////09v/8prb/+nqS//p2jv/8prb///7+///////+0t3/+ixh//odVv/6Hlf/+htV//2VsP////////////////////////////////////////3+//xqkP/6GlT/+h5X//ocVf/7RXT//+3y///////////////////////////////////19//9yNL/+6S0//y/yv///v7///////7S3f/6LGH/+h1W//oeV//6G1X//ZWw/////////////////////////////////////////f7//GqQ//oaVP/6Hlf/+hxV//tFdP//7fL//////////////////////////////////////////////f3///z9/////////////tLd//osYf/6HVb/+h5X//obVf/9lbD////////////////////////////////////////5+v/7Xob/+htU//oeV//6G1X/+0l3///w9P/////////////////////////////////////////////////////////////////+1uD/+i5j//odVv/6Hlf/+htV//yDo////////////////////////////////////////tHd//o0Z//6HVb/+h5X//oaVP/7X4f///n7///////////////////////////////////////////////////////////////////o7v/7P3D/+hxV//oeV//6HFb/+z1u//7K2P///P3///3+///9/v///f7///r7//7S3v/7V4L/+hxW//oeV//6Hlf/+hxV//2Srf////////////////////////////////////////////////////////////////////////z9//xxlf/6GlT/+h5X//oeV//6HVb/+jRo//xiiv/8apD//GqQ//xqkP/8Xof/+jNn//ocVv/6Hlf/+h5X//ocVv/7Nmn//tfh/////////////////////////////////////////////////////////////////////////////sfV//ouY//6HFb/+h5X//oeV//6HVb/+hpU//oaVP/6GlT/+hpU//oaVP/6HVb/+h5X//oeV//6HVb/+h9Y//2Vr////v///////////////////////////////////////////////////////////////////////////////f3//Zey//okW//6HFX/+h5X//oeV//6Hlf/+h5X//oeV//6Hlf/+h5X//oeV//6Hlf/+hxW//ofWP/8epz///P2////////////////////////////////////////////////////////////////////////////////////////+Pr//Z63//o2af/6G1X/+hpU//obVf/6HFX/+hxV//ocVf/6G1X/+hpU//ocVf/6Nmn//ZWw///z9v///////////////////////////////////////////////////////////////////////////////////////////////////v7//tbh//yMqf/7WYP/+0d2//tFdP/7RXT/+0V0//tJd//7X4j//ZKu//7Y4v///f7////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////3+f//7/P//+3y///t8v//7fL///D0///5+///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=
  logo.svg:
    PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPHN2ZyBpZD0iRWJlbmVfMSIgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIiB2aWV3Qm94PSIwIDAgMTI4IDEyOCI+CiAgPGRlZnM+CiAgICA8c3R5bGU+CiAgICAgIC5jbHMtMSB7CiAgICAgICAgZmlsbDogIzU3MWVmYTsKICAgICAgfQoKICAgICAgLmNscy0yIHsKICAgICAgICBmaWxsOiAjOTI3YWZhOwogICAgICB9CiAgICA8L3N0eWxlPgogIDwvZGVmcz4KICA8cGF0aCBjbGFzcz0iY2xzLTIiIGQ9Ik04My4xLDk3LjI2djIuMTJjMCw4Ljk3LTcuMywxNi4yNy0xNi4yNywxNi4yN0gyOC42MmMtOC45NywwLTE2LjI3LTcuMy0xNi4yNy0xNi4yN3YtMzguMmMwLTguOTcsNy4zLTE2LjI3LDE2LjI3LTE2LjI3aDIuMTJ2NTIuMzVoNTIuMzVaIi8+CiAgPHBhdGggY2xhc3M9ImNscy0xIiBkPSJNODMuODEsODQuNTJoLTQwLjMzdi00NC41N2MwLTE1LjIyLDEyLjM4LTI3LjU5LDI3LjU5LTI3LjU5aDEyLjc0YzE3LjU2LDAsMzEuODQsMTQuMjgsMzEuODQsMzEuODR2OC40OWMwLDE3LjU2LTE0LjI4LDMxLjg0LTMxLjg0LDMxLjg0Wk02MS44OCw2Ni4xMmgyMS45M2M3LjQxLDAsMTMuNDQtNi4wMywxMy40NC0xMy40NHYtOC40OWMwLTcuNDEtNi4wMy0xMy40NC0xMy40NC0xMy40NGgtMTIuNzRjLTUuMDcsMC05LjIsNC4xMy05LjIsOS4ydjI2LjE4WiIvPgo8L3N2Zz4=
  portal_background_image.svg:
    PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz48c3ZnIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyIgd2lkdGg9IjEiIGhlaWdodD0iMSIvPg==

---
# Source: nubus/charts/nubusPortalFrontend/templates/configmap.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: ums-portal-frontend
  namespace: tn-openbsw-opendesk
  labels:
    app.kubernetes.io/name: portal-frontend
    helm.sh/chart: nubusPortalFrontend-0.42.2
    app.kubernetes.io/instance: ums
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 1.16.0
  annotations:
    intents.otterize.com/service-name: ums-portal-frontend
data:
  ENVIRONMENT: production
  LOG_LEVEL: INFO
---
# Source: nubus/charts/nubusPortalFrontend/templates/configmap.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: ums-portal-frontend-nginx
  namespace: tn-openbsw-opendesk
  labels:
    app.kubernetes.io/name: portal-frontend
    helm.sh/chart: nubusPortalFrontend-0.42.2
    app.kubernetes.io/instance: ums
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 1.16.0
  annotations:
    intents.otterize.com/service-name: ums-portal-frontend
data:
  nginx.conf: |
    worker_processes  auto;
    error_log  /dev/stderr notice;
    pid        /var/run/nginx.pid;
    events {
        worker_connections  1024;
    }
    http {
        include       /etc/nginx/mime.types;
        default_type  application/octet-stream;
        log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                          '$status $body_bytes_sent "$http_referer" '
                          '"$http_user_agent" "$http_x_forwarded_for"';
        access_log  /dev/stdout  main;
        sendfile        on;
        keepalive_timeout  65;
        #gzip  on;
        server {
            listen 80 default_server;
            listen [::]:80 default_server;
            root /var/www/html;
            index index.html index.htm;
            server_name _;
            location / {
                try_files $uri $uri/ =404;
            }
        }
    }
---
# Source: nubus/charts/nubusPortalServer/templates/configmap.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: ums-portal-server
  namespace: tn-openbsw-opendesk
  labels:
    app.kubernetes.io/name: portal-server
    helm.sh/chart: nubusPortalServer-0.42.2
    app.kubernetes.io/instance: ums
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 1.16.0
  annotations:
    intents.otterize.com/service-name: ums-portal-server
data:
  ENVIRONMENT: production
  LOG_LEVEL: INFO
  PORTAL_SERVER_ADMIN_GROUP: cn=Domain Admins,cn=groups,dc=swp-ldap,dc=internal
  PORTAL_SERVER_AUTH_MODE: saml
  PORTAL_SERVER_EDITABLE: 'true'
  PORTAL_SERVER_PORT: '80'
  PORTAL_SERVER_UCS_INTERNAL_PATH: portal-data
  PORTAL_SERVER_UMC_GET_URL: http://ums-umc-server/get
  PORTAL_SERVER_UMC_SESSION_URL: http://ums-umc-server/get/session-info
  PORTAL_SERVER_CENTRAL_NAVIGATION_ENABLED: 'true'
  OBJECT_STORAGE_ENDPOINT: https://objectstore.opendesk.apps.digilab.network
  OBJECT_STORAGE_BUCKET: ums
---
# Source: nubus/charts/nubusProvisioning/charts/nats/templates/configmap.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: ums-provisioning-nats-config
  namespace: tn-openbsw-opendesk
  labels:
    app.kubernetes.io/name: provisioning-nats
    helm.sh/chart: nats-0.1.2
    app.kubernetes.io/instance: ums
    app.kubernetes.io/managed-by: Helm
  annotations:
    intents.otterize.com/service-name: ums-provisioning-nats
data:
  nats.conf: |
    {
      server_name: $SERVER_NAME
      pid_file: "/var/run/nats.pid"
      port: 4222
      http_port: 8222
      lame_duck_duration: 30s
      lame_duck_grace_period: 10s
      max_payload: 16MB
      jetstream {
        max_file_store: 1Gi
        max_memory_store: 256Mi
        store_dir: "/data"
      }

      authorization {
        users: [
          {
            user: $NATS_USER
            password: $NATS_PASSWORD
            permissions: {
              publish: '>'
              subscribe: '>'
            }
          }
          {
            user: $NATS_API_USER
            password: $NATS_API_PASSWORD
            permissions: {
              publish: '>'
              subscribe: '>'
            }
          }
          {
            user: $NATS_DISPATCHER_USER
            password: $NATS_DISPATCHER_PASSWORD
            permissions: {
              publish: '>'
              subscribe: '>'
            }
          }
          {
            user: $NATS_UDM_TRANSFORMER_USER
            password: $NATS_UDM_TRANSFORMER_PASSWORD
            permissions: {
              publish: '>'
              subscribe: '>'
            }
          }
          {
            user: $NATS_PREFILL_USER
            password: $NATS_PREFILL_PASSWORD
            permissions: {
              publish: '>'
              subscribe: '>'
            }
          }
          {
            user: $NATS_UDMLISTENER_USER
            password: $NATS_UDMLISTENER_PASSWORD
            permissions: {
              publish: '>'
              subscribe: '>'
            }
          }
        ]
      }

    }
---
# Source: nubus/charts/nubusProvisioning/templates/configmap.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: ums-provisioning-common
  namespace: tn-openbsw-opendesk
  labels:
    app.kubernetes.io/name: provisioning
    helm.sh/chart: nubusProvisioning-0.44.0
    app.kubernetes.io/instance: ums
    app.kubernetes.io/managed-by: Helm
data:
  PROVISIONING_API_HOST: ums-provisioning-api
  PROVISIONING_API_PORT: '80'
  NATS_HOST: ums-provisioning-nats
  NATS_PORT: '4222'
---
# Source: nubus/charts/nubusProvisioning/templates/configmap.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: ums-provisioning-wait-for-api
  namespace: tn-openbsw-opendesk
  labels:
    app.kubernetes.io/name: provisioning
    helm.sh/chart: nubusProvisioning-0.44.0
    app.kubernetes.io/instance: ums
    app.kubernetes.io/managed-by: Helm
data:
  wait-for-api.sh: |+
    #!/bin/bash
    # SPDX-License-Identifier: AGPL-3.0-only
    # SPDX-FileCopyrightText: 2024 Univention GmbH

    set -xo pipefail

    [ -z "$1" ] && {
      echo "A url is required as the first argument"
      exit 1
    }

    set -uxo pipefail

    retry_interval=2
    response_code=404
    timeout_duration=240
    end_time=$((SECONDS + timeout_duration))

    while [ $response_code -ne 401 ]; do
      if [ $SECONDS -ge $end_time ]; then
        echo "Timeout reached. Exiting."
        exit 1
      fi

      echo "Waiting for the Provisioning API to be available ..."
      response_code=$(set +x; curl -s -o response.txt -w "%{http_code}" -X POST "$1")
      if [ "${response_code}" -ne 401 ]; then
        echo "Provisioning API is not reachable, status code: $response_code"
        cat response.txt
        sleep ${retry_interval}
      else
        echo "The Provisioning API is reachable"
        exit 0
      fi
    done

    echo "Permanent error ocurred. Exiting."
    exit 1


---
# Source: nubus/charts/nubusProvisioning/templates/configmap.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: ums-provisioning-api
  namespace: tn-openbsw-opendesk
  labels:
    app.kubernetes.io/name: provisioning
    helm.sh/chart: nubusProvisioning-0.44.0
    app.kubernetes.io/instance: ums
    app.kubernetes.io/managed-by: Helm
data:
  LOG_LEVEL: INFO
  DEBUG: 'false'
  ROOT_PATH: /
  CORS_ALL: 'false'
  wait-for-nats.py: |
    #!/usr/bin/env python3
    import os
    import asyncio
    from nats.aio.client import Client as NATS

    async def error_cb(e):
        print(f"Unavailable, waiting 2 seconds. Error: {e}")
        await asyncio.sleep(2)

    async def check_nats():
        nc = NATS()
        print("Checking if NATS server can be reached...")
        await nc.connect(
            servers=[f"nats://{os.environ['NATS_HOST']}:{os.environ['NATS_PORT']}"],
            error_cb=error_cb,
            user=os.environ['NATS_USER'],
            password=os.environ['NATS_PASSWORD'],
        )
        print("Success, the NATS server is available")
        await nc.close()

    asyncio.run(check_nats())
---
# Source: nubus/charts/nubusProvisioning/templates/configmap.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: ums-provisioning-dispatcher
  namespace: tn-openbsw-opendesk
  labels:
    app.kubernetes.io/name: provisioning
    helm.sh/chart: nubusProvisioning-0.44.0
    app.kubernetes.io/instance: ums
    app.kubernetes.io/managed-by: Helm
data:
  LOG_LEVEL: INFO
  NATS_MAX_RECONNECT_ATTEMPTS: '5'
  UDM_HOST: ums-udm-rest-api
  UDM_PORT: '9979'
---
# Source: nubus/charts/nubusProvisioning/templates/configmap.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: ums-provisioning-prefill
  namespace: tn-openbsw-opendesk
  labels:
    app.kubernetes.io/name: provisioning
    helm.sh/chart: nubusProvisioning-0.44.0
    app.kubernetes.io/instance: ums
    app.kubernetes.io/managed-by: Helm
data:
  MAX_PREFILL_ATTEMPTS: '5'
  NATS_MAX_RECONNECT_ATTEMPTS: '5'
  LOG_LEVEL: INFO
  UDM_HOST: ums-udm-rest-api
  UDM_PORT: '9979'
  wait-for-udm.py: |
    #!/bin/python3
    import os
    import time
    import sys
    from univention.admin.rest.client import UDM

    udm = UDM.http(
        f"http://{os.environ['UDM_HOST']}:{os.environ['UDM_PORT']}/udm/",
        os.environ["UDM_USERNAME"],
        os.environ["UDM_PASSWORD"],
    )

    timeout = int(os.environ.get("TIMEOUT", "600"))
    start_time = time.time()

    while time.time() - start_time < timeout:
        print("Checking if UDM Rest API can be reached...")
        try:
            udm.get_ldap_base()
            print("Success, UDM Rest API is available")
            sys.exit(0)
        except Exception as e:
            print(f"Unavailable, waiting 2 seconds. Error: {e}")
            time.sleep(2)

    print("Timeout reached, giving up")
    sys.exit(1)
---
# Source: nubus/charts/nubusProvisioning/templates/configmap.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: ums-provisioning-udm-transformer
  namespace: tn-openbsw-opendesk
  labels:
    app.kubernetes.io/name: provisioning
    helm.sh/chart: nubusProvisioning-0.44.0
    app.kubernetes.io/instance: ums
    app.kubernetes.io/managed-by: Helm
data:
  LDAP_PUBLISHER_NAME: udm-listener
  LOG_LEVEL: INFO
  UDM_HOST: ums-udm-rest-api
  UDM_PORT: '9979'
  LDAP_HOST: ums-ldap-server-primary
  LDAP_PORT: '389'
  LDAP_TLS_MODE: off

  LDAP_BASE_DN: dc=swp-ldap,dc=internal
  LDAP_BIND_DN: cn=admin,dc=swp-ldap,dc=internal

---
# Source: nubus/charts/nubusProvisioning/templates/configmap.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: ums-provisioning-register-consumers
  namespace: tn-openbsw-opendesk
  labels:
    app.kubernetes.io/name: provisioning
    helm.sh/chart: nubusProvisioning-0.44.0
    app.kubernetes.io/instance: ums
    app.kubernetes.io/managed-by: Helm
data:
  PROVISIONING_API_BASE_URL: http://ums-provisioning-api/v1/subscriptions
  UDM_HOST: ums-udm-rest-api
  UDM_PORT: '9979'
  LDAP_BASE_DN: dc=swp-ldap,dc=internal
  wait-for-data-loader.sh: |
    #!/bin/bash
    # TODO: find a way to not leak the udm passwort into the log
    set -euxo pipefail

    while ! (set +x; curl -o- --fail -X GET -u "${UDM_USERNAME}:${UDM_PASSWORD}" "http://${UDM_HOST}:${UDM_PORT}/udm/settings/data/cn=stack-data-ums.done,cn=data,cn=univention,${LDAP_BASE_DN}" -H 'Accept: application/json'); do
      echo "Data loader not finished yet, waiting..."
      sleep 2
    done

    echo "Success, the data loader has finished."
---
# Source: nubus/charts/nubusSelfServiceConsumer/templates/configmap.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: ums-selfservice-listener-common
  namespace: tn-openbsw-opendesk
  labels:
    app.kubernetes.io/name: selfservice-listener
    helm.sh/chart: nubusSelfServiceConsumer-0.11.3
    app.kubernetes.io/instance: ums
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 0.0.1
data:
  LOG_LEVEL: INFO
  MAX_UMC_REQUEST_RETRIES: '5'
  PROVISIONING_API_BASE_URL: http://ums-provisioning-api
  UMC_SERVER_URL: http://ums-umc-server
  PROVISIONING_API_USERNAME: selfservice
  MAX_ACKNOWLEDGEMENT_RETRIES: '3'
---
# Source: nubus/charts/nubusSelfServiceConsumer/templates/configmap.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: ums-selfservice-listener-scripts
  namespace: tn-openbsw-opendesk
  labels:
    app.kubernetes.io/name: selfservice-listener
    helm.sh/chart: nubusSelfServiceConsumer-0.11.3
    app.kubernetes.io/instance: ums
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 0.0.1
data:
  wait-for-provisioning-api.sh: |
    set -uo pipefail

    retry_interval=2
    response_code=404
    timeout_duration=120
    end_time=$((SECONDS + timeout_duration))

    while [ "$response_code" -ne 200 ]; do
      if [ $SECONDS -ge $end_time ]; then
        echo "Timeout reached. Exiting."
        exit 1
      fi

      echo "Waiting for the Provisioning API to be available ..."
      response_code=$(set +x; curl -s -o response.txt -w "%{http_code}" "${PROVISIONING_API_BASE_URL}/v1/subscriptions/${PROVISIONING_API_USERNAME}" -u "${PROVISIONING_API_USERNAME}":"${PROVISIONING_API_PASSWORD}")
      if [ "${response_code}" -ne 200 ]; then
        echo "Provisioning API is not reachable, status code: $response_code"
        cat response.txt
        sleep ${retry_interval}
      else
        echo "The Provisioning API is reachable"
        exit 0
      fi
    done

    echo "Permanent error ocurred. Exiting."
    exit 1
---
# Source: nubus/charts/nubusStackDataUms/templates/configmap-data.yaml
apiVersion: v1
data:
  00-umc-init.yaml: |-
    # Source: data-files/default-v2/00-umc-init.yaml
    # SPDX-License-Identifier: AGPL-3.0-only
    # SPDX-FileCopyrightText: 2023 Univention GmbH

    # Source: https://git.knut.univention.de/univention/ucs/-/blob/5.0-4/base/univention-lib/shell/umc.sh#L85
    # "umc_init" is called from many join scripts
    ---
    action: create
    module: container/cn
    position: cn=univention,{{ ldapBaseDn }}
    properties:
      name: UMC
    ---
    action: create
    module: container/cn
    position: cn=policies,{{ ldapBaseDn }}
    properties:
      name: UMC
      policyPath: true
    ---
    action: create
    module: container/cn
    position: cn=UMC,cn=univention,{{ ldapBaseDn }}
    properties:
      name: operations

    ---
    action: create
    module: policies/umc
    position: cn=UMC,cn=policies,{{ ldapBaseDn }}
    properties:
      name: default-umc-all
    ---
    action: ensure_list_contains
    module: groups/group
    position: cn=Domain Admins,cn=groups,{{ ldapBaseDn }}
    policies:
      policies/umc:
        - "cn=default-umc-all,cn=UMC,cn=policies,{{ ldapBaseDn }}"
    ---
    action: create
    module: policies/umc
    position: cn=UMC,cn=policies,{{ ldapBaseDn }}
    properties:
      name: default-umc-users
    ---
    action: ensure_list_contains
    module: groups/group
    position: cn=Domain Users,cn=groups,{{ ldapBaseDn }}
    policies:
      policies/umc:
        - "cn=default-umc-users,cn=UMC,cn=policies,{{ ldapBaseDn }}"
  09-set-mail-domain.yaml: |-
    # Source: data-files/default/09-set-mail-domain.yaml
    # SPDX-License-Identifier: AGPL-3.0-only
    # SPDX-FileCopyrightText: 2023 Univention GmbH



    ---
    # TODO: move this back to stack-data-swp after solving
    # https://git.knut.univention.de/univention/customers/dataport/team-souvap/-/issues/286
    action: create
    module: mail/domain
    position: cn=domain,cn=mail,dc=swp-ldap,dc=internal
    properties:
      name: opendesk.apps.digilab.network
  10-ldap-server.yaml: |-
    # Source: data-files/default/10-ldap-server.yaml
    # SPDX-License-Identifier: AGPL-3.0-only
    # SPDX-FileCopyrightText: 2023 Univention GmbH



    ---
    # See: https://git.knut.univention.de/univention/ucs/-/blob/5.0-3/management/univention-ldap/10univention-ldap-server.inst#L254
    action: "create"
    module: "users/user"
    position: "cn=users,dc=swp-ldap,dc=internal"
    properties:
      username: "Administrator"
      lastname: "Administrator"

      # TODO: Workaround. We configure currently "firstname" and
      # "mailPrimaryAddress" as required via UCR settings.
      # See: https://git.knut.univention.de/univention/customers/dataport/team-souvap/-/issues/286
      firstname: "Admin"
      mailPrimaryAddress: "administrator@opendesk.apps.digilab.network"
      password: "d9f55507b96f479dbdbef0937396e436bb93169f"
      primaryGroup: "cn=Domain Admins,cn=groups,dc=swp-ldap,dc=internal"
      guardianRoles:
        - "guardian:builtin:super-admin"

    ---
    # See: https://git.knut.univention.de/univention/ucs/-/blob/5.0-3/management/univention-ldap/10univention-ldap-server.inst#L265
    action: ensure_list_contains
    module: groups/group
    position: cn=Domain Users,cn=groups,dc=swp-ldap,dc=internal
    properties:
      users:
        - "uid=Administrator,cn=users,dc=swp-ldap,dc=internal"
  35-management-console-module-udm.yaml: |-
    # Source: data-files/default/35-management-console-module-udm.yaml
    # SPDX-License-Identifier: AGPL-3.0-only
    # SPDX-FileCopyrightText: 2023 Univention GmbH



    # Source: https://git.knut.univention.de/univention/ucs/-/blob/5.0-4/management/univention-management-console-module-udm/35univention-management-console-module-udm.inst
    ---
    action: create
    module: settings/umc_operationset
    position: "cn=operations,cn=UMC,cn=univention,dc=swp-ldap,dc=internal"
    properties:
      name: "udm-all"
      description: "UDM - All operations"
      flavor: ""
      hosts: []
      objectFlag: []
      operation:
        - command: "udm/*"
          option: ""
    ---
    action: create
    module: settings/umc_operationset
    position: "cn=operations,cn=UMC,cn=univention,dc=swp-ldap,dc=internal"
    properties:
      name: "udm-users"
      description: "UDM - Users"
      flavor: "users/user"
      hosts: []
      objectFlag: []
      operation:
        - command: "udm/*"
          option: "objectType=users/user"
        - command: "udm/*"
          option: "!objectType"
        - command: "udm/query"
          option: "objectType=groups/group"
        - command: "udm/properties"
          option: "objectType=groups/group"
        - command: "udm/values"
          option: "objectType=groups/group"
        - command: "udm/properties"
          option: "objectType=policies/*"
        - command: "udm/layout"
          option: "objectType=policies/*"
        - command: "udm/query"
          option: "objectType=policies/*"
    ---
    action: create
    module: settings/umc_operationset
    position: "cn=operations,cn=UMC,cn=univention,dc=swp-ldap,dc=internal"
    properties:
      name: "udm-groups"
      description: "UDM - Groups"
      flavor: "groups/group"
      hosts: []
      objectFlag: []
      operation:
        - command: "udm/*"
          option: "objectType=groups/group"
        - command: "udm/*"
          option: "!objectType"
        - command: "udm/query"
          option: "objectType=users/user"
        - command: "udm/properties"
          option: "objectType=users/user"
        - command: "udm/values"
          option: "objectType=users/user"
        - command: "udm/query"
          option: "objectType=computers/*"
        - command: "udm/properties"
          option: "objectType=computers/*"
        - command: "udm/values"
          option: "objectType=computers/*"
        - command: "udm/properties"
          option: "objectType=policies/*"
        - command: "udm/layout"
          option: "objectType=policies/*"
        - command: "udm/query"
          option: "objectType=policies/*"
    ---
    action: create
    module: settings/umc_operationset
    position: "cn=operations,cn=UMC,cn=univention,dc=swp-ldap,dc=internal"
    properties:
      name: "udm-policies"
      description: "UDM - Policies"
      flavor: "policies/policy"
      hosts: []
      objectFlag: []
      operation:
        - command: "udm/*"
          option: "objectType=policies/*"
        - command: "udm/*"
          option: "!objectType"
        - command: "udm/properties"
          option: "objectType=policies/*"
        - command: "udm/layout"
          option: "objectType=policies/*"
        - command: "udm/query"
          option: "objectType=policies/*"
    ---
    action: create
    module: settings/umc_operationset
    position: "cn=operations,cn=UMC,cn=univention,dc=swp-ldap,dc=internal"
    properties:
      name: "udm-navigation"
      description: "UDM - Navigation"
      flavor: "navigation"
      hosts: []
      objectFlag: []
      operation:
        - command: "udm/nav/*"
          option: ""
    ---
    action: create
    module: settings/umc_operationset
    position: "cn=operations,cn=UMC,cn=univention,dc=swp-ldap,dc=internal"
    properties:
      name: "udm-portal"
      description: "UDM - Portal settings"
      flavor: "settings/portal_all"
      hosts: []
      objectFlag: []
      operation:
        - command: "udm/*"
          option: "objectType=settings/portal*"
        - command: "udm/types"
          option: ""
        - command: "udm/get"
          option: ""
        - command: "udm/put"
          option: ""
        - command: "udm/properties"
          option: ""
        - command: "udm/values"
          option: ""
    ---
    action: create
    module: settings/umc_operationset
    position: "cn=operations,cn=UMC,cn=univention,dc=swp-ldap,dc=internal"
    properties:
      name: "udm-syntax"
      description: "UDM - Syntax"
      flavor: ""
      hosts: []
      objectFlag: []
      operation:
        - command: "udm/syntax/choices/info"
          option: ""
        - command: "udm/syntax/choices"
          option: ""
    ---
    action: create
    module: settings/umc_operationset
    position: "cn=operations,cn=UMC,cn=univention,dc=swp-ldap,dc=internal"
    properties:
      name: "udm-validate"
      description: "UDM - Validate"
      flavor: ""
      hosts: []
      objectFlag: []
      operation:
        - command: "udm/validate"
          option: ""
    ---
    action: create
    module: settings/umc_operationset
    position: "cn=operations,cn=UMC,cn=univention,dc=swp-ldap,dc=internal"
    properties:
      name: "udm-reports"
      description: "UDM - Reports"
      flavor: ""
      hosts: []
      objectFlag: []
      operation:
        - command: "udm/reports/query"
          option: ""
        - command: "udm/reports/create"
          option: ""
        - command: "udm/reports/get"
          option: ""
    ---
    action: create
    module: settings/umc_operationset
    position: "cn=operations,cn=UMC,cn=univention,dc=swp-ldap,dc=internal"
    properties:
      name: "udm-usertemplates"
      description: "UDM - Apply User Templates"
      flavor: "settings/usertemplate"
      hosts: []
      objectFlag: []
      operation:
        - command: "udm/get"
          option: ""

    ---
    action: ensure_list_contains
    module: policies/umc
    position: "cn=default-umc-all,cn=UMC,cn=policies,dc=swp-ldap,dc=internal"
    properties:
      allow:
        - "cn=udm-all,cn=operations,cn=UMC,cn=univention,dc=swp-ldap,dc=internal"
    ---
    action: create
    module: policies/umc
    position: cn=UMC,cn=policies,dc=swp-ldap,dc=internal
    properties:
      name: default-udm-self
    ---
    action: ensure_list_contains
    module: policies/umc
    position: "cn=default-udm-self,cn=UMC,cn=policies,dc=swp-ldap,dc=internal"
    properties:
      allow:
        - "cn=udm-self,cn=operations,cn=UMC,cn=univention,dc=swp-ldap,dc=internal"
  40-self-service.yaml: |-
    # Source: data-files/default/40-self-service.yaml
    # SPDX-License-Identifier: AGPL-3.0-only
    # SPDX-FileCopyrightText: 2023 Univention GmbH



    ---
    # Source: ucs/management/univention-self-service/34univention-self-service.inst
    action: "create"
    module: "policies/umc"
    position: "cn=UMC,cn=policies,dc=swp-ldap,dc=internal"
    properties:
      name: "selfservice-umc-servers"
      ldapFilter: "(|(objectClass=univentionMemberserver)(objectClass=univentionDomainController))"
    ---
    action: "ensure_list_contains"
    module: "policies/umc"
    position: "cn=selfservice-umc-servers,cn=UMC,cn=policies,dc=swp-ldap,dc=internal"
    properties:
      allow:
        - "allow=cn=passwordchange-all,cn=operations,cn=UMC,cn=univention,dc=swp-ldap,dc=internal"

    # TODO: Check if we need this in the container stack (if so, add the missing
    # schema aspects), otherwise remove.
    # ---
    # action: "modify"
    # module: "container/cn"
    # position: "cn=dc,cn=computers,dc=swp-ldap,dc=internal"
    # properties:
    #   policy-reference: "cn=selfservice-umc-servers,cn=UMC,cn=policies,dc=swp-ldap,dc=internal"
    # ---
    # action: "modify"
    # module: "policies/umc"
    # position: "cn=memberserver,cn=computers,dc=swp-ldap,dc=internal"
    # properties:
    #   policy-reference: "cn=selfservice-umc-servers,cn=UMC,cn=policies,dc=swp-ldap,dc=internal"

    ---
    # Source: ucs/management/univention-self-service/35univention-self-service-passwordreset-umc.inst
    action: "create"
    module: "settings/extended_attribute"
    position: "cn=custom attributes,cn=univention,dc=swp-ldap,dc=internal"
    properties:
      name: "UniventionPasswordSelfServiceEmail"
      CLIName: "PasswordRecoveryEmail"
      module: ["users/user"]
      syntax: "emailAddress"
      default: ""
      ldapMapping: "univentionPasswordSelfServiceEmail"
      objectClass: "univentionPasswordSelfService"
      shortDescription: "Password recovery e-mail address"
      longDescription: "During the password recovery process an e-mail is sent to the specified e-mail address. Password recovery via e-mail is only available for users if configured and enabled by the administrator."
      translationShortDescription:
        de_DE: "E-Mail-Adresse zur Passwort-Wiederherstellung"
        fr_FR: "Adresse e-mail pour la réinitialisation du mot de passe"
      translationLongDescription:
        de_DE: "An diese E-Mail-Adresse wird während der Passwort-Wiederherstellung eine Mail verschickt. Der Mail-Versand steht dem Benutzer nur zur Verfügung, wenn dieser vom Administrator eingerichtet und freigeschaltet wurde."
        fr_FR: "Lors de la réinitialisation du mot de passe, un e-mail est envoyé à l’adresse spécifiée. La réinitialisation du mot de passe par e-mail est disponible pour les utilisateurs et utilisatrices uniquement si elle a été activée et configurée par l’administrateur ou l’administratrice."
      tabAdvanced: False
      tabName: "Password recovery"
      translationTabName:
        de_DE: "Passwort-Wiederherstellung"
        fr_FR: "Réinitialisation du mot de passe"
      multivalue: False
      valueRequired: False
      mayChange: True
      doNotSearch: False
      deleteObjectClass: False
      overwriteTab: False
      fullWidth: True
    ---
    action: "create"
    module: "settings/extended_attribute"
    position: "cn=custom attributes,cn=univention,dc=swp-ldap,dc=internal"
    properties:
      name: "UniventionPasswordSelfServiceMobile"
      CLIName: "PasswordRecoveryMobile"
      module: ["users/user"]
      syntax: "phone"
      default: ""
      objectClass: "univentionPasswordSelfService"
      ldapMapping: "univentionPasswordSelfServiceMobile"
      shortDescription: "Mobile phone number"
      translationShortDescription:
        de_DE: "Mobilfunknummer"
        fr_FR: "Numéro de téléphone portable"
      longDescription: "During the password recovery process a SMS is sent to the specified mobile phone number. Password recovery via SMS is only available for users if configured and enabled by the administrator."
      translationLongDescription:
        de_DE: "An diese Mobilfunknummer wird während der Passwort-Wiederherstellung eine SMS verschickt. Der SMS-Versand steht dem Benutzer nur zur Verfügung, wenn dieser vom Administrator eingerichtet und freigeschaltet wurde."
        fr_FR: "Lors de la réinitialisation du mot de passe, un SMS est envoyé au numéro de portable spécifié. La réinitialisation du mot de passe par SMS est disponible pour les utilisateurs et utilisatrices uniquement si elle a été activée et configurée par l’administrateur ou l’administratrice."
      tabAdvanced: False
      tabName: "Password recovery"
      translationTabName:
        de_DE: "Passwort-Wiederherstellung"
        fr_FR: "Réinitialisation du mot de passe"
      multivalue: False
      valueRequired: False
      mayChange: True
      doNotSearch: False
      deleteObjectClass: False
      overwriteTab: False
      fullWidth: True
    ---
    action: "create"
    module: "settings/extended_attribute"
    position: "cn=custom attributes,cn=univention,dc=swp-ldap,dc=internal"
    properties:
      name: "UniventionPasswordRecoveryEmailVerified"
      CLIName: "PasswordRecoveryEmailVerified"
      module: ["users/user"]
      syntax: "TrueFalseUpper"
      objectClass: "univentionPasswordSelfService"
      ldapMapping: "univentionPasswordRecoveryEmailVerified"
      shortDescription: "Email address verified"
      translationShortDescription:
        de_DE: "E-Mail-Adresse verifiziert"
        fr_FR: "Adresse e-mail vérifiée"
      longDescription: "This attribute indicates whether an email address is verified or not. The value is set to False both by default and in case PasswordRecoveryMail is changed. When an email address is verified the value will be set to True. "
      translationLongDescription:
        de_DE: "Dieses Attribut zeigt an, ob eine E-Mail-Adresse bereits verifiziert ist oder nicht. Anfänglich und bei Änderung der PasswordRecoveryMail ist der Wert auf False gesetzt. Wenn es zur Verifikation einer E-Mail-Adresse kommt, wird der Wert auf True gesetzt."
        fr_FR: "Cet attribut indique si une adresse e-mail a déjà été vérifiée ou non. La valeur est réglée sur False par défaut et lorsque PasswordRecoveryMail est modifié. Lorsque’une adresse e-mail a été vérifiée, la valeur est réglée sur True."
      tabAdvanced: False
      tabName: "Password recovery"
      translationTabName:
        de_DE: "Passwort-Wiederherstellung"
        fr_FR: "Réinitialisation du mot de passe"
      multivalue: False
      valueRequired: False
      mayChange: True
      doNotSearch: False
      deleteObjectClass: False
      overwriteTab: False
      fullWidth: True
    ---
    action: "create"
    module: "settings/extended_attribute"
    position: "cn=custom attributes,cn=univention,dc=swp-ldap,dc=internal"
    properties:
      name: "UniventionRegisteredThroughSelfService"
      CLIName: "RegisteredThroughSelfService"
      module: ["users/user"]
      syntax: "TrueFalseUpper"
      objectClass: "univentionPasswordSelfService"
      ldapMapping: "univentionRegisteredThroughSelfService"
      shortDescription: "Self-registration"
      translationShortDescription:
        de_DE: "Selbstregistrierung"
        fr_FR: "Auto-inscription"
      longDescription: "This attribute indicates whether a user has self-registered through the Self Service module."
      translationLongDescription:
        de_DE: "Dieses Attribut zeigt an, ob sich ein User selbst über das Self-Service-Modul registriert hat."
        fr_FR: "Cet attribut indique si un utilisateur ou une utilisatrice a utilisé le module de libre-service pour s’inscrire par ses propres moyens."
      tabAdvanced: False
      tabName: "Password recovery"
      translationTabName:
        de_DE: "Passwort-Wiederherstellung"
        fr_FR: "Réinitialisation du mot de passe"
      multivalue: False
      valueRequired: False
      mayChange: True
      doNotSearch: False
      deleteObjectClass: False
      overwriteTab: False
      fullWidth: True
    ---
    action: "create"
    module: "settings/extended_attribute"
    position: "cn=custom attributes,cn=univention,dc=swp-ldap,dc=internal"
    properties:
      name: "UniventionDeregisteredThroughSelfService"
      CLIName: "DeregisteredThroughSelfService"
      module: ["users/user"]
      syntax: "TrueFalseUpper"
      objectClass: "univentionPasswordSelfService"
      ldapMapping: "univentionDeregisteredThroughSelfService"
      shortDescription: "Self-deregistration"
      translationShortDescription:
        de_DE: "Selbst-Deregistrierung"
        fr_FR: "Auto-désinscription"
      longDescription: "This attribute indicates whether a user has requested to deregister his account."
      translationLongDescription:
        de_DE: "Dieses Attribut zeigt an, ob sich ein User selbst über das Self-Service-Modul deregistriert hat."
        fr_FR: "Cet attribut indique si un utilisateur ou une utilisatrice a demandé sa désinscription."
      tabAdvanced: False
      tabName: "Password recovery"
      translationTabName:
        de_DE: "Passwort-Wiederherstellung"
        fr_FR: "Réinitialisation du mot de passe"
      multivalue: False
      valueRequired: False
      mayChange: True
      doNotSearch: False
      deleteObjectClass: False
      overwriteTab: False
      fullWidth: True
    ---
    action: "create"
    module: "settings/extended_attribute"
    position: "cn=custom attributes,cn=univention,dc=swp-ldap,dc=internal"
    properties:
      name: "UniventionDeregistrationTimestamp"
      CLIName: "DeregistrationTimestamp"
      module: ["users/user"]
      syntax: "string"
      objectClass: "univentionPasswordSelfService"
      ldapMapping: "univentionDeregistrationTimestamp"
      shortDescription: "Deregistration timestamp"
      translationShortDescription:
        de_DE: "Deregistrierungs-Timestamp"
        fr_FR: "Horodatage de la désinscription"
      longDescription: "Timestamp of the moment the user requested deregistration of his account"
      translationLongDescription:
        de_DE: "Zeitstempel des Zeitpunkts, zu dem der Benutzer die Abmeldung seines Kontos beantragt hat."
        fr_FR: "Horodatage de l’instant auquel l’utilisateur ou l’utilisatrice a demandé sa désinscription."
      tabAdvanced: False
      tabName: "Password recovery"
      translationTabName:
        de_DE: "Passwort-Wiederherstellung"
        fr_FR: "Réinitialisation du mot de passe"
      multivalue: False
      valueRequired: False
      mayChange: True
      doNotSearch: False
      deleteObjectClass: False
      overwriteTab: False
      fullWidth: True
    ---
    action: "create"
    module: "settings/usertemplate"
    position: "cn=templates,cn=univention,dc=swp-ldap,dc=internal"
    properties:
      name: "selfserviceregistrationtemplate"
      displayName: "<firstname> <lastname><:strip>"
      unixhome: "/home/<username>"
      primaryGroup: "cn=Domain Users,cn=groups,dc=swp-ldap,dc=internal"
      shell: "/bin/bash"
    ---
    action: "create"
    module: "container/cn"
    position: "dc=swp-ldap,dc=internal"
    properties:
      name: "self registered users"
    ---
    action: "create"
    module: "settings/umc_operationset"
    position: "cn=operations,cn=UMC,cn=univention,dc=swp-ldap,dc=internal"
    properties:
      name: "passwordreset-all"
      description: "Password reset service"
      flavor: ""
      hosts: []
      objectFlag: []
      operation:
        - command: "passwordreset/*"
          option: ""
    ---
    action: "ensure_list_contains"
    module: "policies/umc"
    position: "cn=selfservice-umc-servers,cn=UMC,cn=policies,dc=swp-ldap,dc=internal"
    properties:
      allow:
        - "allow=cn=passwordreset-all,cn=operations,cn=UMC,cn=univention,dc=swp-ldap,dc=internal"

    ...
  41-selfservice-portal.yaml: |-
    # Source: data-files/default/41-selfservice-portal.yaml
    # SPDX-License-Identifier: AGPL-3.0-only
    # SPDX-FileCopyrightText: 2023 Univention GmbH




    ---
    action: "create"
    module: "portals/entry"
    position: "cn=entry,cn=portals,cn=univention,dc=swp-ldap,dc=internal"
    properties:
      name: "self-service-my-profile"
      icon: "PHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHZpZXdCb3g9IjAgMCAxNTAgMTUwIj48ZGVmcz48c3R5bGU+LmF7ZmlsbDojZmZmO308L3N0eWxlPjwvZGVmcz48ZWxsaXBzZSBjbGFzcz0iYSIgY3g9Ijc0LjQ1NzQzIiBjeT0iNDguOTk1NzkiIHJ4PSIyMS4yNDEwNiIgcnk9IjIxLjUyMjk1Ii8+PHBhdGggY2xhc3M9ImEiIGQ9Ik0xMTAuMDU3MzcsNzguNDEzMjFjLTIuNjc1NjYtNi4zMTE3MS03LjI3NDc4LTExLjEzNDc3LTE1LjAwMTc3LTExLjQzN2EyNy4wMDI1MiwyNy4wMDI1MiwwLDAsMS00MS4xOTYyMi4wMDAxOEMzOC4zMjgxMiw2Ny41ODksMzUuNDUzLDg2LjYwNzczLDM1LjQ1Myw5OS4wOTA3YzAsOS4wNjk3LDUuOTIxMTUsMTQuNTIwOTMsMTQuODAyODYsMTQuNTIwOTNIOTMuMjgzNTdhMjMuNjg3NTUsMjMuNjg3NTUsMCwwLDEsMTYuNzczOC0zNS4xOTg0MloiLz48cGF0aCBjbGFzcz0iYSIgZD0iTTExMy44MzgzOCw4MS4xMDgxNWEyMC43MDk0OCwyMC43MDk0OCwwLDEsMCwyMC43MSwyMC43MDk0OEEyMC43MzI2OCwyMC43MzI2OCwwLDAsMCwxMTMuODM4MzgsODEuMTA4MTVabTAsMzguNDE5YTE3LjcwOTQ4LDE3LjcwOTQ4LDAsMSwxLDE3LjcxLTE3LjcwOTQ3QTE3LjcyOTQsMTcuNzI5NCwwLDAsMSwxMTMuODM4MzgsMTE5LjUyNzFaIi8+PHBhdGggY2xhc3M9ImEiIGQ9Ik0xMTguNzczNDQsOTMuMzM4NDRsLTEwLjQxMzMzLDEwLjQxMzMzLDMuMzYyMTIsMy40NDY5TDEyMi4xNzc5Miw5Ni43NDNhMi40MDczNSwyLjQwNzM1LDAsMCwwLTMuNDA0NDgtMy40MDQ1NFoiLz48cG9seWdvbiBjbGFzcz0iYSIgcG9pbnRzPSIxMDcuMjgzIDEwNC44MjkgMTA2LjAwNyAxMDkuNTEgMTEwLjY0NiAxMDguMjQ0IDEwNy4yOTkgMTA0LjgxMyAxMDcuMjgzIDEwNC44MjkiLz48L3N2Zz4="
      activated: True
      anonymous: False
      linkTarget: "samewindow"
      allowedGroups:
        null
      displayName:
        en_US: "My Profile"
        de_DE: "Mein Profil"
      description:
        en_US: "Manage profile"
        de_DE: "Profil verwalten"
      link:
        - - "en_US"
          - "#/selfservice/profile"
    ---
    action: "create"
    module: "portals/category"
    position: "cn=category,cn=portals,cn=univention,dc=swp-ldap,dc=internal"
    properties:
      name: "self-service-profile"
      displayName:
        en_US: "User Profile"
        de_DE: "Benutzerprofil"
      entries:
        - "cn=self-service-my-profile,cn=entry,cn=portals,cn=univention,dc=swp-ldap,dc=internal"


    ---
    action: "create"
    module: "portals/entry"
    position: "cn=entry,cn=portals,cn=univention,dc=swp-ldap,dc=internal"
    properties:
      name: "self-service-protect-account"
      icon: "PHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHZpZXdCb3g9IjAgMCAxNTAgMTUwIj48ZGVmcz48c3R5bGU+LmF7ZmlsbDojZmZmO308L3N0eWxlPjwvZGVmcz48cGF0aCBjbGFzcz0iYSIgZD0iTTEwNi4wNTk5Myw3Mi4yMjA3YTcuNjk5LDcuNjk5LDAsMCwwLTcuNTYyMTMtNy41NTUzNmMtLjg4Ny0uMDIxNTQtMS43NzUtLjAwMzE3LTIuNzc3ODMtLjAwMzE3VjYzLjc2NDFjMC0zLjA3NDc3LjAwNTA2LTYuMTQ5Ni0uMDAxLTkuMjI0NDNBMjAuNzEyODksMjAuNzEyODksMCwwLDAsNTQuNjExMiw1MC42Nzc1NWEyOC43OTU0MiwyOC43OTU0MiwwLDAsMC0uMzIzMDYsNC4xMDM1MmMtLjA0NTc3LDMuMjU4MTgtLjAxNDc3LDYuNTE3NDUtLjAxNDc3LDkuODc2NC0uNzcyNTgsMC0xLjQ5MTI3LS4wMDExNi0yLjIwOTkuMDAwMjRhNy43ODI4Miw3Ljc4MjgyLDAsMCwwLTguMTUwMTQsOC4xMjgxOHEtLjAwNywxNy42ODAyLS4wMDEyMywzNS4zNjA0MWMuMDAwMzcsNC4zMjkyMiwyLjIzODIyLDcuMTY3NjYsNi40NDI0NSw4LjE4NDIxYS43MTc2MS43MTc2MSwwLDAsMSwuMTk1MTMuMTI2MjhoNDguODk0Yy41MDYxLS4xNTk4NSwxLjAxODc0LS4zMDE3LDEuNTE3MjEtLjQ4MjU1YTcuNjM5ODMsNy42Mzk4MywwLDAsMCw1LjEwMzQ2LTcuMDk4NjlRMTA2LjEwNzYzLDkwLjU0ODE2LDEwNi4wNTk5Myw3Mi4yMjA3Wk02MS4xOTQ3LDYyLjQ4ODFjLjAwMDEyLTIuNjY5NzQtLjAxMTE3LTUuMzM5Ni4wMDI3NC04LjAwOTM0YTEzLjc5MjQxLDEzLjc5MjQxLDAsMCwxLDI3LjM3NC0yLjU5LDM0LjkyNzg0LDM0LjkyNzg0LDAsMCwxLC4yMTgzOCw0Ljc1NjljLjAzMjQxLDIuNjM3NDUuMDA4ODUsNS4yNzU1Ny4wMDg4NSw3Ljk2OEg2MS4xOTQ2NEM2MS4xOTQ2NCw2My44NzcyLDYxLjE5NDY0LDYzLjE4MjYyLDYxLjE5NDcsNjIuNDg4MVpNODkuMDI5OSw5Ni4zNzlhNS4wMTI4Miw1LjAxMjgyLDAsMCwxLTQuNTk2LDMuNTMyMjJxLS4yNDU4MS4wMTg4Ny0uNDgzNTIuMDE4OGE1LjEzMTUyLDUuMTMxNTIsMCwwLDEtNC40MTQ1NS0yLjQ0NjIzLDcuMzQxNjMsNy4zNDE2MywwLDAsMS00LjUwNjgzLDEuNTMwNTgsNy40MzgxOCw3LjQzODE4LDAsMSwxLDMuODE5NjQtMTMuODAxMDgsMS44ODE2NCwxLjg4MTY0LDAsMCwxLDEuNjk2NTktMS4wODAzOSwxLjkzMTUzLDEuOTMxNTMsMCwwLDEsLjE5NDk1LjAwOTg5LDEuODk0ODMsMS44OTQ4MywwLDAsMSwxLjY5MjYzLDEuODkyN3EuMDA2NTksMS41NTY0OS4wMDI4NiwzLjExM2wtLjAwMDU0LDEuMzcwNzNMODIuNDM0LDkxLjcxNzE2Yy0uMDAxNTIuOTc3NDgtLjAwMzExLDEuOTU1LjAwNiwyLjkzMjI1YTEuNTQxNzIsMS41NDE3MiwwLDAsMCwxLjA0MDgzLDEuNDIzMSwxLjY1NTQ3LDEuNjU1NDcsMCwwLDAsLjU1MjMxLjA5NjE5LDEuNDgzNTIsMS40ODM1MiwwLDAsMCwxLjE2NS0uNTUyMzcsMS42MTI0OCwxLjYxMjQ4LDAsMCwwLC4yODIyOS0uNTEzMjQsMTAuNzc2MTEsMTAuNzc2MTEsMCwwLDAtMS45Mjg1My0xMC41MjI3MSwxMC41NjIwOSwxMC41NjIwOSwwLDAsMC04LjU3OTQtNC4wNjc1cS0uMjU0NywwLS41MTI5NC4wMDk1OGExMS4wNjQyOCwxMS4wNjQyOCwwLDAsMC0xLjQyMDUzLDIxLjkzODQ4LDExLjUyMjE5LDExLjUyMjE5LDAsMCwwLDIuMDIyNy4xODMyOSwxMS4wMTcyNywxMS4wMTcyNywwLDAsMCw1LjU0NTU5LTEuNTMxLDIuMjI2LDIuMjI2LDAsMCwxLDEuMTAyNTQtLjMwOTU3LDEuODIxMjQsMS44MjEyNCwwLDAsMSwxLjYwODI4Ljk1ODYyLDEuODcsMS44NywwLDAsMS0uNzMxLDIuNTY2NTMsMTQuMjU1MzQsMTQuMjU1MzQsMCwwLDEtNC4zMTM0MSwxLjcyNjEzLDE1LjMxODg2LDE1LjMxODg2LDAsMCwxLTMuMjQ2MjIuMzUxLDE0Ljg0MjY4LDE0Ljg0MjY4LDAsMCwxLTE0LjU0MzQ2LTExLjc0LDE0Ljg2NDU5LDE0Ljg2NDU5LDAsMCwxLDExLjI5MDI5LTE3LjY3NTksMTQuODI2NzIsMTQuODI2NzIsMCwwLDEsMTcuODAyMTgsMTEuNzc3QTE0LjMyNTUsMTQuMzI1NSwwLDAsMSw4OS4wMjk5LDk2LjM3OVoiLz48cGF0aCBjbGFzcz0iYSIgZD0iTTc1LjAxOTUzLDg3LjkxMDc3YTMuNjYzNzYsMy42NjM3NiwwLDEsMC0uMDIyMjgsNy4zMjc0NWwuMDA0ODguMjQ5NTcuMDA0ODgtLjAwMDQ5di0uMjQ5MDhhMy42NzM0OSwzLjY3MzQ5LDAsMCwwLDMuNjUyMjMtMy42NDkxN0EzLjY2NTgzLDMuNjY1ODMsMCwwLDAsNzUuMDE5NTMsODcuOTEwNzdaIi8+PC9zdmc+"
      activated: True
      anonymous: False
      linkTarget: "samewindow"
      allowedGroups:
        null
      displayName:
        en_US: "Protect your account"
        de_DE: "Kontozugang schützen"
      description:
        en_US: "Protect your account"
        de_DE: "Kontozugang schützen"
      link:
        - - "en_US"
          - '#/selfservice/protectaccount'
    ---
    action: "create"
    module: "portals/entry"
    position: "cn=entry,cn=portals,cn=univention,dc=swp-ldap,dc=internal"
    properties:
      name: "self-service-password-forgotten"
      icon: "PHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHZpZXdCb3g9IjAgMCAxNTAgMTUwIj48ZGVmcz48c3R5bGU+LmF7ZmlsbDojZmZmO308L3N0eWxlPjwvZGVmcz48cGF0aCBjbGFzcz0iYSIgZD0iTTExOS4yMjg5MSw3NC40OTg1NWgtNy4xNDAyQTQxLjcxNjg4LDQxLjcxNjg4LDAsMCwwLDcyLjc4NzMyLDMzLjQwODM0YTMuMDI1NDksMy4wMjU0OSwwLDAsMC0uNTQ2NjktLjA3OTY1Yy0uMzEwMTktLjAxMzc5LS42MTIxMy4wMTI2NC0uOTIxLjAwNTc0LS4zMDc2MS0uMDA2NzgtLjYwNjkzLS4wNDYwOC0uOTE2MDctLjA0NjA4LS40Mjk0NSwwLS44NTIwNS4wNDY4MS0xLjI3OTc5LjA1OTg3LS42Mzc1MS4wMTkwNS0xLjI3MjU4LjA0MTA4LTEuOTAzMDcuMDg4ODctLjcxNzcyLjA1NDQ0LTEuNDI4LjE0MDI2LTIuMTM4NjguMjMxMTQtLjYyNC4wOC0xLjI0NzkyLjE1NTQ2LTEuODYzNTguMjYzMDYtLjc0Mjg2LjEyOTIxLTEuNDc0MTguMjk3MTItMi4yMDY3My40NjU4OC0uNTUxMTUuMTI3NzUtMS4xMDUyOC4yNDMtMS42NDgxOS4zOTI1OC0uODM1NTcuMjI4NzYtMS42NTQxOC41MDQ3Ni0yLjQ3MjQxLjc4NDc5LS40MTMzMy4xNDIzNC0uODMzNjIuMjY2NDgtMS4yNDExNS40MjEyNy0uOTkwNzMuMzc0NDUtMS45NTg1Ni44MDI5MS0yLjkxODE1LDEuMjUyNDQtLjIxNjYyLjEwMTgtLjQ0MS4xODc4Ni0uNjU1NjQuMjkzMzNhNDEuNjg2ODIsNDEuNjg2ODIsMCwwLDAtMTAuMDQxNjMsNi44Nzg2Yy0uMDUxODguMDQ4LS4wNzEuMTE0MzItLjExODc3LjE2NTFBNDEuNTY2LDQxLjU2NiwwLDAsMCwyOC43MzAxOSw3My4xNjI4NmMtLjAyMDM5LjQ2NC4wMTE4NC45MjEuMDA2NTMsMS4zODMxOGEyLjk5OTUyLDIuOTk5NTIsMCwwLDAtLjA0NTg0LjQ1NGMwLC4zNTE5My4wNDQxMy42OTI4MS4wNTI4NiwxLjA0MjcyLjAxODkyLjc5OC4wNTY4OCwxLjU5MTI1LjEyMDYsMi4zODE3OC4wNDY4Mi41NzI1MS4xMDU4NCwxLjE0LjE3NTY2LDEuNzA1ODdxLjE1NDE5LDEuMjY0LjM4NCwyLjUwOWMuMDkxMy40OTEuMTg5MzMuOTc4LjI5Nzg1LDEuNDYyODlxLjI5NTgsMS4zMzE5MS42NzkzMiwyLjYzNmMuMTIwNzMuNDEwNjQuMjQ0ODcuODE4NDguMzc3ODEsMS4yMjM4MnEuNDQ2NCwxLjM2NjYuOTg4NywyLjY5NjE2Yy4xNDMuMzUxNjkuMjg4MDkuNzAxLjQ0MDM3LDEuMDQ3ODVxLjU4ODc4LDEuMzQzLDEuMjc0NiwyLjY0MTg1Yy4xNzMyOC4zMjk0Ny4zNDkxMi42NTYuNTMxLjk4MDE2cS43MDQ1OCwxLjI1NTc0LDEuNDk4NTMsMi40NjQxOC4zMzEzNC41MDU0Ni42NzYxNS45OTk2OS43OTM0LDEuMTM2MjcsMS42NjUsMi4yMjVjLjI3NTM5LjM0Mzc1LjU1NjM5LjY4MDI5Ljg0MjIyLDEuMDE1MDcuMzE5NzYuMzc0NDUuNjA3MTguNzY5MjkuOTQxMjgsMS4xMzQyOGEzLjAyNjE2LDMuMDI2MTYsMCwwLDAsLjQ1NjM2LjQwMzA4LDQxLjYxNTc5LDQxLjYxNTc5LDAsMCwwLDU5LjgwNDQ1LjkyNTU5LDMuMDIwODksMy4wMjA4OSwwLDEsMC00LjI3MjIyLTQuMjcyMTVBMzUuNjEzMzEsMzUuNjEzMzEsMCwwLDEsNDMuMjg0Miw5OC4xMTEyOWMtLjI0MTg4LS4yODM1MS0uNDgwMjgtLjU2OTEtLjcxMjQ2LS44NTg3MXEtLjc0NjE2LS45MzExOC0xLjQzMDQ4LTEuOTExNzQtLjI5MjIzLS40MTktLjU3MTQxLS44NDQ3OS0uNjc4MjMtMS4wMzQyNy0xLjI4Njg3LTIuMTE1NzhjLS4xNTQ0OC0uMjc1NTItLjMwMzgzLS41NTMxLS40NTA2Mi0uODMyMTZxLS41ODQtMS4xMDk5LTEuMDkxOTItMi4yNjM0MmMtLjEyOTctLjI5NTc4LS4yNTM4NC0uNTkzNjMtLjM3NTMtLjg5Mjc3cS0uNDYxNy0xLjEzNDc5LS44NDYtMi4zMDcxOS0uMTcwMzgtLjUyMTg1LS4zMjM4NS0xLjA0OTA3LS4zMjUzOC0xLjEwNzUxLS41Nzg1LTIuMjQ0NTctLjE0MDM0LS42MzExNS0uMjU4LTEuMjY3ODhjLS4xMzAwNy0uNzAwMjUtLjIzNjI3LTEuNDA4MzItLjMyNDc3LTIuMTIyMDctLjA2MDYxLS40OTUxOC0uMTEzMzQtLjk5MTU4LS4xNTMzMi0xLjQ5MS0uMDUzNTktLjY1OC0uMDgzNjgtMS4zMjIzOC0uMTAwNzctMS45ODk4Ni0uMDIwMi0uODI4NS0uMDQ4MjItMS42NTYwNy0uMDExMjMtMi40OTE4OUEzNS43MjEyLDM1LjcyMTIsMCwwLDEsNTcuOTAxODIsNDEuNjA3Yy4xNjYtLjA2MjA3LjMzNjQ5LS4xMTEyLjUwMzQyLS4xNzA4NC44NzUzLS4zMTQ0NSwxLjc2MzEyLS42MDE1LDIuNjY3NDItLjg0Nzc3LjMzMy0uMDkwMDkuNjcxODEtLjE1OTU1LDEuMDA3NjktLjIzOTkzLjc1MDYxLS4xODEwOSwxLjUwNi0uMzQ4NjQsMi4yNzMyNS0uNDgxMi40NDE1OS0uMDc1NTcuODg3OTQtLjEyOTIyLDEuMzMzMzEtLjE4ODE4LjY4MTgzLS4wOTEyNCwxLjM2NjQtLjE3MjI0LDIuMDU4OS0uMjI0MTIuNDk3ODctLjAzNjg2Ljk5OS0uMDUzODMsMS41LS4wNzAwNy42NDc4OS0uMDIxMTcsMS4yOTgzNC0uMDI4MzgsMS45NTM2OC0uMDE0MTZhMzUuNjc4MywzNS42NzgzLDAsMCwxLDM0Ljg0Njg2LDM1LjEyNzg3SDk4Ljk1NzU0Yy0yLjIxNTUxLDAtMi43NDY0NiwxLjI4MTgtMS4xNzk4MSwyLjg0ODM5bDguNDY3MTEsOC40NjcxYTQuMDQwMDgsNC4wNDAwOCwwLDAsMCw1LjY5Njg0LDBsOC40NjcxNi04LjQ2NzFDMTIxLjk3NTM3LDc1Ljc4MDM1LDEyMS40NDQ1NCw3NC40OTg1NSwxMTkuMjI4OTEsNzQuNDk4NTVaIi8+PHBhdGggY2xhc3M9ImEiIGQ9Ik01Ny4wMjQ2Miw3My4wMjMyN3EtLjAwMyw3LjY4OTMzLS4wMDA1NSwxNS4zNzg3M0EzLjM3NDkyLDMuMzc0OTIsMCwwLDAsNTkuODI2LDkxLjk2MTM4YS4zMTI3Ni4zMTI3NiwwLDAsMSwuMDg0ODQuMDU0OTNIODEuMTc1NTZjLjIyMDA5LS4wNjk1MS40NDMwNi0uMTMxMjIuNjU5ODUtLjIwOTgzQTMuMzIyNzcsMy4zMjI3NywwLDAsMCw4NC4wNTUsODguNzE5MTNxLjAxODg1LTcuOTcwODUtLjAwMi0xNS45NDE3MWEzLjM0ODQ1LDMuMzQ4NDUsMCwwLDAtMy4yODg4OC0zLjI4NTk1Yy0uMzg1NzQtLjAwOTM0LS43NzE5MS0uMDAxMzQtMS4yMDgxMi0uMDAxMzR2LS4zOTA1NmMwLTEuMzM3MjguMDAyMjUtMi42NzQ1Ni0uMDAwMzctNC4wMTE4NEE5LjAwODM2LDkuMDA4MzYsMCwwLDAsNjEuNjc3MjcsNjMuNDA4YTEyLjUyODU3LDEyLjUyODU3LDAsMCwwLS4xNDA1LDEuNzg0NzNjLS4wMTk5LDEuNDE3LS4wMDY0MSwyLjgzNDUzLS4wMDY0MSw0LjI5NTM1LS4zMzYsMC0uNjQ4NTYtLjAwMDQ5LS45NjExMi4wMDAxMkEzLjM4NDksMy4zODQ5LDAsMCwwLDU3LjAyNDYyLDczLjAyMzI3Wk03MS4wMjkxNCw4Ny41MjM4OGExLjM4MzQ4LDEuMzgzNDgsMCwwLDEtLjk0OTIyLjM2NTI0LDEuNDM5MzEsMS40MzkzMSwwLDAsMS0uOTcyNjYtLjM2MDM1LDEuMjY2NzEsMS4yNjY3MSwwLDAsMS0uNDE1LTEuMDA4NzksMS4zMDA2NiwxLjMwMDY2LDAsMCwxLC40MDEzNy0uOTY3NzgsMS4zNjA0MiwxLjM2MDQyLDAsMCwxLC45ODYzMy0uMzkyNThBMS4zNDA4NCwxLjM0MDg0LDAsMCwxLDcxLjQ0MDI3LDg2LjUyLDEuMjc1NDgsMS4yNzU0OCwwLDAsMSw3MS4wMjkxNCw4Ny41MjM4OFptMy40MDkxOC04LjQ1MjYzQTQuMTYzNjIsNC4xNjM2MiwwLDAsMSw3My42OTAyNyw4MC4wOHEtLjQzMzU5LjQyNDgtMS41NTY2NCwxLjQyODcxYTYuMTM4MjUsNi4xMzgyNSwwLDAsMC0uNDk3MDcuNDk3NTUsMi4wMzQ0NSwyLjAzNDQ1LDAsMCwwLS4yNzkzLjM5MjA5LDEuOTI0NTMsMS45MjQ1MywwLDAsMC0uMTQwNjIuMzU2Yy0uMDM0MTguMTE4NjUtLjA4NC4zMjc2NC0uMTUxMzcuNjI1NDlhMS4wMTU1NCwxLjAxNTU0LDAsMCwxLTEuMDg1OTQuOTQ5MjIsMS4xMTE3MiwxLjExMTcyLDAsMCwxLS43OTg4Mi0uMzEwMDYsMS4yMjA0OCwxLjIyMDQ4LDAsMCwxLS4zMjQyMi0uOTIyMzYsMy4yMzYxMywzLjIzNjEzLDAsMCwxLC44NjcxOC0yLjMxNCwxNC40Njg2NSwxNC40Njg2NSwwLDAsMSwxLjA1OTU3LTEuMDA4M2MuMzg4NjgtLjM0MDgyLjY3MDktLjU5ODE0Ljg0Mzc1LS43NzE0OGEyLjYyMTksMi42MjE5LDAsMCwwLC40Mzg0OC0uNTc5NTksMS40MDcxLDEuNDA3MSwwLDAsMCwuMTc3NzQtLjY5Mzg1LDEuNjExMDcsMS42MTEwNywwLDAsMC0uNTQzLTEuMjMxOTMsMS45ODIyMSwxLjk4MjIxLDAsMCwwLTEuNDAxMzctLjUwMjQ1LDEuOTM4LDEuOTM4LDAsMCwwLTEuNDc4NTIuNTA2ODQsNC4wNDk0NSw0LjA0OTQ1LDAsMCwwLS44MDM3MSwxLjQ5MjE5cS0uMzA5MDgsMS4wMzItMS4xNzY3NSwxLjAzMTc0YTEuMTU4MywxLjE1ODMsMCwwLDEtLjg2MzI5LS4zNjA4NCwxLjEwMjIxLDEuMTAyMjEsMCwwLDEtLjM1MTU2LS43ODAyOCwzLjMwMzc4LDMuMzAzNzgsMCwwLDEsLjU1NzYyLTEuNzU3MzIsNC4yODY0Myw0LjI4NjQzLDAsMCwxLDEuNjI0LTEuNDc0MTIsNS4xMTg4Niw1LjExODg2LDAsMCwxLDIuNDkyMTktLjU4NCw1LjMxOTA5LDUuMzE5MDksMCwwLDEsMi4zMzY5MS40ODgyOEEzLjc5MDIxLDMuNzkwMjEsMCwwLDEsNzQuMjAxLDc1Ljg4NTdhMy4yNTg2MSwzLjI1ODYxLDAsMCwxLC41NTI3NCwxLjgyNTY4QTIuODIxODIsMi44MjE4MiwwLDAsMSw3NC40MzgzMiw3OS4wNzEyNVpNNjQuNTQwNTUsNjguNTQ0NTdjLjAwMDA2LTEuMTYxMTMtLjAwNDg4LTIuMzIyMjYuMDAxMTYtMy40ODMzM2E1Ljk5ODU0LDUuOTk4NTQsMCwwLDEsMTEuOTA1NC0xLjEyNjQ3LDE1LjE5MjQ0LDE1LjE5MjQ0LDAsMCwxLC4wOTUsMi4wNjg4NWMuMDE0MSwxLjE0Ny4wMDM4NCwyLjI5NDQzLjAwMzg0LDMuNDY1MzlINjQuNTQwNTVaIi8+PC9zdmc+"
      activated: True
      anonymous: True
      linkTarget: "samewindow"
      allowedGroups:
        null
      displayName:
        en_US: "Password forgotten"
        de_DE: "Passwort vergessen"
      description:
        en_US: "Password forgotten"
        de_DE: "Passwort vergessen"
      link:
        - - "en_US"
          - '#/selfservice/passwordforgotten'
    ---
    action: "create"
    module: "portals/category"
    position: "cn=category,cn=portals,cn=univention,dc=swp-ldap,dc=internal"
    properties:
      name: "self-service-password"
      displayName:
        en_US: "Passwords"
        de_DE: "Passwörter"
      entries:
        - "cn=self-service-protect-account,cn=entry,cn=portals,cn=univention,dc=swp-ldap,dc=internal"
        - "cn=self-service-password-forgotten,cn=entry,cn=portals,cn=univention,dc=swp-ldap,dc=internal"


    ---
    # Create the portal with the categories above
    action: "create"
    module: "portals/portal"
    position: "cn=portal,cn=portals,cn=univention,dc=swp-ldap,dc=internal"
    properties:
      name: "self-service"
      defaultLinkTarget: "samewindow"
      displayName:
        en_US: "Self Service"
        de_DE: "Self Service"
      showUmc: False
      categories:
        - "cn=self-service-profile,cn=category,cn=portals,cn=univention,dc=swp-ldap,dc=internal"
        - "cn=self-service-password,cn=category,cn=portals,cn=univention,dc=swp-ldap,dc=internal"
    ---
    action: "ensure_list_contains"
    module: "portals/portal"
    position: "cn=self-service,cn=portal,cn=portals,cn=univention,dc=swp-ldap,dc=internal"
    properties:
      userLinks:
        - "cn=self-service-protect-account,cn=entry,cn=portals,cn=univention,dc=swp-ldap,dc=internal"
        - "cn=self-service-password-forgotten,cn=entry,cn=portals,cn=univention,dc=swp-ldap,dc=internal"
        - "cn=self-service-my-profile,cn=entry,cn=portals,cn=univention,dc=swp-ldap,dc=internal"
  42-readonly-user.yaml: |-
    # Source: data-files/default-v2/42-readonly-user.yaml
    # SPDX-License-Identifier: AGPL-3.0-only
    # SPDX-FileCopyrightText: 2024 Univention GmbH

    ---
    action: create
    module: groups/group
    position: cn=groups,{{ ldapBaseDn }}
    properties:
      name: "LDAPSearch Users"

    ---
    action: create
    module: users/ldap
    position: cn=users,{{ ldapBaseDn }}
    properties:
      username: "readonly"
      lastname: "LDAP-system-User"
      password: {{ readonlyUserPassword }}
      overridePWHistory: true
      overridePWLength: true
  misc-saml.yaml: |-
    # Source: data-files/default/misc-saml.yaml
    # SPDX-License-Identifier: AGPL-3.0-only
    # SPDX-FileCopyrightText: 2023 Univention GmbH



    ---
    action: create
    module: users/ldap
    position: cn=users,dc=swp-ldap,dc=internal
    properties:
      username: sys-idp-user
      lastname: idp-user
      name: idp-user
      password: "e00aa613a1bb71985d35e4383f7f09c4bf4fd601"
    # TODO: We should make this a system user at some point.
    # lo.modify(dn, [('univentionObjectFlag', None, [b'functional', b'hidden'])])
    #
    # FIXME: Running this produces an error in `udm-rest-api`:
    #   ERROR      (       51) : RsyslogEmitter().emit() failed: /dev/log does not exist, cannot emit entry ({"username": "cn=admin", "hostname": "95ffbfbd017d", "message": {"en": "Simple authentication account {username} created", "de": "Einfaches Authentisierungskonto {username} angelegt"}, "args": {"module": "users/ldap", "username": "sys-idp-user"}, "timestamp": "2023-07-10 15:40:19", "tags": [], "context_id": "16188c61-3647-40dc-9674-d9796ed23220", "event": "UDM_USERS_LDAP_CREATED", "type": "Entry v1"})
    #   Nevertheless, the user is created.
    ########################
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/instance: ums
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: stack-data-ums
    helm.sh/chart: nubusStackDataUms-0.73.0
  name: ums-stack-data-ums-data
---
# Source: nubus/charts/nubusStackDataUms/templates/configmap-ucr.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: ums-stack-data-ums-ucr
  namespace: tn-openbsw-opendesk
  labels:
    app.kubernetes.io/name: stack-data-ums
    helm.sh/chart: nubusStackDataUms-0.73.0
    app.kubernetes.io/instance: ums
    app.kubernetes.io/managed-by: Helm
  annotations:
    argocd.argoproj.io/hook: Sync
    argocd.argoproj.io/hook-delete-policy: HookSucceeded
    intents.otterize.com/service-name: ums-stack-data-ums
data:
  base.conf: |
    ad/member: false
    apache2/autostart: yes
    apache2/documentroot: /var/www/
    apache2/force_https/exclude/http_host/localhost: localhost
    apache2/force_https/exclude/request_uri/mod-status: /server-status
    apache2/force_https/exclude/request_uri/univention-portal: /univention/get
    apache2/loglevel: info
    apache2/maxclients: 150
    apache2/startsite: univention/
    auth/methods: ldap
    directory/manager/rest/authorized-groups/dc-backup: cn=DC Backup Hosts,cn=groups,dc=swp-ldap,dc=internal
    directory/manager/rest/authorized-groups/dc-slaves: cn=DC Slave Hosts,cn=groups,dc=swp-ldap,dc=internal
    directory/manager/rest/authorized-groups/iam-api-full-access: cn=IAM API - Full Access,cn=groups,dc=swp-ldap,dc=internal
    directory/manager/rest/debug_level: 5
    directory/manager/rest/ldap-connection/user-read/start-tls: 0
    directory/manager/rest/show-tracebacks: false
    directory/manager/starttls: 0
    directory/manager/templates/alphanum/whitelist: ""
    directory/manager/user/activate_ldap_attribute_mailForwardCopyToSelf: yes
    directory/manager/user_group/uniqueness: true
    directory/manager/web/language: de_DE.UTF-8
    directory/manager/web/modules/autosearch: 1
    directory/manager/web/modules/computers/computer/add/default: computers/windows
    directory/manager/web/modules/groups/group/caching/uniqueMember/timeout: 300
    directory/manager/web/modules/groups/group/checks/circular_dependency: yes
    directory/manager/web/modules/search/advanced_on_open: false
    directory/manager/web/modules/users/user/add/default: cn=openDesk User,cn=templates,cn=univention,dc=swp-ldap,dc=internal
    directory/manager/web/modules/users/user/properties/description/syntax: TextArea
    directory/manager/web/modules/users/user/properties/firstname/required: true
    directory/manager/web/modules/users/user/properties/homePostalAddress/syntax: postalAddress
    directory/manager/web/modules/users/user/properties/mailPrimaryAddress/required: true
    directory/manager/web/modules/users/user/properties/username/syntax: uid
    directory/manager/web/modules/users/user/search/autosearch: True
    directory/manager/web/modules/users/user/wizard/property/invite/default: True
    directory/manager/web/modules/users/user/wizard/property/overridePWLength/default: False
    directory/manager/web/modules/users/user/wizard/property/overridePWLength/visible: False
    directory/manager/web/modules/users/user/wizard/property/pwdChangeNextLogin/default: True
    directory/manager/web/modules/users/user/wizard/property/pwdChangeNextLogin/visible: False
    directory/manager/web/modules/wizard/disabled: No
    directory/manager/web/modules/wizards/disabled: no
    directory/manager/web/sizelimit: 2000
    directory/reports/cleanup/age: 43200
    directory/reports/cleanup/cron: 0 0 * * *
    directory/reports/logo: /usr/share/univention-directory-reports/univention_logo.png
    directory/reports/templates/csv/computer1: computers/computer "CSV Report" /etc/univention/directory/reports/default computers.csv
    directory/reports/templates/csv/group1: groups/group "CSV Report" /etc/univention/directory/reports/default groups.csv
    directory/reports/templates/csv/user1: users/user "CSV Report" /etc/univention/directory/reports/default users.csv
    directory/reports/templates/pdf/computer1: computers/computer "PDF Document" /etc/univention/directory/reports/default computers.rml
    directory/reports/templates/pdf/group1: groups/group "PDF Document" /etc/univention/directory/reports/default groups.rml
    directory/reports/templates/pdf/user1: users/user "PDF Document" /etc/univention/directory/reports/default users.rml
    domainname: opendesk.apps.digilab.network
    groups/default/domainadmins: Domain Admins
    groups/default/printoperators: Printer-Admins
    hostname: portal
    kerberos/realm: stub_value
    ldap/acl/nestedgroups: yes
    ldap/acl/read/anonymous: no
    ldap/acl/slavepdc: yes
    ldap/acl/user/password/change: no
    ldap/attributeoptions: entry-,lang-
    ldap/autostart: yes
    ldap/base: dc=swp-ldap,dc=internal
    ldap/cachesize: 20000
    ldap/client/retry/count: 10
    ldap/database/bdb/db_config_options: set_flags
    ldap/database/bdb/set_flags: DB_LOG_AUTOREMOVE
    ldap/database/internal/checkpoint: 0 1
    ldap/database/internal/envflags: nosync
    ldap/database/mdb/maxsize: 4295000000
    ldap/database/type: mdb
    ldap/debug/level: none
    ldap/hostdn: cn=admin,dc=swp-ldap,dc=internal
    ldap/idlcachesize: 20000
    ldap/idletimeout: 360
    ldap/index/approx: cn,givenName,mail,sn,uid
    ldap/index/autorebuild: yes
    ldap/index/eq: aRecord,automountInformation,cNAMERecord,cn,description,dhcpHWAddress,displayName,entryUUID,gidNumber,givenName,homeDirectory,krb5PrincipalName,macAddress,mail,mailAlternativeAddress,mailPrimaryAddress,memberUid,objectClass,ou,pTRRecord,relativeDomainName,sambaAcctFlags,sambaDomainName,sambaGroupType,sambaPrimaryGroupSID,sambaSID,sambaSIDList,secretary,shadowExpire,sn,uid,uidNumber,uniqueMember,univentionCanonicalRecipientRewriteEnabled,univentionDataType,univentionInventoryNumber,univentionLicenseModule,univentionLicenseObject,univentionMailHomeServer,univentionNagiosHostname,univentionObjectFlag,univentionObjectType,univentionPolicyReference,univentionServerRole,univentionService,univentionShareGid,univentionShareSambaName,univentionShareWriteable,univentionUDMOptionModule,univentionUDMPropertyCLIName,univentionUDMPropertyCopyable,univentionUDMPropertyDefault,univentionUDMPropertyDeleteObjectClass,univentionUDMPropertyDoNotSearch,univentionUDMPropertyHook,univentionUDMPropertyLayoutOverwritePosition,univentionUDMPropertyLayoutOverwriteTab,univentionUDMPropertyLayoutPosition,univentionUDMPropertyLayoutTabAdvanced,univentionUDMPropertyLayoutTabName,univentionUDMPropertyLdapMapping,univentionUDMPropertyLongDescription,univentionUDMPropertyModule,univentionUDMPropertyMultivalue,univentionUDMPropertyObjectClass,univentionUDMPropertyOptions,univentionUDMPropertyShortDescription,univentionUDMPropertySyntax,univentionUDMPropertyTranslationLongDescription,univentionUDMPropertyTranslationShortDescription,univentionUDMPropertyTranslationTabName,univentionUDMPropertyValueMayChange,univentionUDMPropertyValueRequired,univentionUDMPropertyVersion,zoneName
    ldap/index/pres: aRecord,automountInformation,cn,description,dhcpHWAddress,displayName,gidNumber,givenName,homeDirectory,krb5PrincipalName,macAddress,mail,mailAlternativeAddress,mailPrimaryAddress,memberUid,name,objectClass,ou,relativeDomainName,shadowMax,sn,uid,uidNumber,uniqueMember,univentionMailHomeServer,univentionObjectFlag,univentionPolicyReference,univentionUDMPropertyCLIName,univentionUDMPropertyDefault,univentionUDMPropertyDeleteObjectClass,univentionUDMPropertyDoNotSearch,univentionUDMPropertyHook,univentionUDMPropertyLayoutOverwritePosition,univentionUDMPropertyLayoutOverwriteTab,univentionUDMPropertyLayoutPosition,univentionUDMPropertyLayoutTabAdvanced,univentionUDMPropertyLayoutTabName,univentionUDMPropertyLdapMapping,univentionUDMPropertyLongDescription,univentionUDMPropertyModule,univentionUDMPropertyMultivalue,univentionUDMPropertyObjectClass,univentionUDMPropertyOptions,univentionUDMPropertyShortDescription,univentionUDMPropertySyntax,univentionUDMPropertyTranslationLongDescription,univentionUDMPropertyTranslationShortDescription,univentionUDMPropertyTranslationTabName,univentionUDMPropertyValueMayChange,univentionUDMPropertyValueRequired,univentionUDMPropertyVersion,zoneName
    ldap/index/quickmode: false
    ldap/index/sub: aRecord,associatedDomain,automountInformation,cn,default,description,displayName,employeeNumber,givenName,macAddress,mail,mailAlternativeAddress,mailPrimaryAddress,name,ou,pTRRecord,printerModel,relativeDomainName,sambaSID,sn,uid,univentionInventoryNumber,univentionOperatingSystem,univentionSyntaxDescription,univentionUDMPropertyLongDescription,univentionUDMPropertyShortDescription,zoneName
    ldap/k5pwd: true
    ldap/limits: users time.soft=-1 time.hard=-1
    ldap/master/port: 389
    ldap/master: ums-ldap-server-primary
    ldap/maxopenfiles: 8192
    ldap/monitor: false
    ldap/overlay/lastbind/precision: 3600
    ldap/overlay/lastbind: false
    ldap/overlay/memberof/dangling: ignore
    ldap/overlay/memberof/member: uniqueMember
    ldap/overlay/memberof/memberof: memberOf
    ldap/overlay/memberof/objectclass: posixGroup
    ldap/overlay/memberof: true
    ldap/policy/cron: 5 * * * *
    ldap/ppolicy/enabled: false
    ldap/ppolicy: false
    ldap/pw-bcrypt: true
    ldap/pwd_scheme_kinit: true
    ldap/saml/service-providers: https://portal.opendesk.apps.digilab.network/univention/saml/metadata
    ldap/server/name: ums-ldap-server-primary
    ldap/server/port: 389
    ldap/server/type: master
    ldap/shadowbind/ignorefilter: (|(objectClass=univentionDomainController)(userPassword={KINIT}))
    ldap/shadowbind: true
    ldap/sizelimit: 400000
    ldap/threads: 16
    ldap/tls/ciphersuite: HIGH:MEDIUM:!aNULL:!MD5:!RC4
    ldap/tls/dh/paramfile: /etc/ldap/dh_2048.pem
    ldap/tls/minprotocol: 3.1
    ldap/tool-threads: 1
    ldap/translogfile: /var/lib/univention-ldap/listener/listener
    license/base: dc=swp-ldap,dc=internal
    locale/default: de_DE.UTF-8:UTF-8
    locale: de_DE.UTF-8:UTF-8 en_US.UTF-8:UTF-8
    password/hashing/bcrypt: true
    password/hashing/method: SHA-512
    password/quality/length/min: 8
    password/quality/mspolicy: false
    portal/auth-mode: saml
    portal/paths: /univention/portal/, /univention/umc/, /univention/selfservice/
    self-service/backend-server: portal.opendesk.apps.digilab.network
    self-service/ldap_attributes: jpegPhoto,description,title,givenName,sn,displayName,initials,univentionBirthday,o,street,postalCode,l
    self-service/udm-rest-server: portal.opendesk.apps.digilab.network
    self-service/udm_attributes/birthday/readonly: true
    self-service/udm_attributes/city/readonly: true
    self-service/udm_attributes/departmentNumber/readonly: true
    self-service/udm_attributes/displayName/readonly: true
    self-service/udm_attributes/employeeNumber/readonly: true
    self-service/udm_attributes/employeeType/readonly: true
    self-service/udm_attributes/firstname/readonly: true
    self-service/udm_attributes/lastname/readonly: true
    self-service/udm_attributes/organisation/readonly: true
    self-service/udm_attributes/postcode/readonly: true
    self-service/udm_attributes/street/readonly: true
    self-service/udm_attributes/title/readonly: true
    self-service/udm_attributes: jpegPhoto,description,title,firstname,lastname,displayName,initials,birthday,organisation,street,postcode,city
    self-service/web/enabled: yes
    server/role: domaincontroller_master
    slapd/port: 389
    ssl/ca/cipher: aes256
    ssl/common: Univention Corporate Server Root CA (ID: XXX)
    ssl/country: DE
    ssl/crl/interval: 7
    ssl/crl/validity: 10
    ssl/default/bits: 2048
    ssl/default/days: 1825
    ssl/default/hashfunction: sha256
    ssl/email: ssl@example.org
    ssl/host/objectclass: univentionDomainController,univentionMemberServer,univentionClient
    ssl/locality: DE
    ssl/organization: DE
    ssl/organizationalunit: Univention Corporate Server
    ssl/state: DE
    ssl/update/expired: yes
    ssl/validity/check: yes
    ssl/validity/host: 20523
    ssl/validity/root: 20523
    ssl/validity/warning: 30
    system/setup/showloginmessage: false
    ucr/backup/enabled: yes
    ucr/encoding/strict: true
    ucs/server/languages/de_AT: Deutsch (Österreich)
    ucs/server/languages/de_CH: Deutsch (Schweiz)
    ucs/server/languages/de_DE: Deutsch
    ucs/server/languages/en_GB: English (United Kingdom)
    ucs/server/languages/en_US: English
    ucs/server/robots/disallow: /
    ucs/server/saml-idp-server/primary.example.org: primary.example.org
    ucs/server/sso/fqdn: id.opendesk.apps.digilab.network
    ucs/server/sso/virtualhost: true
    ucs/web/license/requested: true
    ucs/web/theme: light
    umc/cookie-banner/show: false
    umc/http/allowed-session-overtake/ranges: 0.0.0.0/0,::/0
    umc/http/autostart: yes
    umc/http/content-security-policy/connect-src: 'self'
    umc/http/content-security-policy/default-src: 'unsafe-eval'
    umc/http/content-security-policy/font-src: 'self'
    umc/http/content-security-policy/form-action: 'self'
    umc/http/content-security-policy/frame-ancestors: 'self'
    umc/http/content-security-policy/frame-src: 'self' https://id.opendesk.apps.digilab.network
    umc/http/content-security-policy/img-src: *
    umc/http/content-security-policy/media-src: *
    umc/http/content-security-policy/object-src: 'self'
    umc/http/content-security-policy/script-src: 'self' 'unsafe-inline' 'unsafe-eval' https://www.youtube.com/ https://s.ytimg.com/
    umc/http/content-security-policy/style-src: 'self' 'unsafe-inline'
    umc/http/cookie/samesite: Strict
    umc/http/enforce-secure-cookie: true
    umc/http/enforce-session-cookie: true
    umc/http/interface: 0.0.0.0
    umc/http/port: 8090
    umc/http/response-timeout: 310
    umc/http/session/timeout: 28800
    umc/http/show_tracebacks: false
    umc/login/content-security-policy/frame-ancestors: 'self'
    umc/login/links/forgot_your_password/enabled: true
    umc/login/links/how_do_i_login/enabled: true
    umc/login/links/login_without_sso/enabled: true
    umc/login/links/login_without_sso/text/de: Ohne Single Sign-On anmelden
    umc/login/links/login_without_sso/text: Login without Single Sign On
    umc/login/password-complexity-message/de: Das Passwort muss mindestens 8 Zeichen lang sein und darf keine Zahlenabfolge oder ganze Worte enthalten, wie  '1234Test'.
    umc/login/password-complexity-message/en: Password must be at least 8 characters long and cannot include a number series or regular words, like '1234Test'.
    umc/module/debug/level: 2
    umc/module/timeout: 600
    umc/module/udm/oxmail/oxcontext/disabled: True
    umc/module/udm/portals/all/disabled: True
    umc/module/udm/users/self/disabled: true
    umc/saml/idp-server: http://ums-keycloak:8080/realms/opendesk/protocol/saml/descriptor
    umc/saml/idp-server-internal: http://ums-keycloak:8080/realms/opendesk/protocol/saml/descriptor
    umc/saml/in-memory-identity-cache: false
    umc/saml/schemes: https
    umc/saml/sp-server: portal.opendesk.apps.digilab.network
    umc/saml/trusted/sp/primary.example.org: primary.example.org
    umc/self-service/account-deregistration/blacklist/groups: Administrators,Domain Admins
    umc/self-service/account-deregistration/email/subject: Account deletion
    umc/self-service/account-deregistration/enabled: false
    umc/self-service/account-deregistration/whitelist/groups: Domain Users
    umc/self-service/account-registration/backend/enabled: false
    umc/self-service/account-registration/frontend/enabled: false
    umc/self-service/account-registration/udm_attributes/required: lastname,username
    umc/self-service/account-registration/udm_attributes: firstname,lastname,username
    umc/self-service/account-registration/usercontainer: cn=self registered users,dc=swp-ldap,dc=internal
    umc/self-service/account-verification/backend/enabled: false
    umc/self-service/account-verification/email/subject: Account verification
    umc/self-service/account-verification/email/token_length: 64
    umc/self-service/account-verification/email/webserver_address: portal.opendesk.apps.digilab.network
    umc/self-service/account-verification/frontend/enabled: false
    umc/self-service/account-verification/next-steps/de: Weiter zum <a href='/univention/portal'>Univention Portal</a>.
    umc/self-service/account-verification/next-steps: Continue to the <a href='/univention/portal'>Univention Portal</a>.
    umc/self-service/allow-authenticated-use: true
    umc/self-service/content-security-policy/frame-ancestors: 'self'
    umc/self-service/email-change-notification/email/subject: Account recovery email changed
    umc/self-service/enabled: yes
    umc/self-service/invitation/enabled: true
    umc/self-service/memcached/socket: memcached
    umc/self-service/memcached/username:
    umc/self-service/passwordchange/frontend/enabled: yes
    umc/self-service/passwordreset/backend/enabled: true
    umc/self-service/passwordreset/email/enabled: yes
    umc/self-service/passwordreset/email/sender_address: Password Reset Service <noreply@opendesk.apps.digilab.network>
    umc/self-service/passwordreset/email/server/port: 25
    umc/self-service/passwordreset/email/server/starttls: false
    umc/self-service/passwordreset/email/server/user:
    umc/self-service/passwordreset/email/server: postfix.tn-openbsw-opendesk.svc.cluster.local
    umc/self-service/passwordreset/email/subject: Password reset
    umc/self-service/passwordreset/email/text_file: /usr/share/univention-self-service/email_bodies/passwordreset_email_body.txt
    umc/self-service/passwordreset/email/token_length: 64
    umc/self-service/passwordreset/email/webserver_address: portal.opendesk.apps.digilab.network
    umc/self-service/passwordreset/external/enabled: no
    umc/self-service/passwordreset/external/token_length: 64
    umc/self-service/passwordreset/frontend/enabled: yes
    umc/self-service/passwordreset/limit/per_user/day: 120
    umc/self-service/passwordreset/limit/per_user/hour: 60
    umc/self-service/passwordreset/limit/per_user/minute: 10
    umc/self-service/passwordreset/limit/total/day: 1000
    umc/self-service/passwordreset/limit/total/hour: 200
    umc/self-service/passwordreset/limit/total/minute: 120
    umc/self-service/passwordreset/sms/enabled: no
    umc/self-service/passwordreset/sms/token_length: 12
    umc/self-service/passwordreset/token_validity_period: 172800
    umc/self-service/passwordreset/whitelist/groups: Domain Users
    umc/self-service/postgresql/database: selfservice
    umc/self-service/postgresql/hostname: postgresql
    umc/self-service/postgresql/port: 5432
    umc/self-service/postgresql/username: selfservice_user
    umc/self-service/profiledata/blacklist/groups: Administrators,Domain Admins
    umc/self-service/profiledata/enabled: true
    umc/self-service/profiledata/whitelist/groups: Domain Users
    umc/self-service/protect-account/backend/enabled: true
    umc/self-service/protect-account/frontend/enabled: yes
    umc/self-service/service-specific-passwords/backend/enabled: false
    umc/server/autostart: yes
    umc/server/debug/level: 2
    umc/server/processes: 1
    umc/server/upload/max: 2048
    umc/server/upload/min_free_space: 51200
    umc/web/appliance/fast_setup_mode: true
    umc/web/cache_bust: 1619020256
    umc/web/favorites/default: welcome,udm:users/user,udm:groups/group,udm:computers/computer,appcenter:appcenter,updater
    umc/web/feedback/description: [UMC-Feedback] Traceback
    umc/web/feedback/mail: feedback@univention.de
    umc/web/hooks/univention-management-console-module-passwordchange: passwordchange
    umc/web/hooks/univention-self-service: passwordreset
    umc/web/hooks/univention-web-js: default_menu_entries
    umc/web/language: de_DE.UTF-8:UTF-8
    umc/web/piwik: false
    umc/web/sso/enabled: true
    umc/web/sso/newwindow: true
    umc/web/startupdialog: false
    umc/web/title: openDesk Portal
    update/available: false
    update/reboot/required: false
    uuid/license: 00000000-0000-0000-0000-000000000000
    uuid/system: 00000000-0000-0000-0000-000000000000
    version/erratalevel: 0
    version/patchlevel: 5
    version/version: 5.0

  base-defaults.conf: |
    # This file is empty on purpose
    # And needs to have at least two lines
---
# Source: nubus/charts/nubusStackDataUms/templates/configmap.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: ums-stack-data-ums
  namespace: tn-openbsw-opendesk
  labels:
    app.kubernetes.io/name: stack-data-ums
    helm.sh/chart: nubusStackDataUms-0.73.0
    app.kubernetes.io/instance: ums
    app.kubernetes.io/managed-by: Helm
  annotations:
    argocd.argoproj.io/hook: Sync
    argocd.argoproj.io/hook-delete-policy: HookSucceeded
    intents.otterize.com/service-name: ums-stack-data-ums
data:
  UDM_API_URL: http://ums-udm-rest-api:9979/udm/
  UDM_API_USER: cn=admin
  UDM_API_PASSWORD_FILE: /run/secrets/univention.de/data-loader/udm_secret
  UDM_API_PORT: '9979'
---
# Source: nubus/charts/nubusUdmListener/templates/configmap.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: ums-provisioning-listener
  namespace: tn-openbsw-opendesk
  labels:
    app.kubernetes.io/name: provisioning-listener
    helm.sh/chart: nubusUdmListener-0.44.0
    app.kubernetes.io/instance: ums
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 1.16.0
data:
  CA_CERT: ''
  CA_CERT_FILE: ''
  DEBUG_LEVEL: '2'
  LDAP_BASE_DN: dc=swp-ldap,dc=internal
  LDAP_PASSWORD: ''
  LDAP_PASSWORD_FILE: /var/secrets/ldap_secret
  LDAP_HOST: ums-ldap-server-primary
  LDAP_HOST_DN: cn=admin,dc=swp-ldap,dc=internal
  LDAP_PORT: '389'
  NATS_HOST: ums-provisioning-nats
  NATS_PORT: '4222'
  NATS_MAX_RECONNECT_ATTEMPTS: '5'
  PROVISIONING_API_HOST: ums-provisioning-api
  PROVISIONING_API_PORT: '80'
  NOTIFIER_SERVER: ums-ldap-notifier
  TLS_MODE: off

---
# Source: nubus/charts/nubusUdmListener/templates/configmap.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: ums-provisioning-listener-files
  namespace: tn-openbsw-opendesk
  labels:
    app.kubernetes.io/name: provisioning-listener
    helm.sh/chart: nubusUdmListener-0.44.0
    app.kubernetes.io/instance: ums
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 1.16.0
data:
  base.conf: |
    # univention_ base.conf

    cron/autostart: yes
    server/role: memberserver
    ldap/master: ums-ldap-server-primary
    ldap/master/port: 389
    ldap/hostdn: cn=admin,dc=swp-ldap,dc=internal
    ldap/base: dc=swp-ldap,dc=internal
    uldap/start-tls: 0
    listener/debug/level: 2

    # end of univention_ base.conf

  base-forced.conf: |


  base-ldap.conf: |


  base-schedule.conf: |


  base-defaults.conf: |


  ldap.conf: |
    TLS_REQCERT never
    BASE dc=swp-ldap,dc=internal


---
# Source: nubus/charts/nubusUdmRestApi/templates/configmap.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: ums-udm-rest-api
  namespace: tn-openbsw-opendesk
  labels:
    app.kubernetes.io/name: udm-rest-api
    helm.sh/chart: nubusUdmRestApi-0.25.1
    app.kubernetes.io/instance: ums
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 12.0.7
  annotations:
    intents.otterize.com/service-name: ums-udm-rest-api
data:
  LDAP_SECRET_FILE: /etc/ldap.secret
  MACHINE_SECRET_FILE: /etc/machine.secret
  # used by the load-join-data job
  UDM_API_URL: http://ums-udm-rest-api/udm/
  # This is hard-coded to be cn=admin in UCS
  UDM_API_USER: cn=admin
  UDM_API_PASSWORD_FILE: /etc/ldap.secret

---
# Source: nubus/charts/nubusUdmRestApi/templates/configmap.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: ums-udm-rest-api-ldap-conf
  namespace: tn-openbsw-opendesk
  labels:
    app.kubernetes.io/name: udm-rest-api
    helm.sh/chart: nubusUdmRestApi-0.25.1
    app.kubernetes.io/instance: ums
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 12.0.7
  annotations:
    intents.otterize.com/service-name: ums-udm-rest-api
data:
  ldap.conf: |
    URI ldap://ums-ldap-server
    BASE dc=swp-ldap,dc=internal
    TLS_REQCERT never
---
# Source: nubus/charts/nubusUmcServer/templates/configmap-proxy.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: ums-umc-server-proxy
  namespace: tn-openbsw-opendesk
  labels:
    app.kubernetes.io/name: umc-server
    helm.sh/chart: nubusUmcServer-0.34.1
    app.kubernetes.io/instance: ums
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 12.0.29
  annotations:
    intents.otterize.com/service-name: ums-umc-server
data:
  traefik.yaml: |
    global:
      checkNewVersion: false
      sendAnonymousUsage: false
    api:
      dashboard: false
    log:
      level: INFO
    accessLog:
      filePath: /dev/stdout
    ping:
      entryPoint: http
    entryPoints:
      http:
        address: ":8080"
    providers:
      file:
        filename: /etc/traefik/dynamic.yaml
        watch: false
  dynamic.yaml: |
    http:
      routers:
        umc-server:
          service: umc-server
          rule: PathPrefix(`/`)
      services:
        umc-server:
          loadBalancer:
            sticky:
              cookie:
                name: traefik_session
            servers:
              - url: http://ums-umc-server-0:8090

---
# Source: nubus/charts/nubusUmcServer/templates/configmap.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: ums-umc-server
  namespace: tn-openbsw-opendesk
  labels:
    app.kubernetes.io/name: umc-server
    helm.sh/chart: nubusUmcServer-0.34.1
    app.kubernetes.io/instance: ums
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 12.0.29
  annotations:
    intents.otterize.com/service-name: ums-umc-server
data:
  LDAP_SECRET_FILE: /etc/ldap.secret
  MACHINE_SECRET_FILE: /etc/machine.secret
  PRIVATE_KEY_FILE: /var/secrets/ssl/tls.key
  CA_CERT_FILE: /var/secrets/ca_cert
  CERT_PEM_FILE: /var/secrets/ssl/tls.crt
  SMTP_SECRET_FILE: /var/secrets/smtp_secret
---
# Source: nubus/charts/nubusUmcServer/templates/configmap.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: ums-umc-server-pw-reset-email-body
  namespace: tn-openbsw-opendesk
  labels:
    app.kubernetes.io/name: umc-server
    helm.sh/chart: nubusUmcServer-0.34.1
    app.kubernetes.io/instance: ums
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 12.0.29
  annotations:
    intents.otterize.com/service-name: ums-umc-server
data:
  passwordreset_email_body.txt: |-
    Sehr geehrte Benutzerin, sehr geehrter Benutzer,

    Ihr Benutzername für {domainname} lautet: {username}

    Sie erhalten diese Nachricht, da Sie Ihr Passwort zurücksetzen möchten oder weil Ihr Benutzer neu im System angelegt wurde.

    Klicken Sie bitte auf den folgenden Link, um Ihr Passwort zu setzen:
    https://{fqdn}/univention/portal/#/selfservice/newpassword/?token={token}&username={username}

    Der genannte Link ist nur 48 Stunden gültig, danach fordern Sie ihn bitte erneut an unter:
    https://{fqdn}/univention/portal/#/selfservice/passwordforgotten

    Mit freundlichen Grüßen
    Ihr {domainname} Passwort-Service


---
# Source: nubus/templates/postgresql-provisioning-configmap.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: ums-postgresql-provisioning
  namespace: tn-openbsw-opendesk
  labels:
    app.kubernetes.io/name: nubus
    helm.sh/chart: nubus-0.64.2
    app.kubernetes.io/instance: ums
    app.kubernetes.io/managed-by: Helm
data:
  provision-databases.sh: |
    #!/usr/bin/env sh
    echo "Provisioning databases ..."
    cat /provisioning-scripts/databases.list
    for db in $(cat /provisioning-scripts/databases.list | sort | uniq); do
      echo "Provisioning database $db ..."
      psql -c "SELECT 'CREATE DATABASE $db;' WHERE NOT EXISTS (SELECT FROM pg_database WHERE datname = '$db');" -t | psql -v ON_ERROR_STOP=1
      psql -v ON_ERROR_STOP=1 <<-EOSQL
        SELECT * FROM pg_database;
    EOSQL
    done
  provision-users.sh: |
    #!/usr/bin/env sh
    set -eu
    echo "Provisioning users ..."
    for user in $(cat /provisioning-scripts/users.list | sort | uniq); do
      USER_PASSWORD=$(cat /provisioning/passwords/$user)
      echo "Provisioning user $user ..."
      psql -v ON_ERROR_STOP=1 <<-EOSQL
        DO \$\$
        BEGIN
        IF NOT EXISTS (SELECT * FROM pg_user WHERE usename = '$user') THEN
          CREATE USER $user WITH PASSWORD '$USER_PASSWORD';
        END IF;
        END \$\$;
    EOSQL
      psql -v ON_ERROR_STOP=1 <<-EOSQL
          ALTER USER $user PASSWORD '$USER_PASSWORD';
    EOSQL
    done

    echo "Provisioning user grants ..."
    for grant in $(cat /provisioning-scripts/grants.list | sort | uniq); do
      echo "Processing grant: $grant"
      _USER=$(echo $grant | cut -d: -f1)
      _DATABASE=$(echo $grant | cut -d: -f2)
      _PRIVILEGES=$(echo $grant | cut -d: -f3)
      echo "Provisioning '$_PRIVILEGES' privileges for user $_USER on database $_DATABASE ..."
      case ${_PRIVILEGES} in
          rw)
            psql -v ON_ERROR_STOP=1 <<-EOSQL
            GRANT ALL PRIVILEGES ON DATABASE $_DATABASE TO ${_USER};
            \c $_DATABASE
            GRANT ALL ON SCHEMA public TO ${_USER};
    EOSQL
            ;;
          ro)
            psql -v ON_ERROR_STOP=1 <<-EOSQL
            GRANT CONNECT ON DATABASE $_DATABASE TO ${_USER};
            \c $_DATABASE
            GRANT USAGE ON SCHEMA public TO ${_USER};
            GRANT SELECT ON ALL TABLES IN SCHEMA public TO ${_USER};
    EOSQL
            ;;
          *)
            echo "Invalid privileges: ${_PRIVILEGES}"
            exit 1
            ;;
        esac
    done
  grants.list: |
    notificationsapi_user:notificationsapi:rw
    selfservice_user:selfservice:rw
    keycloak_user:keycloak:rw
    keycloak_extensions_user:keycloak_extensions:rw
    guardianmanagementapi_user:guardianmanagementapi:rw
  users.list: |
    notificationsapi_user
    selfservice_user
    keycloak_user
    keycloak_extensions_user
    guardianmanagementapi_user
  databases.list: |
    notificationsapi
    selfservice
    keycloak
    keycloak_extensions
    guardianmanagementapi
---
# Source: nubus/charts/keycloak/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: ums-keycloak
  namespace: tn-openbsw-opendesk
  labels:
    app.kubernetes.io/name: keycloak
    helm.sh/chart: keycloak-0.5.2
    app.kubernetes.io/instance: ums
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  clusterIP: None
  ports:
  - name: http
    port: 8080
    targetPort: http
    protocol: TCP
  - name: https
    port: 8443
    targetPort: https
    protocol: TCP
  - name: ispn
    port: 7800
    targetPort: ispn
    protocol: TCP
  selector:
    app.kubernetes.io/name: keycloak
    app.kubernetes.io/instance: ums
---
# Source: nubus/charts/nubusGuardian/templates/service-authorization-api.yaml
apiVersion: v1
kind: Service
metadata:
  name: ums-guardian-authorization-api
  labels:
    app.kubernetes.io/instance: ums
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: ums-guardian-authorization-api
    app.kubernetes.io/version: 2.0.0
    helm.sh/chart: nubusGuardian-0.14.0
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: http
    protocol: TCP
    name: http
  selector:
    app.kubernetes.io/instance: ums
    app.kubernetes.io/name: ums-guardian-authorization-api
---
# Source: nubus/charts/nubusGuardian/templates/service-management-api.yaml
apiVersion: v1
kind: Service
metadata:
  name: ums-guardian-management-api
  labels:
    app.kubernetes.io/instance: ums
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: ums-guardian-management-api
    app.kubernetes.io/version: 2.0.0
    helm.sh/chart: nubusGuardian-0.14.0
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: http
    protocol: TCP
    name: http
  selector:
    app.kubernetes.io/instance: ums
    app.kubernetes.io/name: ums-guardian-management-api
---
# Source: nubus/charts/nubusGuardian/templates/service-management-ui.yaml
apiVersion: v1
kind: Service
metadata:
  name: ums-guardian-management-ui
  labels:
    app.kubernetes.io/instance: ums
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: ums-guardian-management-ui
    app.kubernetes.io/version: 2.0.0
    helm.sh/chart: nubusGuardian-0.14.0
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: http
    protocol: TCP
    name: http
  selector:
    app.kubernetes.io/instance: ums
    app.kubernetes.io/name: ums-guardian-management-ui
---
# Source: nubus/charts/nubusGuardian/templates/service-open-policy-agent.yaml
apiVersion: v1
kind: Service
metadata:
  name: ums-guardian-open-policy-agent
  labels:
    app.kubernetes.io/instance: ums
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: ums-guardian-open-policy-agent
    app.kubernetes.io/version: 2.0.0
    helm.sh/chart: nubusGuardian-0.14.0
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: http
    protocol: TCP
    name: http
  selector:
    app.kubernetes.io/instance: ums
    app.kubernetes.io/name: ums-guardian-open-policy-agent
---
# Source: nubus/charts/nubusKeycloakExtensions/templates/service-proxy.yaml
apiVersion: v1
kind: Service
metadata:
  name: ums-keycloak-extensions-proxy
  labels:
    app.kubernetes.io/instance: ums
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: ums-keycloak-extensions-proxy
    app.kubernetes.io/version: 21.0.1
    helm.sh/chart: nubusKeycloakExtensions-0.11.0
spec:
  type: ClusterIP
  ports:
  - port: 8181
    targetPort: http
    protocol: TCP
    name: http
  selector:
    app.kubernetes.io/instance: ums
    app.kubernetes.io/name: ums-keycloak-extensions-proxy
---
# Source: nubus/charts/nubusLdapNotifier/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: ums-ldap-notifier
  namespace: tn-openbsw-opendesk
  labels:
    app.kubernetes.io/name: ldap-notifier
    helm.sh/chart: nubusLdapNotifier-0.25.2
    app.kubernetes.io/instance: ums
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 14.0.4
  annotations:
spec:
  type: ClusterIP
  ports:
  - name: notifier
    port: 6669
    targetPort: notifier
    protocol: TCP
  selector:
    app.kubernetes.io/name: ldap-notifier
    app.kubernetes.io/instance: ums
---
# Source: nubus/charts/nubusLdapServer/templates/service-primary.yaml
apiVersion: v1
kind: Service
metadata:
  name: ums-ldap-server-primary
  namespace: tn-openbsw-opendesk
  labels:
    app.kubernetes.io/name: ldap-server
    helm.sh/chart: nubusLdapServer-0.25.2
    app.kubernetes.io/instance: ums
    app.kubernetes.io/managed-by: Helm
  annotations:
    intents.otterize.com/service-name: ums-ldap-server
spec:
  type: ClusterIP
  clusterIP: None
  # TODO: If it would be fine for the write requests to be distributed over all existing primaries, setting this to true would be a solution to the problem of a non-restartable statefulset.
  publishNotReadyAddresses: false
  ports:
  - name: ldap
    port: 389
    targetPort: ldap
    protocol: TCP
  - name: ldaps
    port: 636
    targetPort: ldaps
    protocol: TCP
  selector:
    app.kubernetes.io/name: ldap-server
    app.kubernetes.io/instance: ums
    ldap-server-type: primary
---
# Source: nubus/charts/nubusLdapServer/templates/service-secondary.yaml
apiVersion: v1
kind: Service
metadata:
  name: ums-ldap-server-secondary
  namespace: tn-openbsw-opendesk
  labels:
    app.kubernetes.io/name: ldap-server
    helm.sh/chart: nubusLdapServer-0.25.2
    app.kubernetes.io/instance: ums
    app.kubernetes.io/managed-by: Helm
  annotations:
    intents.otterize.com/service-name: ums-ldap-server
spec:
  type: ClusterIP
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
  - name: ldap
    port: 389
    targetPort: ldap
    protocol: TCP
  - name: ldaps
    port: 636
    targetPort: ldaps
    protocol: TCP
  selector:
    app.kubernetes.io/name: ldap-server
    app.kubernetes.io/instance: ums
    ldap-server-type: secondary
---
# Source: nubus/charts/nubusLdapServer/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: ums-ldap-server
  namespace: tn-openbsw-opendesk
  labels:
    app.kubernetes.io/name: ldap-server
    helm.sh/chart: nubusLdapServer-0.25.2
    app.kubernetes.io/instance: ums
    app.kubernetes.io/managed-by: Helm
  annotations:
    intents.otterize.com/service-name: ums-ldap-server
spec:
  type: ClusterIP
  ports:
  - name: ldap
    port: 389
    targetPort: ldap
    protocol: TCP
  - name: ldaps
    port: 636
    targetPort: ldaps
    protocol: TCP
  selector:
    app.kubernetes.io/name: ldap-server
    app.kubernetes.io/instance: ums
    ldap-server-type: primary
---
# Source: nubus/charts/nubusNotificationsApi/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: ums-notifications-api
  namespace: tn-openbsw-opendesk
  labels:
    app.kubernetes.io/name: notifications-api
    helm.sh/chart: nubusNotificationsApi-0.42.2
    app.kubernetes.io/instance: ums
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 1.16.0
  annotations:
    intents.otterize.com/service-name: ums-notifications-api
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 80
    targetPort: http
    protocol: TCP
  selector:
    app.kubernetes.io/name: notifications-api
    app.kubernetes.io/instance: ums
---
# Source: nubus/charts/nubusPortalFrontend/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: ums-portal-frontend
  namespace: tn-openbsw-opendesk
  labels:
    app.kubernetes.io/name: portal-frontend
    helm.sh/chart: nubusPortalFrontend-0.42.2
    app.kubernetes.io/instance: ums
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 1.16.0
  annotations:
    intents.otterize.com/service-name: ums-portal-frontend
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 80
    targetPort: http
    protocol: TCP
  selector:
    app.kubernetes.io/name: portal-frontend
    app.kubernetes.io/instance: ums
---
# Source: nubus/charts/nubusPortalServer/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: ums-portal-server
  namespace: tn-openbsw-opendesk
  labels:
    app.kubernetes.io/name: portal-server
    helm.sh/chart: nubusPortalServer-0.42.2
    app.kubernetes.io/instance: ums
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 1.16.0
  annotations:
    intents.otterize.com/service-name: ums-portal-server
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 80
    targetPort: http
    protocol: TCP
  selector:
    app.kubernetes.io/name: portal-server
    app.kubernetes.io/instance: ums
---
# Source: nubus/charts/nubusProvisioning/charts/nats/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: ums-provisioning-nats
  namespace: tn-openbsw-opendesk
  labels:
    app.kubernetes.io/name: provisioning-nats
    helm.sh/chart: nats-0.1.2
    app.kubernetes.io/instance: ums
    app.kubernetes.io/managed-by: Helm
  annotations:
    intents.otterize.com/service-name: ums-provisioning-nats
spec:
  type: ClusterIP
  ports:
  - name: client
    port: 4222
    targetPort: client
    protocol: TCP
  - name: cluster
    port: 6222
    targetPort: cluster
    protocol: TCP
  - name: monitor
    port: 8222
    targetPort: monitor
    protocol: TCP
  selector:
    app.kubernetes.io/name: provisioning-nats
    app.kubernetes.io/instance: ums
---
# Source: nubus/charts/nubusProvisioning/charts/nats/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: ums-provisioning-nats-headless
  namespace: tn-openbsw-opendesk
  labels:
    app.kubernetes.io/name: provisioning-nats
    helm.sh/chart: nats-0.1.2
    app.kubernetes.io/instance: ums
    app.kubernetes.io/managed-by: Helm
  annotations:
    intents.otterize.com/service-name: ums-provisioning-nats
spec:
  type: ClusterIP
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
  - name: client
    port: 4222
    targetPort: client
    protocol: TCP
  - name: cluster
    port: 6222
    targetPort: cluster
    protocol: TCP
  - name: monitor
    port: 8222
    targetPort: monitor
    protocol: TCP
  selector:
    app.kubernetes.io/name: provisioning-nats
    app.kubernetes.io/instance: ums
---
# Source: nubus/charts/nubusProvisioning/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: ums-provisioning-api
  namespace: tn-openbsw-opendesk
  labels:
    app.kubernetes.io/instance: ums
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: ums-provisioning-api
    helm.sh/chart: nubusProvisioning-0.44.0
  annotations:
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 80
    targetPort: http
    protocol: TCP
  selector:
    app.kubernetes.io/instance: ums
    app.kubernetes.io/name: ums-provisioning-api
---
# Source: nubus/charts/nubusUdmRestApi/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: ums-udm-rest-api
  namespace: tn-openbsw-opendesk
  labels:
    app.kubernetes.io/name: udm-rest-api
    helm.sh/chart: nubusUdmRestApi-0.25.1
    app.kubernetes.io/instance: ums
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 12.0.7
  annotations:
    intents.otterize.com/service-name: ums-udm-rest-api
spec:
  type: ClusterIP
  clusterIP: None
  ports:
  - name: http
    port: 9979
    targetPort: http
    protocol: TCP
  selector:
    app.kubernetes.io/name: udm-rest-api
    app.kubernetes.io/instance: ums
---
# Source: nubus/charts/nubusUmcGateway/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: ums-umc-gateway
  namespace: tn-openbsw-opendesk
  labels:
    app.kubernetes.io/name: umc-gateway
    helm.sh/chart: nubusUmcGateway-0.34.1
    app.kubernetes.io/instance: ums
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 12.0.29
  annotations:
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 80
    targetPort: http
    protocol: TCP
  selector:
    app.kubernetes.io/name: umc-gateway
    app.kubernetes.io/instance: ums
---
# Source: nubus/charts/nubusUmcServer/templates/service-proxy.yaml
apiVersion: v1
kind: Service
metadata:
  name: ums-umc-server
  namespace: tn-openbsw-opendesk
  labels:
    app.kubernetes.io/instance: ums
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: ums-umc-server-proxy
    app.kubernetes.io/version: 12.0.29
    helm.sh/chart: nubusUmcServer-0.34.1
  annotations:
    intents.otterize.com/service-name: ums-umc-server
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 80
    targetPort: http
    protocol: TCP
  selector:
    app.kubernetes.io/instance: ums
    app.kubernetes.io/name: ums-umc-server-proxy
---
# Source: nubus/charts/nubusUmcServer/templates/service-server.yaml
apiVersion: v1
kind: Service
metadata:
  name: ums-umc-server-0
  namespace: tn-openbsw-opendesk
  labels:
    app.kubernetes.io/name: umc-server
    helm.sh/chart: nubusUmcServer-0.34.1
    app.kubernetes.io/instance: ums
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 12.0.29
  annotations:
    intents.otterize.com/service-name: ums-umc-server
spec:
  type: ClusterIP
  clusterIP: None
  ports:
  - name: http
    port: 8090
    targetPort: http
    protocol: TCP
  selector:
    app.kubernetes.io/name: umc-server
    app.kubernetes.io/instance: ums
    statefulset.kubernetes.io/pod-name: ums-umc-server-0
---
# Source: nubus/charts/nubusGuardian/templates/deployment-authorization-api.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ums-guardian-authorization-api
  labels:
    app.kubernetes.io/instance: ums
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: ums-guardian-authorization-api
    app.kubernetes.io/version: 2.0.0
    helm.sh/chart: nubusGuardian-0.14.0
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: ums
      app.kubernetes.io/name: ums-guardian-authorization-api
  template:
    metadata:
      annotations:
        checksum/config: b0ec52b725d7ebf01db435089c97fe12e407034959e784698b5a87297537ce42
        intents.otterize.com/service-name: ums-guardian-authorization-api
      labels:
        app.kubernetes.io/instance: ums
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: ums-guardian-authorization-api
        app.kubernetes.io/version: 2.0.0
        helm.sh/chart: nubusGuardian-0.14.0
    spec:
      securityContext:
        fsGroup: 1000
        fsGroupChangePolicy: Always
      containers:
      - name: authorization-api
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          privileged: false
          readOnlyRootFilesystem: true
          runAsGroup: 1000
          runAsNonRoot: true
          runAsUser: 1000
          seLinuxOptions:
          seccompProfile:
            type: RuntimeDefault
        image:
          registry.opencode.de/bmi/opendesk/components/supplier/univention/images-mirror/guardian-authorization-api-authorization-api:2.0.0@sha256:5f194f9385aea5a279e25a57352f7b88a6cc4fa90b3bf04c2c97b9ff2bad70a5
        imagePullPolicy: IfNotPresent
        envFrom:
        - configMapRef:
            name: ums-guardian-authorization-api
        ports:
        - name: http
          containerPort: 8000
          protocol: TCP
        livenessProbe:
          httpGet:
            path: /guardian/authorization/openapi.json
            port: http
          initialDelaySeconds: 120
          timeoutSeconds: 3
          periodSeconds: 30
          failureThreshold: 3
          successThreshold: 1
        readinessProbe:
          httpGet:
            path: /guardian/authorization/openapi.json
            port: http
          initialDelaySeconds: 30
          timeoutSeconds: 3
          periodSeconds: 15
          failureThreshold: 30
          successThreshold: 1
        resources:
          requests:
            cpu: 0.1
            memory: 256Mi
        volumeMounts:
        - name: secrets
          mountPath: /var/secrets
        - name: tmp
          mountPath: /tmp
      volumes:
      - name: tmp
        emptyDir: {}
      - name: secrets
        secret:
          secretName: ums-guardian-udm-secret
---
# Source: nubus/charts/nubusGuardian/templates/deployment-management-api.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ums-guardian-management-api
  labels:
    app.kubernetes.io/instance: ums
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: ums-guardian-management-api
    app.kubernetes.io/version: 2.0.0
    helm.sh/chart: nubusGuardian-0.14.0
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: ums
      app.kubernetes.io/name: ums-guardian-management-api
  template:
    metadata:
      annotations:
        checksum/config: c333795107148d18926857f15905589157806237f4d522ea5a18c6d6dcf133d7
        intents.otterize.com/service-name: ums-guardian-management-api
      labels:
        app.kubernetes.io/instance: ums
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: ums-guardian-management-api
        app.kubernetes.io/version: 2.0.0
        helm.sh/chart: nubusGuardian-0.14.0
    spec:
      securityContext:
        fsGroup: 1000
        fsGroupChangePolicy: Always
      initContainers:
      - name: database-migrations
        image:
          registry.opencode.de/bmi/opendesk/components/supplier/univention/images-mirror/guardian-management-api-management-api:2.0.0@sha256:61a1ab84efebe2a87d358e8624f8b39073a6071683e7cd77b740a97d464753a2
        command: [alembic, upgrade, head]
        imagePullPolicy: IfNotPresent
        envFrom:
        - configMapRef:
            name: ums-guardian-management-api
        env:
        - name: SQL_PERSISTENCE_ADAPTER__PASSWORD
          valueFrom:
            secretKeyRef:
              name: ums-guardian-postgresql-opendesk-credentials
              key: guardianDatabasePassword
      containers:
      - name: management-api
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          privileged: false
          readOnlyRootFilesystem: true
          runAsGroup: 1000
          runAsNonRoot: true
          runAsUser: 1000
          seLinuxOptions:
          seccompProfile:
            type: RuntimeDefault
        image:
          registry.opencode.de/bmi/opendesk/components/supplier/univention/images-mirror/guardian-management-api-management-api:2.0.0@sha256:61a1ab84efebe2a87d358e8624f8b39073a6071683e7cd77b740a97d464753a2
        imagePullPolicy: IfNotPresent
        envFrom:
        - configMapRef:
            name: ums-guardian-management-api
        env:
        - name: SQL_PERSISTENCE_ADAPTER__PASSWORD
          valueFrom:
            secretKeyRef:
              name: ums-guardian-postgresql-opendesk-credentials
              key: guardianDatabasePassword
        ports:
        - name: http
          containerPort: 8000
          protocol: TCP
        livenessProbe:
          httpGet:
            path: /guardian/management/openapi.json
            port: http
          initialDelaySeconds: 120
          timeoutSeconds: 3
          periodSeconds: 30
          failureThreshold: 3
          successThreshold: 1
        readinessProbe:
          httpGet:
            path: /guardian/management/openapi.json
            port: http
          initialDelaySeconds: 30
          timeoutSeconds: 3
          periodSeconds: 15
          failureThreshold: 30
          successThreshold: 1
        resources:
          requests:
            cpu: 0.1
            memory: 256Mi
        volumeMounts:
        - name: secrets
          mountPath: /var/secrets
        - name: bundles
          mountPath: /guardian_service_dir/bundle_server
        - name: tmp
          mountPath: /tmp
      volumes:
      - name: bundles
        emptyDir: {}
      - name: tmp
        emptyDir: {}
      - name: secrets
        secret:
          secretName: ums-guardian-keycloak-client-secret
---
# Source: nubus/charts/nubusGuardian/templates/deployment-management-ui.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ums-guardian-management-ui
  labels:
    app.kubernetes.io/instance: ums
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: ums-guardian-management-ui
    app.kubernetes.io/version: 2.0.0
    helm.sh/chart: nubusGuardian-0.14.0
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: ums
      app.kubernetes.io/name: ums-guardian-management-ui
  template:
    metadata:
      annotations:
        checksum/config: a74008e9cc11d7364f5b136e44451430b7b148996bcc9e122df4cabee9ae8239
        intents.otterize.com/service-name: ums-guardian-management-ui
      labels:
        app.kubernetes.io/instance: ums
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: ums-guardian-management-ui
        app.kubernetes.io/version: 2.0.0
        helm.sh/chart: nubusGuardian-0.14.0
    spec:
      initContainers:
      - name: app-configuration
        image:
          registry.opencode.de/bmi/opendesk/components/supplier/univention/images-mirror/guardian-management-ui-management-ui:2.0.0@sha256:57e2503a4772f0ff656e792a98fadef4d41c248218e6c368f76ce82a892478cf
        imagePullPolicy: IfNotPresent
        envFrom:
        - configMapRef:
            name: ums-guardian-management-ui
        command:
        - sh
        - -c
        - /entrypoint.sh; cp -a /app/* /target/app/
        volumeMounts:
        - name: init-entrypoints-config
          mountPath: /entrypoint.d/10-generate_config.sh
            # NOTE: using target approach
        - name: app-config
          mountPath: /target/app
      containers:
      - name: management-ui
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          enabled: true
          privileged: false
          readOnlyRootFilesystem: true
          runAsGroup: 1000
          runAsNonRoot: true
          runAsUser: 1000
          seLinuxOptions:
          seccompProfile:
            type: RuntimeDefault
        image:
          registry.opencode.de/bmi/opendesk/components/supplier/univention/images-mirror/guardian-management-ui-management-ui:2.0.0@sha256:57e2503a4772f0ff656e792a98fadef4d41c248218e6c368f76ce82a892478cf
        imagePullPolicy: IfNotPresent
        envFrom:
        - configMapRef:
            name: ums-guardian-management-ui
        volumeMounts:
        - name: app-config
          mountPath: /app
        - name: nginx-conf
          mountPath: /etc/nginx/sites-enabled/default
          subPath: nginx.conf
        - name: entrypoint
          mountPath: /entrypoint.d
        - name: var-lib
          mountPath: /var/lib/nginx
        - name: var-run
          mountPath: /var/run
        ports:
        - name: http
          containerPort: 8383
          protocol: TCP
        livenessProbe:
          httpGet:
            path: /
            port: http
          initialDelaySeconds: 120
          timeoutSeconds: 3
          periodSeconds: 30
          failureThreshold: 3
          successThreshold: 1
        readinessProbe:
          httpGet:
            path: /
            port: http
          initialDelaySeconds: 30
          timeoutSeconds: 3
          periodSeconds: 15
          failureThreshold: 30
          successThreshold: 1
        resources:
          requests:
            cpu: 0.1
            memory: 256Mi
      volumes:
      - name: app-config
        emptyDir: {}
          # NOTE: Workaround for removing the content of the entrypoint
      - name: entrypoint
        emptyDir: {}
      - name: var-lib
        emptyDir: {}
      - name: var-run
        emptyDir: {}
      - name: init-entrypoints-config
        configMap:
          name: ums-guardian-init-config-management-ui
          defaultMode: 0555
      - name: nginx-conf
        configMap:
          name: ums-guardian-nginx-conf
---
# Source: nubus/charts/nubusGuardian/templates/deployment-open-policy-agent.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ums-guardian-open-policy-agent
  labels:
    app.kubernetes.io/instance: ums
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: ums-guardian-open-policy-agent
    app.kubernetes.io/version: 2.0.0
    helm.sh/chart: nubusGuardian-0.14.0
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: ums
      app.kubernetes.io/name: ums-guardian-open-policy-agent
  template:
    metadata:
      annotations:
        checksum/config: 655fe4dd682ce9ce5707e284f5ff2189c4ad7ba3e57b8d65a2d05e2e88d5a5db
        intents.otterize.com/service-name: ums-ums-open-policy-agent
      labels:
        app.kubernetes.io/instance: ums
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: ums-guardian-open-policy-agent
        app.kubernetes.io/version: 2.0.0
        helm.sh/chart: nubusGuardian-0.14.0
    spec:
      securityContext:
        fsGroup: 1000
        fsGroupChangePolicy: Always
      containers:
      - name: open-policy-agent
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          privileged: false
          readOnlyRootFilesystem: true
          runAsGroup: 1000
          runAsNonRoot: true
          runAsUser: 1000
          seccompProfile:
            type: RuntimeDefault
        image:
          registry.opencode.de/bmi/opendesk/components/supplier/univention/images-mirror/guardian-authorization-api-opa:2.0.0@sha256:56a92a08da5addb951a2b2df09974889295ddde8526e93ad40dd973de1052ad4
        imagePullPolicy: IfNotPresent
        envFrom:
        - configMapRef:
            name: ums-guardian-open-policy-agent
        ports:
        - name: http
          containerPort: 8181
          protocol: TCP
        livenessProbe:
          httpGet:
            path: /
            port: http
          initialDelaySeconds: 120
          timeoutSeconds: 3
          periodSeconds: 30
          failureThreshold: 3
          successThreshold: 1
        readinessProbe:
          httpGet:
            path: /
            port: http
          initialDelaySeconds: 30
          timeoutSeconds: 3
          periodSeconds: 15
          failureThreshold: 30
          successThreshold: 1
        resources:
          requests:
            cpu: 0.1
            memory: 256Mi
---
# Source: nubus/charts/nubusKeycloakExtensions/templates/deployment-handler.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ums-keycloak-extensions-handler
  labels:
    app.kubernetes.io/instance: ums
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: ums-keycloak-extensions-handler
    app.kubernetes.io/version: 21.0.1
    helm.sh/chart: nubusKeycloakExtensions-0.11.0
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: ums
      app.kubernetes.io/name: ums-keycloak-extensions-handler
  template:
    metadata:
      annotations:
        checksum/config: 5936f2d4cbdfc14feed3cbf0b183b088d5ce10cb33e36a7888c81ef06ca743e3
        intents.otterize.com/service-name: ums-keycloak-extensions-handler
      labels:
        app.kubernetes.io/instance: ums
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: ums-keycloak-extensions-handler
        app.kubernetes.io/version: 21.0.1
        helm.sh/chart: nubusKeycloakExtensions-0.11.0
    spec:
      serviceAccountName: ums-keycloak-extensions-handler
      containers:
      - name: keycloak-bfp-handler
        securityContext:
          seLinuxOptions:
          seccompProfile:
            type: RuntimeDefault
        image:
          registry.opencode.de/bmi/opendesk/components/supplier/univention/images-mirror/keycloak-handler:0.11.0@sha256:aaba6527f37a7302cf54b0a689a1c11cb439bdc471e01d101726a05902714b9c
        imagePullPolicy: IfNotPresent
        envFrom:
        - configMapRef:
            name: ums-keycloak-extensions-handler
        env:
        - name: KC_PASS
          valueFrom:
            secretKeyRef:
              name: ums-opendesk-keycloak-credentials
              key: admin_password
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: ums-keycloak-extensions-postgresql-opendesk-credentials
              key: umcKeycloakExtensionsDatabasePassword
        - name: SMTP_PASSWORD
          valueFrom:
            secretKeyRef:
              name: ums-keycloak-extensions-smtp-opendesk-credentials
              key: umcKeycloakExtensionsSmtpPassword
        ports:
        resources:
          requests:
            cpu: 0.1
            memory: 48Mi
---
# Source: nubus/charts/nubusKeycloakExtensions/templates/deployment-proxy.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ums-keycloak-extensions-proxy
  labels:
    app.kubernetes.io/instance: ums
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: ums-keycloak-extensions-proxy
    app.kubernetes.io/version: 21.0.1
    helm.sh/chart: nubusKeycloakExtensions-0.11.0
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: ums
      app.kubernetes.io/name: ums-keycloak-extensions-proxy
  template:
    metadata:
      annotations:
        checksum/config: 2d3d5a51fdac99f1ee102f64e107c8f43464910c8a3dda8d05b61020dd6094f8
        intents.otterize.com/service-name: ums-keycloak-extensions-proxy
      labels:
        app.kubernetes.io/instance: ums
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: ums-keycloak-extensions-proxy
        app.kubernetes.io/version: 21.0.1
        helm.sh/chart: nubusKeycloakExtensions-0.11.0
    spec:
      serviceAccountName: ums-keycloak-extensions-proxy
      containers:
      - name: keycloak-bfp-proxy
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          privileged: false
          readOnlyRootFilesystem: true
          runAsGroup: 1000
          runAsNonRoot: true
          runAsUser: 1000
          seLinuxOptions:
          seccompProfile:
            type: RuntimeDefault
        image:
          registry.opencode.de/bmi/opendesk/components/supplier/univention/images-mirror/keycloak-proxy:0.11.0@sha256:9b2079ed4078daee00d95ac2de4d72497131e699b967943db5be1c655048edb0
        imagePullPolicy: IfNotPresent
        envFrom:
        - configMapRef:
            name: ums-keycloak-extensions-proxy
        env:
        - name: KC_PASS
          valueFrom:
            secretKeyRef:
              name: ums-opendesk-keycloak-credentials
              key: admin_password
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: ums-keycloak-extensions-postgresql-opendesk-credentials
              key: umcKeycloakExtensionsDatabasePassword
        - name: CAPTCHA_SITE_KEY
          value: some_site_key
        - name: CAPTCHA_SECRET_KEY
          value: some_secret_key
        ports:
        - name: http
          containerPort: 8181
          protocol: TCP
        resources:
          requests:
            cpu: 0.1
            memory: 48Mi
---
# Source: nubus/charts/nubusLdapServer/templates/deployment-proxy.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ums-ldap-server-proxy
  namespace: tn-openbsw-opendesk
  labels:
    app.kubernetes.io/name: ldap-server
    helm.sh/chart: nubusLdapServer-0.25.2
    app.kubernetes.io/instance: ums
    app.kubernetes.io/managed-by: Helm
    ldap-server-type: proxy
  annotations:
    intents.otterize.com/service-name: ums-ldap-server
spec:
  replicas: 0
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: ldap-server
      app.kubernetes.io/instance: ums
      ldap-server-type: proxy
  template:
    metadata:
      annotations:
        checksum/configmap: ed47017dc7e6ea55e9189d6d47ba463ed4f7df3872b4f025c8946b5f730f4689
        checksum/configmap-proxy: 74556f6b8d345b0270648440b719332b388f098b0a690c2c98a75b1f75697c90
      labels:
        app.kubernetes.io/name: ldap-server
        helm.sh/chart: nubusLdapServer-0.25.2
        app.kubernetes.io/instance: ums
        app.kubernetes.io/managed-by: Helm
        ldap-server-type: proxy
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: ldap-server-type
                  operator: In
                  values:
                  - proxy
              topologyKey: kubernetes.io/hostname
            weight: 100
      securityContext:
        fsGroup: 102
        fsGroupChangePolicy: Always
        sysctls:
        - name: net.ipv4.ip_unprivileged_port_start
          value: '1'
      serviceAccountName: ums-ldap-server
      terminationGracePeriodSeconds: 5
      initContainers:
      - name: univention-compatibility
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsGroup: 102
          runAsNonRoot: true
          runAsUser: 101
          seccompProfile:
            type: RuntimeDefault
        image:
          registry.opencode.de/bmi/opendesk/components/supplier/univention/images-mirror/ldap-server:0.25.2@sha256:2b9d53f93a93d0f3a659c81c0e44596da8941bd83c8e1f7301a24e46ca06dba2
        imagePullPolicy: IfNotPresent
        command:
        - sh
        - -c
        - cp -a /usr/share/univention-ldap/* /target/usr/share/univention-ldap/; cp
          -a /etc/ldap/* /target/etc/ldap/; cp -a /etc/univention/* /target/etc/univention/
        volumeMounts:
        - name: usr-share-univention-ldap-volume
          mountPath: /target/usr/share/univention-ldap
        - name: etc-ldap-volume
          mountPath: /target/etc/ldap
        - name: etc-univention-volume
          mountPath: /target/etc/univention
        resources:
          requests:
            cpu: 10m
            memory: 16Mi
      - name: load-internal-plugins
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsGroup: 102
          runAsNonRoot: true
          runAsUser: 101
          seccompProfile:
            type: RuntimeDefault
        image:
          registry.opencode.de/bmi/opendesk/components/supplier/univention/images-mirror/ldap-server:0.25.2@sha256:2b9d53f93a93d0f3a659c81c0e44596da8941bd83c8e1f7301a24e46ca06dba2
        imagePullPolicy: IfNotPresent
        command:
        - sh
        - -c
        - |
          cp -av /var/lib/univention-ldap-local/local-schema /target/ldap-schema
          cp -av /etc/univention/templates/files/etc/ldap/slapd.conf.d /target/ldap-acls
        volumeMounts:
        - name: plugin-targets
          mountPath: /target
        resources:
          requests:
            cpu: 0.1
            memory: 256Mi
      - name: load-portal-extension
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsGroup: 102
          runAsNonRoot: true
          runAsUser: 101
          seccompProfile:
            type: RuntimeDefault
        image:
          registry.opencode.de/bmi/opendesk/components/supplier/univention/images-mirror/portal-extension:0.38.0@sha256:aa6ec6b99810e05655d98fa1192bc2eabb855335f7a04aa4cd96ed5b5645d736
        imagePullPolicy: IfNotPresent
        volumeMounts:
        - name: plugin-targets
          mountPath: /target
        resources:
          requests:
            cpu: 0.1
            memory: 256Mi
      - name: load-ox-extension
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsGroup: 102
          runAsNonRoot: true
          runAsUser: 101
          seccompProfile:
            type: RuntimeDefault
        image:
          registry.opencode.de/bmi/opendesk/components/supplier/univention/images-mirror/ox-extension:0.11.0@sha256:2cb5a9683b6ff81b995a5c71da52c2ff8177b662bb0be8f11e9cd0c6b48d8a11
        imagePullPolicy: IfNotPresent
        volumeMounts:
        - name: plugin-targets
          mountPath: /target
        resources:
          requests:
            cpu: 0.1
            memory: 256Mi
      - name: load-opendesk-extension
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsGroup: 102
          runAsNonRoot: true
          runAsUser: 101
          seccompProfile:
            type: RuntimeDefault
        image:
          registry.opencode.de/bmi/opendesk/components/platform-development/images/opendesk-nubus:1.7.4@sha256:23976c92c1b9f366b04e5e17fb52912b624720e3a97f5fee0da43afe75a6645e
        imagePullPolicy: IfNotPresent
        volumeMounts:
        - name: plugin-targets
          mountPath: /target
        resources:
          requests:
            cpu: 0.1
            memory: 256Mi
      - name: wait-for-secondary
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsGroup: 102
          runAsNonRoot: true
          runAsUser: 101
          seccompProfile:
            type: RuntimeDefault
        image:
          registry.opencode.de/bmi/opendesk/components/supplier/univention/images-mirror/ldap-server:0.25.2@sha256:2b9d53f93a93d0f3a659c81c0e44596da8941bd83c8e1f7301a24e46ca06dba2
        imagePullPolicy: IfNotPresent
        envFrom:
        - configMapRef:
            name: ums-ldap-server
        - configMapRef:
            name: ums-ldap-server-proxy
        env:
        - name: LDAP_CN_ADMIN_PW
          valueFrom:
            secretKeyRef:
              name: ums-ldap-server-credentials
              key: adminPassword
        command:
        - bash
        - -c
        - /scripts-proxy/wait-for-secondary.sh
        volumeMounts:
        - name: proxy-scripts-volume
          mountPath: /scripts-proxy
        resources:
          requests:
            cpu: 10m
            memory: 16Mi
      - name: wait-for-saml-metadata
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsGroup: 102
          runAsNonRoot: true
          runAsUser: 101
          seccompProfile:
            type: RuntimeDefault
        image:
          registry.opencode.de/bmi/opendesk/components/supplier/univention/images-mirror/wait-for-dependency:0.26.0@sha256:a31fde86bf21c597a31356fe492ab7e7a03a89282ca215eb7100763d6eb96b6b
        imagePullPolicy: IfNotPresent
        command:
        - /bin/bash
        - /scripts/wait-for-saml-metadata.sh
        envFrom:
        - configMapRef:
            name: ums-ldap-server
        volumeMounts:
        - name: scripts-volume
          mountPath: /scripts
        - name: config-map-ucr
          mountPath: /etc/univention/base.conf
          subPath: base.conf
        - name: config-map-ucr
          mountPath: /etc/univention/base-defaults.conf
          subPath: base-defaults.conf
      containers:
      - name: openldap
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsGroup: 102
          runAsNonRoot: true
          runAsUser: 101
          seccompProfile:
            type: RuntimeDefault
        image:
          registry.opencode.de/bmi/opendesk/components/supplier/univention/images-mirror/ldap-server:0.25.2@sha256:2b9d53f93a93d0f3a659c81c0e44596da8941bd83c8e1f7301a24e46ca06dba2
        imagePullPolicy: IfNotPresent
        envFrom:
        - configMapRef:
            name: ums-ldap-server
        - configMapRef:
            name: ums-ldap-server-proxy
        env:
        - name: LDAP_CN_ADMIN_PW
          valueFrom:
            secretKeyRef:
              name: ums-ldap-server-credentials
              key: adminPassword
        livenessProbe:
          failureThreshold: 10
          initialDelaySeconds: 15
          periodSeconds: 20
          successThreshold: 1
          tcpSocket:
            port: 389
          timeoutSeconds: 5
        readinessProbe:
          failureThreshold: 10
          initialDelaySeconds: 15
          periodSeconds: 20
          successThreshold: 1
          tcpSocket:
            port: 389
          timeoutSeconds: 5
        startupProbe:
          failureThreshold: 10
          initialDelaySeconds: 15
          periodSeconds: 20
          successThreshold: 1
          tcpSocket:
            port: 389
          timeoutSeconds: 5
        ports:
        - name: ldap
          containerPort: 389
          protocol: TCP
        - name: ldaps
          containerPort: 636
          protocol: TCP
        resources:
          requests:
            cpu: 10m
            memory: 16Mi
        volumeMounts:
        - name: usr-share-univention-ldap-volume
          mountPath: /usr/share/univention-ldap
        - name: usr-share-saml-volume
          mountPath: /usr/share/saml
        - name: etc-ldap-volume
          mountPath: /etc/ldap
        - name: etc-univention-volume
          mountPath: /etc/univention
        - name: proxy-config-templates-volume
          mountPath: /config/templates
        - name: proxy-scripts-volume
          mountPath: /entrypoint.d/90-generate-slapd-conf.sh
          subPath: generate-slapd.conf.sh
        - name: plugin-targets
          mountPath: /var/lib/univention-ldap-local/local-schema
          subPath: ldap-schema
        - name: plugin-targets
          mountPath: /etc/univention/templates/files/etc/ldap/slapd.conf.d
          subPath: ldap-acls
        - name: var-run-volume
          mountPath: /var/run/slapd
        - name: config-map-ucr
          mountPath: /etc/univention/base.conf
          subPath: base.conf
        - name: config-map-ucr
          mountPath: /etc/univention/base-defaults.conf
          subPath: base-defaults.conf
        - name: data-volume
          mountPath: /var/lib/univention-ldap
        - mountPath: /entrypoint.d/30-purge.sh
          name: migration-scripts
          subPath: 30-purge.sh
        - mountPath: /entrypoint.d/95-slapadd-24-ldiff.sh
          name: migration-scripts
          subPath: 95-slapadd-24-ldif.sh
      volumes:
      - name: data-volume
        emptyDir: {}
      - name: var-run-volume
        emptyDir: {}
      - name: usr-share-univention-ldap-volume
        emptyDir: {}
      - name: usr-share-saml-volume
        emptyDir: {}
      - name: etc-ldap-volume
        emptyDir: {}
      - name: etc-univention-volume
        emptyDir: {}
      - name: proxy-scripts-volume
        configMap:
          name: ums-ldap-server-proxy-scripts
          defaultMode: 0555
      - name: proxy-config-templates-volume
        configMap:
          name: ums-ldap-server-proxy-config-templates
      - name: scripts-volume
        configMap:
          name: ums-ldap-server-scripts
          defaultMode: 0555
      - name: plugin-targets
        emptyDir: {}
      - name: config-map-ucr
        configMap:
          name: ums-stack-data-ums-ucr
      - name: migration-scripts
        secret:
          defaultMode: 365
          secretName: ums-ldap-server-migration
---
# Source: nubus/charts/nubusNotificationsApi/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ums-notifications-api
  namespace: tn-openbsw-opendesk
  labels:
    app.kubernetes.io/name: notifications-api
    helm.sh/chart: nubusNotificationsApi-0.42.2
    app.kubernetes.io/instance: ums
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 1.16.0
  annotations:
    intents.otterize.com/service-name: ums-notifications-api
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: notifications-api
      app.kubernetes.io/instance: ums
  template:
    metadata:
      annotations:
        checksum/configmap: 7ee9a265a1c5a872f84a9b8c4f71c94be7376aceff9254f7e84b7518766a0140
      labels:
        app.kubernetes.io/name: notifications-api
        helm.sh/chart: nubusNotificationsApi-0.42.2
        app.kubernetes.io/instance: ums
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/version: 1.16.0
    spec:
      securityContext:
        fsGroup: 1000
        fsGroupChangePolicy: Always
        sysctls: []
      serviceAccountName: ums-notifications-api
      terminationGracePeriodSeconds: 5
      containers:
      - name: notification-api
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsGroup: 1000
          runAsNonRoot: true
          runAsUser: 1000
          seLinuxOptions:
          seccompProfile:
            type: RuntimeDefault
        image:
          registry.opencode.de/bmi/opendesk/components/supplier/univention/images-mirror/notifications-api:0.42.2@sha256:ff744b2d5388bfc413a4d25108f37ba086d2a08cb14ceb02d17e93de003a1078
        imagePullPolicy: IfNotPresent
        env:
        - name: DB_USERNAME
          value: notificationsapi_user
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: ums-notifications-api-postgresql-opendesk-credentials
              key: password
        - name: DATABASE
          value: notificationsapi
        - name: DATABASE_URL
          value: postgresql://$(DB_USERNAME):$(DB_PASSWORD)@postgresql:5432/$(DATABASE)
        envFrom:
        - configMapRef:
            name: ums-notifications-api
        livenessProbe:
          failureThreshold: 10
          initialDelaySeconds: 15
          periodSeconds: 20
          successThreshold: 1
          tcpSocket:
            port: 8080
          timeoutSeconds: 5
        readinessProbe:
          failureThreshold: 10
          initialDelaySeconds: 15
          periodSeconds: 20
          successThreshold: 1
          tcpSocket:
            port: 8080
          timeoutSeconds: 5
        startupProbe:
          failureThreshold: 10
          initialDelaySeconds: 15
          periodSeconds: 20
          successThreshold: 1
          tcpSocket:
            port: 8080
          timeoutSeconds: 5
        ports:
        - name: http
          containerPort: 8080
          protocol: TCP
        resources:
          requests:
            cpu: 0.1
            memory: 256Mi
        volumeMounts:
      volumes:
---
# Source: nubus/charts/nubusPortalFrontend/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ums-portal-frontend
  namespace: tn-openbsw-opendesk
  labels:
    app.kubernetes.io/name: portal-frontend
    helm.sh/chart: nubusPortalFrontend-0.42.2
    app.kubernetes.io/instance: ums
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 1.16.0
  annotations:
    intents.otterize.com/service-name: ums-portal-frontend
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: portal-frontend
      app.kubernetes.io/instance: ums
  template:
    metadata:
      annotations:
        checksum/configmap: 565734614dae43cfba57ae70455622b7cf1de28c87161911d8cbfe1d114d59e5
      labels:
        app.kubernetes.io/name: portal-frontend
        helm.sh/chart: nubusPortalFrontend-0.42.2
        app.kubernetes.io/instance: ums
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/version: 1.16.0
    spec:
      securityContext:
        fsGroup: 1000
        fsGroupChangePolicy: Always
        sysctls:
        - name: net.ipv4.ip_unprivileged_port_start
          value: '1'
      serviceAccountName: ums-portal-frontend
      terminationGracePeriodSeconds: 5
      containers:
      - name: portal-frontend
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsGroup: 1000
          runAsNonRoot: true
          runAsUser: 1000
          seLinuxOptions:
          seccompProfile:
            type: RuntimeDefault
        image:
          registry.opencode.de/bmi/opendesk/components/platform-development/images/opendesk-nubus-portal-update:1.8.0@sha256:5ae4d38d67aab0678e227d45737a4113382015225ef317dde1fbe8574689449e
        imagePullPolicy: IfNotPresent
        envFrom:
        - configMapRef:
            name: ums-portal-frontend
        livenessProbe:
          failureThreshold: 10
          initialDelaySeconds: 15
          periodSeconds: 20
          successThreshold: 1
          tcpSocket:
            port: 80
          timeoutSeconds: 5
        readinessProbe:
          failureThreshold: 10
          initialDelaySeconds: 15
          periodSeconds: 20
          successThreshold: 1
          tcpSocket:
            port: 80
          timeoutSeconds: 5
        startupProbe:
          failureThreshold: 10
          initialDelaySeconds: 15
          periodSeconds: 20
          successThreshold: 1
          tcpSocket:
            port: 80
          timeoutSeconds: 5
        ports:
        - name: http
          containerPort: 80
          protocol: TCP
        resources:
          requests:
            cpu: 0.1
            memory: 256Mi
        volumeMounts:
        - name: var-run-volume
          mountPath: /var/run
        - name: var-lib-nginx-volume
          mountPath: /var/lib/nginx
        - name: ums-portal-frontend-nginx
          subPath: nginx.conf
          mountPath: /etc/nginx/nginx.conf
        - name: ums-portal-frontend-branding
          mountPath: /var/www/html/favicon.ico
          subPath: favicon.ico
        - name: ums-portal-frontend-branding
          mountPath: /var/www/html/css/custom.css
          subPath: custom.css
        - name: ums-portal-frontend-branding
          mountPath: /var/www/html/icons/logo.svg
          subPath: logo.svg
        - name: ums-portal-frontend-branding
          mountPath: /var/www/html/custom/portal_background_image.svg
          subPath: portal_background_image.svg
      volumes:
      - name: var-run-volume
        emptyDir: {}
      - name: var-lib-nginx-volume
        emptyDir: {}
      - name: ums-portal-frontend-nginx
        configMap:
          name: ums-portal-frontend-nginx
          defaultMode: 420
      - name: ums-portal-frontend-branding
        configMap:
          name: ums-portal-frontend-branding
---
# Source: nubus/charts/nubusPortalServer/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ums-portal-server
  namespace: tn-openbsw-opendesk
  labels:
    app.kubernetes.io/name: portal-server
    helm.sh/chart: nubusPortalServer-0.42.2
    app.kubernetes.io/instance: ums
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 1.16.0
  annotations:
    intents.otterize.com/service-name: ums-portal-server
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: portal-server
      app.kubernetes.io/instance: ums
  template:
    metadata:
      annotations:
        checksum/configmap: 1bcff58adb205f24b11f8fd7e6ce9e8efc2ce67a13b8d6bdeb2bf12720697706
      labels:
        app.kubernetes.io/name: portal-server
        helm.sh/chart: nubusPortalServer-0.42.2
        app.kubernetes.io/instance: ums
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/version: 1.16.0
    spec:
      securityContext:
        fsGroup: 1000
        fsGroupChangePolicy: Always
        sysctls:
        - name: net.ipv4.ip_unprivileged_port_start
          value: '1'
      serviceAccountName: ums-portal-server
      terminationGracePeriodSeconds: 5
      initContainers:
      - name: copy-files
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsGroup: 1000
          runAsNonRoot: true
          runAsUser: 1000
          seLinuxOptions:
          seccompProfile:
            type: RuntimeDefault
        image:
          registry.opencode.de/bmi/opendesk/components/supplier/univention/images-mirror/portal-server:0.42.2@sha256:00b45c354c421ad6bc0ee046444cc0a2caf633787c770cad60e7c06c4307a248
        imagePullPolicy: IfNotPresent
        command:
        - /bin/bash
        - -c
        - |
          set -euxo pipefail
          cp -a /usr/share/univention-portal/* /target/usr/share/univention-portal/
        volumeMounts:
        - name: usr-share-univention-portal-volume
          mountPath: /target/usr/share/univention-portal
        - name: tmp-volume
          mountPath: /tmp
      containers:
      - name: portal-server
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsGroup: 1000
          runAsNonRoot: true
          runAsUser: 1000
          seLinuxOptions:
          seccompProfile:
            type: RuntimeDefault
        image:
          registry.opencode.de/bmi/opendesk/components/supplier/univention/images-mirror/portal-server:0.42.2@sha256:00b45c354c421ad6bc0ee046444cc0a2caf633787c770cad60e7c06c4307a248
        imagePullPolicy: IfNotPresent
        env:
        - name: OBJECT_STORAGE_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: ums-portal-server-minio-opendesk-credentials
              key: access-key-id
        - name: OBJECT_STORAGE_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: ums-portal-server-minio-opendesk-credentials
              key: secret-key-id
        envFrom:
        - configMapRef:
            name: ums-portal-server
        livenessProbe:
          failureThreshold: 10
          initialDelaySeconds: 15
          periodSeconds: 20
          successThreshold: 1
          tcpSocket:
            port: 80
          timeoutSeconds: 5
        readinessProbe:
          failureThreshold: 10
          initialDelaySeconds: 15
          periodSeconds: 20
          successThreshold: 1
          tcpSocket:
            port: 80
          timeoutSeconds: 5
        startupProbe:
          failureThreshold: 10
          initialDelaySeconds: 15
          periodSeconds: 20
          successThreshold: 1
          tcpSocket:
            port: 80
          timeoutSeconds: 5
        ports:
        - name: http
          containerPort: 80
          protocol: TCP
        resources:
          requests:
            cpu: 0.1
            memory: 256Mi
        volumeMounts:
        - name: usr-lib-univention-portal-config-volume
          mountPath: /usr/lib/univention-portal/config
        - name: usr-share-univention-portal-volume
          mountPath: /usr/share/univention-portal
        - name: authenticator-secret
          mountPath: /var/secrets/authenticator.secret
          subPath: authenticator.secret
        - name: tmp-volume
          mountPath: /tmp
      volumes:
      - name: usr-lib-univention-portal-config-volume
        emptyDir: {}
      - name: usr-share-univention-portal-volume
        emptyDir: {}
      - name: authenticator-secret
        secret:
          secretName: ums-opendesk-portal-server-central-navigation
      - name: tmp-volume
        emptyDir: {}
---
# Source: nubus/charts/nubusProvisioning/templates/deployment-dispatcher.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ums-provisioning-dispatcher
  namespace: tn-openbsw-opendesk
  labels:
    app.kubernetes.io/instance: ums
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: ums-provisioning-dispatcher
    helm.sh/chart: nubusProvisioning-0.44.0
  annotations:
    intents.otterize.com/service-name: ums-provisioning-dispatcher
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: ums
      app.kubernetes.io/name: ums-provisioning-dispatcher
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        checksum/configmap: 917567cd1bf78b07341165ced3d60f9dafa444131455805ae1605e064a9a10c7
      labels:
        app.kubernetes.io/instance: ums
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: ums-provisioning-dispatcher
        helm.sh/chart: nubusProvisioning-0.44.0
    spec:
      securityContext:
        fsGroup: 1000
        fsGroupChangePolicy: Always
        sysctls:
        - name: net.ipv4.ip_unprivileged_port_start
          value: '1'
      serviceAccountName: ums-provisioning
      terminationGracePeriodSeconds: 5
      initContainers:
      - name: wait-for-nats
        command: [poetry, run, python, /scripts/wait-for-nats.py]
        image:
          registry.opencode.de/bmi/opendesk/components/supplier/univention/images-mirror/provisioning-events-and-consumer-api:0.44.0@sha256:b87218dcd2db7539b786ff479cde9620939274d4365721531dc6075b6fcc19ea
        imagePullPolicy: IfNotPresent
        envFrom:
        - configMapRef:
            name: ums-provisioning-common
        - configMapRef:
            name: ums-provisioning-api
        - secretRef:
            name: ums-provisioning-api-credentials
        volumeMounts:
        - name: wait-for-nats
          mountPath: /scripts
        resources:
          requests:
            cpu: 10m
            memory: 16Mi
      containers:
      - name: dispatcher
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsGroup: 1000
          runAsNonRoot: true
          runAsUser: 1000
          seLinuxOptions:
          seccompProfile:
            type: RuntimeDefault
        image:
          registry.opencode.de/bmi/opendesk/components/supplier/univention/images-mirror/provisioning-dispatcher:0.44.0@sha256:b7b9ee59c008bd8850bcfb6cb009ae47e6be43ed117116928374c721711b09ca
        imagePullPolicy: IfNotPresent
        envFrom:
        - configMapRef:
            name: ums-provisioning-common
        - configMapRef:
            name: ums-provisioning-dispatcher
        - secretRef:
            name: ums-provisioning-dispatcher-credentials
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - |
              exit 0
          failureThreshold: 10
          initialDelaySeconds: 15
          periodSeconds: 20
          successThreshold: 1
          timeoutSeconds: 5
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - |
              exit 0
          failureThreshold: 10
          initialDelaySeconds: 15
          periodSeconds: 20
          successThreshold: 1
          timeoutSeconds: 5
        startupProbe:
          exec:
            command:
            - sh
            - -c
            - |
              exit 0
          failureThreshold: 10
          initialDelaySeconds: 15
          periodSeconds: 20
          successThreshold: 1
          timeoutSeconds: 5
        resources:
          requests:
            cpu: 10m
            memory: 16Mi
      volumes:
      - name: wait-for-nats
        configMap:
          name: ums-provisioning-api
---
# Source: nubus/charts/nubusProvisioning/templates/deployment-events-and-consumer-api.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ums-provisioning-api
  namespace: tn-openbsw-opendesk
  labels:
    app.kubernetes.io/instance: ums
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: ums-provisioning-api
    helm.sh/chart: nubusProvisioning-0.44.0
  annotations:
    intents.otterize.com/service-name: ums-provisioning-api
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: ums
      app.kubernetes.io/name: ums-provisioning-api
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        checksum/configmap: 917567cd1bf78b07341165ced3d60f9dafa444131455805ae1605e064a9a10c7
      labels:
        app.kubernetes.io/instance: ums
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: ums-provisioning-api
        helm.sh/chart: nubusProvisioning-0.44.0
    spec:
      securityContext:
        fsGroup: 1000
        fsGroupChangePolicy: Always
        sysctls:
        - name: net.ipv4.ip_unprivileged_port_start
          value: '1'
      serviceAccountName: ums-provisioning
      terminationGracePeriodSeconds: 5
      initContainers:
      - name: wait-for-nats
        command: [poetry, run, python, /scripts/wait-for-nats.py]
        image:
          registry.opencode.de/bmi/opendesk/components/supplier/univention/images-mirror/provisioning-events-and-consumer-api:0.44.0@sha256:b87218dcd2db7539b786ff479cde9620939274d4365721531dc6075b6fcc19ea
        imagePullPolicy: IfNotPresent
        envFrom:
        - configMapRef:
            name: ums-provisioning-common
        - configMapRef:
            name: ums-provisioning-api
        - secretRef:
            name: ums-provisioning-api-credentials
        volumeMounts:
        - name: wait-for-nats
          mountPath: /scripts
        resources:
          requests:
            cpu: 10m
            memory: 16Mi
      containers:
      - name: api
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsGroup: 1000
          runAsNonRoot: true
          runAsUser: 1000
          seLinuxOptions:
          seccompProfile:
            type: RuntimeDefault
        image:
          registry.opencode.de/bmi/opendesk/components/supplier/univention/images-mirror/provisioning-events-and-consumer-api:0.44.0@sha256:b87218dcd2db7539b786ff479cde9620939274d4365721531dc6075b6fcc19ea
        imagePullPolicy: IfNotPresent
        envFrom:
        - configMapRef:
            name: ums-provisioning-common
        - configMapRef:
            name: ums-provisioning-api
        - secretRef:
            name: ums-provisioning-api-credentials
        livenessProbe:
          failureThreshold: 10
          initialDelaySeconds: 15
          periodSeconds: 20
          successThreshold: 1
          tcpSocket:
            port: 7777
          timeoutSeconds: 5
        readinessProbe:
          failureThreshold: 10
          initialDelaySeconds: 15
          periodSeconds: 20
          successThreshold: 1
          tcpSocket:
            port: 7777
          timeoutSeconds: 5
        startupProbe:
          failureThreshold: 10
          initialDelaySeconds: 15
          periodSeconds: 20
          successThreshold: 1
          tcpSocket:
            port: 7777
        ports:
        - name: http
          containerPort: 7777
          protocol: TCP
        resources:
          requests:
            cpu: 10m
            memory: 16Mi
      volumes:
      - name: wait-for-nats
        configMap:
          name: ums-provisioning-api
---
# Source: nubus/charts/nubusProvisioning/templates/deployment-prefill.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ums-provisioning-prefill
  namespace: tn-openbsw-opendesk
  labels:
    app.kubernetes.io/instance: ums
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: ums-provisioning-prefill
    helm.sh/chart: nubusProvisioning-0.44.0
  annotations:
    intents.otterize.com/service-name: ums-provisioning-prefill
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: ums
      app.kubernetes.io/name: ums-provisioning-prefill
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        checksum/configmap: 917567cd1bf78b07341165ced3d60f9dafa444131455805ae1605e064a9a10c7
      labels:
        app.kubernetes.io/instance: ums
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: ums-provisioning-prefill
        helm.sh/chart: nubusProvisioning-0.44.0
    spec:
      securityContext:
        fsGroup: 1000
        fsGroupChangePolicy: Always
        sysctls:
        - name: net.ipv4.ip_unprivileged_port_start
          value: '1'
      serviceAccountName: ums-provisioning
      terminationGracePeriodSeconds: 5
      initContainers:
      - name: wait-for-udm
        command: [/usr/bin/python3, /scripts/wait-for-udm.py]
        image:
          registry.opencode.de/bmi/opendesk/components/supplier/univention/images-mirror/provisioning-prefill:0.44.0@sha256:86201a277164ceb9a8df3fd4c7fc28b0185cadf7962a937d88d9feb576e77da2
        imagePullPolicy: IfNotPresent
        envFrom:
        - configMapRef:
            name: ums-provisioning-prefill
        - secretRef:
            name: ums-provisioning-prefill-credentials
        volumeMounts:
        - name: wait-for-udm
          mountPath: /scripts
        resources:
          requests:
            cpu: 10m
            memory: 16Mi
      - name: wait-for-api-to-start
        image:
          registry.opencode.de/bmi/opendesk/components/supplier/univention/images-mirror/wait-for-dependency:0.26.0@sha256:a31fde86bf21c597a31356fe492ab7e7a03a89282ca215eb7100763d6eb96b6b
        imagePullPolicy: IfNotPresent
        envFrom:
        - configMapRef:
            name: ums-provisioning-common
        command: [bash, -c, 'set -euo pipefail; until curl -s http://${PROVISIONING_API_HOST}:${PROVISIONING_API_PORT}/v1/subscriptions
            > /dev/null || [ $? -ne 0 ]; do echo Waiting for api; sleep 2; done;']
        resources:
          requests:
            cpu: 0.1
            memory: 64Mi
      containers:
      - name: prefill
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsGroup: 1000
          runAsNonRoot: true
          runAsUser: 1000
          seLinuxOptions:
          seccompProfile:
            type: RuntimeDefault
        image:
          registry.opencode.de/bmi/opendesk/components/supplier/univention/images-mirror/provisioning-prefill:0.44.0@sha256:86201a277164ceb9a8df3fd4c7fc28b0185cadf7962a937d88d9feb576e77da2
        imagePullPolicy: IfNotPresent
        envFrom:
        - configMapRef:
            name: ums-provisioning-common
        - configMapRef:
            name: ums-provisioning-prefill
        - secretRef:
            name: ums-provisioning-prefill-credentials
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - |
              exit 0
          failureThreshold: 10
          initialDelaySeconds: 15
          periodSeconds: 20
          successThreshold: 1
          timeoutSeconds: 5
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - |
              exit 0
          failureThreshold: 10
          initialDelaySeconds: 15
          periodSeconds: 20
          successThreshold: 1
          timeoutSeconds: 5
        startupProbe:
          exec:
            command:
            - sh
            - -c
            - |
              exit 0
          failureThreshold: 10
          initialDelaySeconds: 15
          periodSeconds: 20
          successThreshold: 1
          timeoutSeconds: 5
        resources:
          requests:
            cpu: 10m
            memory: 16Mi
      volumes:
      - name: wait-for-udm
        configMap:
          name: ums-provisioning-prefill
---
# Source: nubus/charts/nubusProvisioning/templates/deployment-udm-transformer.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ums-provisioning-udm-transformer
  namespace: tn-openbsw-opendesk
  labels:
    app.kubernetes.io/instance: ums
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: ums-provisioning-udm-transformer
    helm.sh/chart: nubusProvisioning-0.44.0
  annotations:
    intents.otterize.com/service-name: ums-provisioning-udm-transformer
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: ums
      app.kubernetes.io/name: ums-provisioning-udm-transformer
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        checksum/configmap: 917567cd1bf78b07341165ced3d60f9dafa444131455805ae1605e064a9a10c7
      labels:
        app.kubernetes.io/instance: ums
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: ums-provisioning-udm-transformer
        helm.sh/chart: nubusProvisioning-0.44.0
    spec:
      securityContext:
        fsGroup: 1000
        fsGroupChangePolicy: Always
        sysctls:
        - name: net.ipv4.ip_unprivileged_port_start
          value: '1'
      serviceAccountName: ums-provisioning
      terminationGracePeriodSeconds: 5
      initContainers:
      - name: load-internal-plugins
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsGroup: 1000
          runAsNonRoot: true
          runAsUser: 1000
          seLinuxOptions:
          seccompProfile:
            type: RuntimeDefault
        image:
          registry.opencode.de/bmi/opendesk/components/supplier/univention/images-mirror/provisioning-udm-transformer:0.44.0@sha256:1aca5eaa575ab0ee7b9fa128de30050b748a182b53b7bcdc6293b58187f5416a
        imagePullPolicy: IfNotPresent
        command:
        - sh
        - -c
        - |
          cp -av /usr/lib/python3/dist-packages/univention/udm/modules /target/udm-modules
          cp -av /usr/lib/python3/dist-packages/univention/admin/hooks.d /target/udm-hooks.d
          cp -av /usr/lib/python3/dist-packages/univention/admin/syntax.d /target/udm-syntax.d
          cp -av /usr/lib/python3/dist-packages/univention/admin/handlers /target/udm-handlers
        volumeMounts:
        - name: plugin-targets
          mountPath: /target
        resources:
      - name: load-portal-extension
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsGroup: 1000
          runAsNonRoot: true
          runAsUser: 1000
          seLinuxOptions:
          seccompProfile:
            type: RuntimeDefault
        image:
          registry.opencode.de/bmi/opendesk/components/supplier/univention/images-mirror/portal-extension:0.38.0@sha256:aa6ec6b99810e05655d98fa1192bc2eabb855335f7a04aa4cd96ed5b5645d736
        imagePullPolicy: IfNotPresent
        volumeMounts:
        - name: plugin-targets
          mountPath: /target
        resources:
      - name: load-ox-extension
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsGroup: 1000
          runAsNonRoot: true
          runAsUser: 1000
          seLinuxOptions:
          seccompProfile:
            type: RuntimeDefault
        image:
          registry.opencode.de/bmi/opendesk/components/supplier/univention/images-mirror/ox-extension:0.11.0@sha256:2cb5a9683b6ff81b995a5c71da52c2ff8177b662bb0be8f11e9cd0c6b48d8a11
        imagePullPolicy: IfNotPresent
        volumeMounts:
        - name: plugin-targets
          mountPath: /target
        resources:
      - name: load-opendesk-extension
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsGroup: 1000
          runAsNonRoot: true
          runAsUser: 1000
          seLinuxOptions:
          seccompProfile:
            type: RuntimeDefault
        image:
          registry.opencode.de/bmi/opendesk/components/platform-development/images/opendesk-nubus:1.7.4@sha256:23976c92c1b9f366b04e5e17fb52912b624720e3a97f5fee0da43afe75a6645e
        imagePullPolicy: IfNotPresent
        volumeMounts:
        - name: plugin-targets
          mountPath: /target
        resources:
      - name: wait-for-nats
        command: [poetry, run, python, /scripts/wait-for-nats.py]
        image:
          registry.opencode.de/bmi/opendesk/components/supplier/univention/images-mirror/provisioning-events-and-consumer-api:0.44.0@sha256:b87218dcd2db7539b786ff479cde9620939274d4365721531dc6075b6fcc19ea
        imagePullPolicy: IfNotPresent
        envFrom:
        - configMapRef:
            name: ums-provisioning-common
        - configMapRef:
            name: ums-provisioning-api
        - secretRef:
            name: ums-provisioning-api-credentials
        volumeMounts:
        - name: wait-for-nats
          mountPath: /scripts
        resources:
          requests:
            cpu: 10m
            memory: 16Mi
      containers:
      - name: udm-transformer
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsGroup: 1000
          runAsNonRoot: true
          runAsUser: 1000
          seLinuxOptions:
          seccompProfile:
            type: RuntimeDefault
        image:
          registry.opencode.de/bmi/opendesk/components/supplier/univention/images-mirror/provisioning-udm-transformer:0.44.0@sha256:1aca5eaa575ab0ee7b9fa128de30050b748a182b53b7bcdc6293b58187f5416a
        imagePullPolicy: IfNotPresent
        envFrom:
        - configMapRef:
            name: ums-provisioning-common
        - configMapRef:
            name: ums-provisioning-udm-transformer
        - secretRef:
            name: ums-provisioning-udm-transformer-api-credentials
        - secretRef:
            name: ums-provisioning-udm-transformer-nats-credentials
        - secretRef:
            name: ums-provisioning-udm-transformer-ldap-credentials
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - |
              exit 0
          failureThreshold: 10
          initialDelaySeconds: 15
          periodSeconds: 20
          successThreshold: 1
          timeoutSeconds: 5
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - |
              exit 0
          failureThreshold: 10
          initialDelaySeconds: 15
          periodSeconds: 20
          successThreshold: 1
          timeoutSeconds: 5
        startupProbe:
          exec:
            command:
            - sh
            - -c
            - |
              exit 0
          failureThreshold: 10
          initialDelaySeconds: 15
          periodSeconds: 20
          successThreshold: 1
          timeoutSeconds: 5
        resources:
          requests:
            cpu: 0.1
            memory: 64Mi
        volumeMounts:
        - name: config-map-ucr
          mountPath: /etc/univention/base.conf
          subPath: base.conf
        - name: config-map-ucr
          mountPath: /etc/univention/base-defaults.conf
          subPath: base-defaults.conf
        - name: plugin-targets
          mountPath: /usr/lib/python3/dist-packages/univention/udm/modules
          subPath: udm-modules
        - name: plugin-targets
          mountPath: /usr/lib/python3/dist-packages/univention/admin/hooks.d
          subPath: udm-hooks.d
        - name: plugin-targets
          mountPath: /usr/lib/python3/dist-packages/univention/admin/syntax.d
          subPath: udm-syntax.d
        - name: plugin-targets
          mountPath: /usr/lib/python3/dist-packages/univention/admin/handlers
          subPath: udm-handlers
      volumes:
      - name: wait-for-nats
        configMap:
          name: ums-provisioning-api
      - name: config-map-ucr
        configMap:
          name: ums-stack-data-ums-ucr
      - name: plugin-targets
        emptyDir: {}
---
# Source: nubus/charts/nubusSelfServiceConsumer/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ums-selfservice-listener
  labels:
    app.kubernetes.io/instance: ums
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: ums-selfservice-listener
    app.kubernetes.io/version: 0.0.1
    helm.sh/chart: nubusSelfServiceConsumer-0.11.3
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: ums
      app.kubernetes.io/name: ums-selfservice-listener
  template:
    metadata:
      annotations:
        checksum/configmap: 149a77de8a55badb9337f7adaacdebb5f5565968ddc379e7aebc1f60ef4ddbba
        intents.otterize.com/service-name: ums-selfservice-listener
      labels:
        app.kubernetes.io/instance: ums
        app.kubernetes.io/name: ums-selfservice-listener
    spec:
      serviceAccountName: ums-selfservice-listener
      terminationGracePeriodSeconds: 5
      initContainers:
      - name: wait-for-provisioning-api
        image:
          registry.opencode.de/bmi/opendesk/components/supplier/univention/images-mirror/wait-for-dependency:0.26.0@sha256:a31fde86bf21c597a31356fe492ab7e7a03a89282ca215eb7100763d6eb96b6b
        imagePullPolicy: IfNotPresent
        command: [/bin/bash, /scripts/wait-for-provisioning-api.sh]
        resources:
        volumeMounts:
        - name: scripts
          mountPath: /scripts
        env:
        - name: PROVISIONING_API_PASSWORD
          valueFrom:
            secretKeyRef:
              name: ums-selfservice-listener-credentials
              key: PROVISIONING_API_PASSWORD
        envFrom:
        - configMapRef:
            name: ums-selfservice-listener-common
      containers:
      - name: selfservice-listener
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsGroup: 1000
          runAsNonRoot: true
          runAsUser: 1000
          seLinuxOptions:
          seccompProfile:
            type: RuntimeDefault
        image:
          registry.opencode.de/bmi/opendesk/components/supplier/univention/images-mirror/selfservice-invitation:0.11.3@sha256:cd51246ae9436426bd7ee12bc85466cafc18a43ba05ab3ede35dfcf3a012656f
        imagePullPolicy: IfNotPresent
        command:
        - /bin/bash
        - -c
        - |
          set -euxo pipefail
          poetry run python3 -m invitation
        env:
        - name: PROVISIONING_API_PASSWORD
          valueFrom:
            secretKeyRef:
              name: ums-selfservice-listener-credentials
              key: PROVISIONING_API_PASSWORD
        envFrom:
        - configMapRef:
            name: ums-selfservice-listener-common
        livenessProbe:
        readinessProbe:
        startupProbe:
        resources:
          requests:
            cpu: 0.1
            memory: 256Mi
        volumeMounts:
      volumes:
      - name: scripts
        configMap:
          defaultMode: 0555
          name: ums-selfservice-listener-scripts
---
# Source: nubus/charts/nubusUdmRestApi/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ums-udm-rest-api
  namespace: tn-openbsw-opendesk
  labels:
    app.kubernetes.io/name: udm-rest-api
    helm.sh/chart: nubusUdmRestApi-0.25.1
    app.kubernetes.io/instance: ums
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 12.0.7
  annotations:
    intents.otterize.com/service-name: ums-udm-rest-api
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: udm-rest-api
      app.kubernetes.io/instance: ums
  template:
    metadata:
      annotations:
        checksum/configmap: f89d4c2bfc00dfccbd514228d03c0ff460b1bbaf3083c943840bacee06a13a44
      labels:
        app.kubernetes.io/name: udm-rest-api
        helm.sh/chart: nubusUdmRestApi-0.25.1
        app.kubernetes.io/instance: ums
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/version: 12.0.7
    spec:
      securityContext:
        fsGroup: 1000
        fsGroupChangePolicy: Always
      serviceAccountName: ums-udm-rest-api
      terminationGracePeriodSeconds: 5
      initContainers:
      - name: univention-compatibility
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsGroup: 1000
          runAsNonRoot: true
          runAsUser: 1000
          seLinuxOptions:
          seccompProfile:
            type: RuntimeDefault
        image:
          registry.opencode.de/bmi/opendesk/components/supplier/univention/images-mirror/udm-rest-api:0.25.1@sha256:0078b16ecf5539e6f3c7e6d5a7ddb57937d3d2d143754fbd6d439a3a8741abe8
        imagePullPolicy: IfNotPresent
        command:
        - sh
        - -c
        - cp -a /etc/univention/* /target/etc/univention/; cp -a /usr/lib/python3/*
          /target/usr/lib/python3/;
        volumeMounts:
        - name: etc-univention-volume
          mountPath: /target/etc/univention
        - name: usr-lib-python3-volume
          mountPath: /target/usr/lib/python3
        resources:
          requests:
            cpu: 0.1
            memory: 256Mi
      - name: ucr-commit
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsGroup: 1000
          runAsNonRoot: true
          runAsUser: 1000
          seLinuxOptions:
          seccompProfile:
            type: RuntimeDefault
        image:
          registry.opencode.de/bmi/opendesk/components/supplier/univention/images-mirror/udm-rest-api:0.25.1@sha256:0078b16ecf5539e6f3c7e6d5a7ddb57937d3d2d143754fbd6d439a3a8741abe8
        imagePullPolicy: IfNotPresent
        command:
        - sh
        - -c
        - ucr commit /etc/univention/directory/reports/config.ini
        volumeMounts:
        - name: etc-univention-volume
          mountPath: /etc/univention
        - name: var-cache-univention-config-volume
          mountPath: /var/cache/univention-config
        resources:
          requests:
            cpu: 0.1
            memory: 256Mi
      - name: load-internal-plugins
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsGroup: 1000
          runAsNonRoot: true
          runAsUser: 1000
          seLinuxOptions:
          seccompProfile:
            type: RuntimeDefault
        image:
          registry.opencode.de/bmi/opendesk/components/supplier/univention/images-mirror/udm-rest-api:0.25.1@sha256:0078b16ecf5539e6f3c7e6d5a7ddb57937d3d2d143754fbd6d439a3a8741abe8
        imagePullPolicy: IfNotPresent
        command:
        - sh
        - -c
        - |
          cp -av /usr/lib/python3/dist-packages/univention/udm/modules /target/udm-modules
          cp -av /usr/lib/python3/dist-packages/univention/admin/hooks.d /target/udm-hooks.d
          cp -av /usr/lib/python3/dist-packages/univention/admin/syntax.d /target/udm-syntax.d
          cp -av /usr/lib/python3/dist-packages/univention/admin/handlers /target/udm-handlers
          cp -av /usr/share/univention-management-console-frontend/js/dijit/themes/umc/icons /target/umc-icons
        volumeMounts:
        - name: plugin-targets
          mountPath: /target
        resources:
          requests:
            cpu: 0.1
            memory: 256Mi
      - name: load-portal-extension
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsGroup: 1000
          runAsNonRoot: true
          runAsUser: 1000
          seLinuxOptions:
          seccompProfile:
            type: RuntimeDefault
        image:
          registry.opencode.de/bmi/opendesk/components/supplier/univention/images-mirror/portal-extension:0.38.0@sha256:aa6ec6b99810e05655d98fa1192bc2eabb855335f7a04aa4cd96ed5b5645d736
        imagePullPolicy: IfNotPresent
        volumeMounts:
        - name: plugin-targets
          mountPath: /target
        resources:
          requests:
            cpu: 0.1
            memory: 256Mi
      - name: load-ox-extension
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsGroup: 1000
          runAsNonRoot: true
          runAsUser: 1000
          seLinuxOptions:
          seccompProfile:
            type: RuntimeDefault
        image:
          registry.opencode.de/bmi/opendesk/components/supplier/univention/images-mirror/ox-extension:0.11.0@sha256:2cb5a9683b6ff81b995a5c71da52c2ff8177b662bb0be8f11e9cd0c6b48d8a11
        imagePullPolicy: IfNotPresent
        volumeMounts:
        - name: plugin-targets
          mountPath: /target
        resources:
          requests:
            cpu: 0.1
            memory: 256Mi
      - name: load-opendesk-extension
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsGroup: 1000
          runAsNonRoot: true
          runAsUser: 1000
          seLinuxOptions:
          seccompProfile:
            type: RuntimeDefault
        image:
          registry.opencode.de/bmi/opendesk/components/platform-development/images/opendesk-nubus:1.7.4@sha256:23976c92c1b9f366b04e5e17fb52912b624720e3a97f5fee0da43afe75a6645e
        imagePullPolicy: IfNotPresent
        volumeMounts:
        - name: plugin-targets
          mountPath: /target
        resources:
          requests:
            cpu: 0.1
            memory: 256Mi
      containers:
      - name: udm-rest-api
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsGroup: 1000
          runAsNonRoot: true
          runAsUser: 1000
          seLinuxOptions:
          seccompProfile:
            type: RuntimeDefault
        command:
        - sh
        - -c
        - |
          python3 \
          -m "univention.admin.rest.server" \
          --debug "2" \
          --port "9979" \
          --interface "0.0.0.0" \
          --processes "1"
        image:
          registry.opencode.de/bmi/opendesk/components/supplier/univention/images-mirror/udm-rest-api:0.25.1@sha256:0078b16ecf5539e6f3c7e6d5a7ddb57937d3d2d143754fbd6d439a3a8741abe8
        imagePullPolicy: IfNotPresent
        envFrom:
        - configMapRef:
            name: ums-udm-rest-api
        livenessProbe:
          failureThreshold: 10
          initialDelaySeconds: 15
          periodSeconds: 20
          successThreshold: 1
          tcpSocket:
            port: 9979
          timeoutSeconds: 5
        readinessProbe:
          failureThreshold: 10
          initialDelaySeconds: 15
          periodSeconds: 20
          successThreshold: 1
          tcpSocket:
            port: 9979
          timeoutSeconds: 5
        startupProbe:
          failureThreshold: 10
          initialDelaySeconds: 15
          periodSeconds: 20
          successThreshold: 1
          tcpSocket:
            port: 9979
          timeoutSeconds: 5
        ports:
        - name: http
          containerPort: 9979
          protocol: TCP
        resources:
          requests:
            cpu: 0.1
            memory: 256Mi
        volumeMounts:
        - name: usr-lib-python3-volume
          mountPath: /usr/lib/python3
        - name: var-log-univention-volume
          mountPath: /var/log/univention
        - name: tmp-volume
          mountPath: /tmp
        - name: var-run-volume
          mountPath: /var/run
        - name: etc-ldap-volume
          mountPath: /etc/ldap
        - name: etc-univention-volume
          mountPath: /etc/univention
        - name: credentials-volume
          mountPath: /etc/ldap.secret
          subPath: ldap.secret
        - name: credentials-volume
          mountPath: /etc/machine.secret
          subPath: machine.secret
        - name: plugin-targets
          mountPath: /usr/lib/python3/dist-packages/univention/udm/modules
          subPath: udm-modules
        - name: plugin-targets
          mountPath: /usr/lib/python3/dist-packages/univention/admin/hooks.d
          subPath: udm-hooks.d
        - name: plugin-targets
          mountPath: /usr/lib/python3/dist-packages/univention/admin/syntax.d
          subPath: udm-syntax.d
        - name: plugin-targets
          mountPath: /usr/lib/python3/dist-packages/univention/admin/handlers
          subPath: udm-handlers
        - name: plugin-targets
          mountPath: /usr/share/univention-management-console-frontend/js/dijit/themes/umc/icons/
          subPath: umc-icons
        - name: config-map-ucr
          mountPath: /etc/univention/base.conf
          subPath: base.conf
        - name: config-map-ucr
          mountPath: /etc/univention/base-defaults.conf
          subPath: base-defaults.conf
      volumes:
      - name: usr-lib-python3-volume
        emptyDir: {}
      - name: etc-ldap-volume
        configMap:
          name: ums-udm-rest-api-ldap-conf
      - name: var-cache-univention-config-volume
        emptyDir: {}
      - name: tmp-volume
        emptyDir: {}
      - name: var-run-volume
        emptyDir: {}
      - name: var-log-univention-volume
        emptyDir: {}
      - name: etc-univention-volume
        emptyDir: {}
      - name: plugin-targets
        emptyDir: {}
      - name: credentials-volume
        secret:
          defaultMode: 420
          secretName: ums-udm-rest-api-credentials
      - name: config-map-ucr
        configMap:
          name: ums-stack-data-ums-ucr
---
# Source: nubus/charts/nubusUmcGateway/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ums-umc-gateway
  namespace: tn-openbsw-opendesk
  labels:
    app.kubernetes.io/name: umc-gateway
    helm.sh/chart: nubusUmcGateway-0.34.1
    app.kubernetes.io/instance: ums
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 12.0.29
spec:
  replicas: 1
  strategy:
  selector:
    matchLabels:
      app.kubernetes.io/name: umc-gateway
      app.kubernetes.io/instance: ums
  template:
    metadata:
      annotations:
      labels:
        app.kubernetes.io/name: umc-gateway
        helm.sh/chart: nubusUmcGateway-0.34.1
        app.kubernetes.io/instance: ums
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/version: 12.0.29
    spec:
      securityContext:
        fsGroup: 1000
        fsGroupChangePolicy: Always
      serviceAccountName: ums-umc-gateway
      terminationGracePeriodSeconds: 5
      initContainers:
      - name: copy-config
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsGroup: 1000
          runAsNonRoot: true
          runAsUser: 1000
          seLinuxOptions:
          seccompProfile:
            type: RuntimeDefault
        resources:
          requests:
            cpu: 0.1
            memory: 256Mi
        image:
          registry.opencode.de/bmi/opendesk/components/supplier/univention/images-mirror/umc-gateway:0.34.1@sha256:ab4ffccc182bae115dc8f264c051f1c23102b1416ac00709d95285218829ce39
        imagePullPolicy: IfNotPresent
        command:
        - bash
        - -c
        - |
          cp -a /etc/univention/* /target/etc/univention/
          cp -a /etc/apache2/* /target/etc/apache2/
          cp -a /var/www/univention/* /target/var/www/univention/
        volumeMounts:
        - name: etc-apache2
          mountPath: /target/etc/apache2
        - name: var-www-univention
          mountPath: /target/var/www/univention
        - name: etc-univention
          mountPath: /target/etc/univention
      - name: prepare-config
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsGroup: 1000
          runAsNonRoot: true
          runAsUser: 1000
          seLinuxOptions:
          seccompProfile:
            type: RuntimeDefault
        resources:
          requests:
            cpu: 0.1
            memory: 256Mi
        image:
          registry.opencode.de/bmi/opendesk/components/supplier/univention/images-mirror/umc-gateway:0.34.1@sha256:ab4ffccc182bae115dc8f264c051f1c23102b1416ac00709d95285218829ce39
        imagePullPolicy: IfNotPresent
        command:
        - bash
        - -c
        - |
          /entrypoint.d/50-entrypoint.sh
          echo "Listen 8080" > /etc/apache2/ports.conf
          sed -e 's,<VirtualHost \*:80>,<VirtualHost *:8080>,g' -i /etc/apache2/sites-available/000-default.conf
          cat /etc/apache2/sites-available/000-default.conf
        volumeMounts:
        - name: etc-apache2
          mountPath: /etc/apache2
        - name: var-www-univention
          mountPath: /var/www/univention
        - name: etc-univention
          mountPath: /etc/univention
        - name: config-cache
          mountPath: /var/cache/univention-config
        - name: univention-logs
          mountPath: /var/log/univention
        - name: config-map-ucr
          mountPath: /etc/univention/base.conf
          subPath: base.conf
        - name: config-map-ucr
          mountPath: /etc/univention/base-defaults.conf
          subPath: base-defaults.conf
      - name: load-internal-plugins
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsGroup: 1000
          runAsNonRoot: true
          runAsUser: 1000
          seLinuxOptions:
          seccompProfile:
            type: RuntimeDefault
        image:
          registry.opencode.de/bmi/opendesk/components/supplier/univention/images-mirror/umc-gateway:0.34.1@sha256:ab4ffccc182bae115dc8f264c051f1c23102b1416ac00709d95285218829ce39
        imagePullPolicy: IfNotPresent
        command:
        - sh
        - -c
        - |
          cp -av /usr/share/univention-management-console-frontend/js/dijit/themes/umc/icons /target/umc-icons
        volumeMounts:
        - name: plugin-targets
          mountPath: /target
        resources:
      - name: load-portal-extension
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsGroup: 1000
          runAsNonRoot: true
          runAsUser: 1000
          seLinuxOptions:
          seccompProfile:
            type: RuntimeDefault
        image:
          registry.opencode.de/bmi/opendesk/components/supplier/univention/images-mirror/portal-extension:0.38.0@sha256:aa6ec6b99810e05655d98fa1192bc2eabb855335f7a04aa4cd96ed5b5645d736
        imagePullPolicy: IfNotPresent
        volumeMounts:
        - name: plugin-targets
          mountPath: /target
        resources:
      - name: load-ox-extension
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsGroup: 1000
          runAsNonRoot: true
          runAsUser: 1000
          seLinuxOptions:
          seccompProfile:
            type: RuntimeDefault
        image:
          registry.opencode.de/bmi/opendesk/components/supplier/univention/images-mirror/ox-extension:0.11.0@sha256:2cb5a9683b6ff81b995a5c71da52c2ff8177b662bb0be8f11e9cd0c6b48d8a11
        imagePullPolicy: IfNotPresent
        volumeMounts:
        - name: plugin-targets
          mountPath: /target
        resources:
      - name: load-opendesk-extension
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsGroup: 1000
          runAsNonRoot: true
          runAsUser: 1000
          seLinuxOptions:
          seccompProfile:
            type: RuntimeDefault
        image:
          registry.opencode.de/bmi/opendesk/components/platform-development/images/opendesk-nubus:1.7.4@sha256:23976c92c1b9f366b04e5e17fb52912b624720e3a97f5fee0da43afe75a6645e
        imagePullPolicy: IfNotPresent
        volumeMounts:
        - name: plugin-targets
          mountPath: /target
        resources:

      containers:
      - name: umc-gateway
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsGroup: 1000
          runAsNonRoot: true
          runAsUser: 1000
          seLinuxOptions:
          seccompProfile:
            type: RuntimeDefault
        image:
          registry.opencode.de/bmi/opendesk/components/supplier/univention/images-mirror/umc-gateway:0.34.1@sha256:ab4ffccc182bae115dc8f264c051f1c23102b1416ac00709d95285218829ce39
        imagePullPolicy: IfNotPresent
        command:
        - bash
        - -c
        - |
          apache2 -D FOREGROUND \
          -d /etc/apache2/ \
          -f /etc/apache2/apache2.conf
        volumeMounts:
        - name: config-map-ucr
          mountPath: /etc/univention/base.conf
          subPath: base.conf
        - name: config-map-ucr
          mountPath: /etc/univention/base-defaults.conf
          subPath: base-defaults.conf
        - name: plugin-targets
          mountPath: /usr/share/univention-management-console-frontend/js/dijit/themes/umc/icons/
          subPath: umc-icons
          readOnly: true
        - name: apache2-logs
          mountPath: /usr/local/apache2/logs
        - name: etc-apache2
          mountPath: /etc/apache2
          readOnly: true
        - name: var-www-univention
          mountPath: /var/www/univention
          readOnly: true
        ports:
        - name: http
          containerPort: 8080
          protocol: TCP
        livenessProbe:
          tcpSocket:
            port: 8080
          initialDelaySeconds: 10
          timeoutSeconds: 3
          periodSeconds: 30
          failureThreshold: 3
          successThreshold: 1
        readinessProbe:
          tcpSocket:
            port: 8080
          initialDelaySeconds: 10
          timeoutSeconds: 3
          periodSeconds: 15
          failureThreshold: 30
          successThreshold: 1
        resources:
          requests:
            cpu: 0.1
            memory: 256Mi
      volumes:
      - name: config-map-ucr
        configMap:
          name: ums-stack-data-ums-ucr
      - name: plugin-targets
        emptyDir: {}
      - name: apache2-logs
        emptyDir:
          medium: Memory
      - name: etc-apache2
        emptyDir:
          medium: Memory
      - name: var-www-univention
        emptyDir:
          medium: Memory
      - name: etc-univention
        emptyDir:
          medium: Memory
      - name: config-cache
        emptyDir:
          medium: Memory
      - name: univention-logs
        emptyDir:
          medium: Memory
---
# Source: nubus/charts/nubusUmcServer/templates/deployment-load-balancer.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ums-umc-server
  namespace: tn-openbsw-opendesk
  labels:
    app.kubernetes.io/instance: ums
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: ums-umc-server-proxy
    app.kubernetes.io/version: 12.0.29
    helm.sh/chart: nubusUmcServer-0.34.1
  annotations:
    intents.otterize.com/service-name: ums-umc-server
spec:
  replicas: 1
  strategy:
  selector:
    matchLabels:
      app.kubernetes.io/instance: ums
      app.kubernetes.io/name: ums-umc-server-proxy
  template:
    metadata:
      annotations:
        checksum/configmap: d2a7ee1168c85919e07656ab6d51134351a784a292d7070db616ba07d73560f8
      labels:
        app.kubernetes.io/instance: ums
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: ums-umc-server-proxy
        app.kubernetes.io/version: 12.0.29
        helm.sh/chart: nubusUmcServer-0.34.1
    spec:
      securityContext:
        fsGroup: 0
        fsGroupChangePolicy: Always
      serviceAccountName: ums-umc-server
      terminationGracePeriodSeconds: 5
      containers:
      - name: proxy
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsGroup: 0
          runAsNonRoot: false
          runAsUser: 0
          seLinuxOptions:
          seccompProfile:
            type: RuntimeDefault
        image:
          registry-1.docker.io/library/traefik:3.0@sha256:a208c74fd80a566d4ea376053bff73d31616d7af3f1465a7747b8b89ee34d97e
        imagePullPolicy: IfNotPresent
        volumeMounts:
        - mountPath: /var/secrets/ssl
          name: certificates
        - name: traefik
          mountPath: /etc/traefik
        ports:
        - name: http
          containerPort: 8080
          protocol: TCP
        livenessProbe:
          httpGet:
            path: /ping
            port: 8080
          initialDelaySeconds: 10
          timeoutSeconds: 3
          periodSeconds: 30
          failureThreshold: 3
          successThreshold: 1
        readinessProbe:
          httpGet:
            path: /ping
            port: 8080
          initialDelaySeconds: 10
          timeoutSeconds: 3
          periodSeconds: 10
          failureThreshold: 30
          successThreshold: 1
        resources:
          requests:
            cpu: 0.1
            memory: 256Mi
      volumes:
      - name: certificates
        secret:
          secretName: ums-saml-tls
      - name: traefik
        configMap:
          name: ums-umc-server-proxy
          items:
          - key: traefik.yaml
            path: traefik.yaml
          - key: dynamic.yaml
            path: dynamic.yaml
---
# Source: nubus/charts/keycloak/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: ums-keycloak
  namespace: tn-openbsw-opendesk
  labels:
    app.kubernetes.io/name: keycloak
    helm.sh/chart: keycloak-0.5.2
    app.kubernetes.io/instance: ums
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: keycloak
      app.kubernetes.io/instance: ums
  serviceName: ums-keycloak
  podManagementPolicy: OrderedReady
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      annotations:
        checksum/configmap: db962dd74a7188e361a884cc40c0d902baab69a4c6eb67874789f33fe3cc8d55
        intents.otterize.com/service-name: ums-keycloak
      labels:
        app.kubernetes.io/name: keycloak
        helm.sh/chart: keycloak-0.5.2
        app.kubernetes.io/instance: ums
        app.kubernetes.io/managed-by: Helm
    spec:
      securityContext:
        fsGroup: 1000
        fsGroupChangePolicy: Always
      serviceAccountName: ums-keycloak
      terminationGracePeriodSeconds: 5
      containers:
      - name: keycloak
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: false
          runAsGroup: 1000
          runAsNonRoot: true
          runAsUser: 1000
          seLinuxOptions:
          seccompProfile:
            type: RuntimeDefault
        image:
          registry.opencode.de/bmi/opendesk/components/supplier/univention/images-mirror/keycloak-keycloak:25.0.1-ucs1@sha256:61cb3e703672f6d8806af41bec8056ca84e295bbeb546fdb5349322d1174a43d
        imagePullPolicy: IfNotPresent
        args:
        - start
        - --features=admin-fine-grained-authz,token-exchange
        - --metrics-enabled=true
          # Find the available variables here: https://github.com/univention/univention-keycloak-app/blob/main/app/settings
        envFrom:
        - configMapRef:
            name: ums-keycloak

        env:
        - name: KEYCLOAK_ADMIN
          value: kcadmin
        - name: KEYCLOAK_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: ums-opendesk-keycloak-credentials
              key: admin_password
        - name: KC_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: ums-keycloak-postgresql-opendesk-credentials
              key: keycloakDatabasePassword
        - name: UNIVENTION_META_JSON
          value: https://portal.opendesk.apps.digilab.network/univention/meta.json
        ports:
        - name: http
          containerPort: 8080
          protocol: TCP
        - name: https
          containerPort: 8443
          protocol: TCP
        - name: ispn
          containerPort: 7800
          protocol: TCP
        livenessProbe:
          httpGet:
            path: /realms/master
            port: 8080
          initialDelaySeconds: 1
          periodSeconds: 5
          timeoutSeconds: 2
          failureThreshold: 3
          successThreshold: 1
        readinessProbe:
          httpGet:
            path: /realms/master
            port: 8080
          initialDelaySeconds: 1
          periodSeconds: 1
          timeoutSeconds: 2
          failureThreshold: 5
          successThreshold: 1
        startupProbe:
          httpGet:
            path: /realms/master
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 5
          failureThreshold: 10
          successThreshold: 1
        resources:
          requests:
            cpu: 0.1
            memory: 512Mi
---
# Source: nubus/charts/nubusLdapNotifier/templates/statefulset.yaml
# SPDX-License-Identifier: AGPL-3.0-only
# SPDX-FileCopyrightText: 2023-2024 Univention GmbH

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: ums-ldap-notifier
  labels:
    app.kubernetes.io/name: ldap-notifier
    helm.sh/chart: nubusLdapNotifier-0.25.2
    app.kubernetes.io/instance: ums
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 14.0.4
spec:
  serviceName: ums-ldap-notifier
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: ldap-notifier
      app.kubernetes.io/instance: ums
  template:
    metadata:
      annotations:
        checksum/config: df27c37dc7344932f3ea420217d2771b2521185f9bfda51b0ef9727c1c777d51
        intents.otterize.com/service-name: ums-ldap-notifier
      labels:
        app.kubernetes.io/name: ldap-notifier
        app.kubernetes.io/instance: ums
    spec:
      securityContext:
        fsGroup: 102
        fsGroupChangePolicy: Always
      containers:
      - name: ldap-notifier
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsGroup: 102
          runAsNonRoot: true
          runAsUser: 101
          seLinuxOptions:
          seccompProfile:
            type: RuntimeDefault
        image:
          registry.opencode.de/bmi/opendesk/components/supplier/univention/images-mirror/ldap-notifier:0.25.2@sha256:9e29c7fb5c609d7e597f27e0384c4f932e6962cdf64012154d7b7c076755d86c
        imagePullPolicy: IfNotPresent
        envFrom:
        - configMapRef:
            name: ums-ldap-notifier
        volumeMounts:
        - name: shared-data
          mountPath: /var/lib/univention-ldap
        - name: shared-run
          mountPath: /var/run/slapd
        - name: run
          mountPath: /run
        ports:
        - name: notifier
          containerPort: 6669
          protocol: TCP
        resources:
          requests:
            cpu: 0.1
            memory: 256Mi
      volumes:
      - name: run
        emptyDir:
          medium: Memory

      - name: shared-data
        persistentVolumeClaim:
          claimName: shared-data-ums-ldap-server-primary-0
      - name: shared-run
        persistentVolumeClaim:
          claimName: shared-run-ums-ldap-server-primary-0
      affinity:
        podAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: ldap-server-type
                operator: In
                values:
                - primary
            topologyKey: kubernetes.io/hostname
---
# Source: nubus/charts/nubusLdapServer/templates/statefulset-primary.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: ums-ldap-server-primary
  namespace: tn-openbsw-opendesk
  labels:
    app.kubernetes.io/name: ldap-server
    helm.sh/chart: nubusLdapServer-0.25.2
    app.kubernetes.io/instance: ums
    app.kubernetes.io/managed-by: Helm
    ldap-server-type: primary
  annotations:
    intents.otterize.com/service-name: ums-ldap-server
spec:
  serviceName: ums-ldap-server-primary
  replicas: 1
  podManagementPolicy: OrderedReady
  volumeClaimTemplates:

  - metadata:
      name: shared-data
    spec:
      accessModes: [ReadWriteOnce]
      storageClassName: managed
      resources:
        requests:
          storage: 1Gi
  - metadata:
      name: shared-run
    spec:
      accessModes: [ReadWriteOnce]
      storageClassName: managed
      resources:
        requests:
          storage: 1Gi
  selector:
    matchLabels:
      app.kubernetes.io/name: ldap-server
      app.kubernetes.io/instance: ums
      ldap-server-type: primary
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      annotations:
        checksum/configmap: ed47017dc7e6ea55e9189d6d47ba463ed4f7df3872b4f025c8946b5f730f4689
        checksum/configmap-primary: 374833154a7e3c1730768cba717380fa3123d1fe5753de09d88171fe7b5ef26d
      labels:
        app.kubernetes.io/name: ldap-server
        helm.sh/chart: nubusLdapServer-0.25.2
        app.kubernetes.io/instance: ums
        app.kubernetes.io/managed-by: Helm
        ldap-server-type: primary
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: ldap-server-type
                  operator: In
                  values:
                  - primary
              topologyKey: kubernetes.io/hostname
            weight: 100
      securityContext:
        fsGroup: 102
        fsGroupChangePolicy: Always
        sysctls:
        - name: net.ipv4.ip_unprivileged_port_start
          value: '1'
      serviceAccountName: ums-ldap-server
      terminationGracePeriodSeconds: 5
      initContainers:
      - name: univention-compatibility
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsGroup: 102
          runAsNonRoot: true
          runAsUser: 101
          seccompProfile:
            type: RuntimeDefault
        image:
          registry.opencode.de/bmi/opendesk/components/supplier/univention/images-mirror/ldap-server:0.25.2@sha256:2b9d53f93a93d0f3a659c81c0e44596da8941bd83c8e1f7301a24e46ca06dba2
        imagePullPolicy: IfNotPresent
        command:
        - sh
        - -c
        - cp -a /usr/share/univention-ldap/* /target/usr/share/univention-ldap/; cp
          -a /etc/ldap/* /target/etc/ldap/; cp -a /etc/univention/* /target/etc/univention/
        volumeMounts:
        - name: usr-share-univention-ldap-volume
          mountPath: /target/usr/share/univention-ldap
        - name: etc-ldap-volume
          mountPath: /target/etc/ldap
        - name: etc-univention-volume
          mountPath: /target/etc/univention
        resources:
          requests:
            cpu: 10m
            memory: 16Mi
      - name: load-internal-plugins
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsGroup: 102
          runAsNonRoot: true
          runAsUser: 101
          seccompProfile:
            type: RuntimeDefault
        image:
          registry.opencode.de/bmi/opendesk/components/supplier/univention/images-mirror/ldap-server:0.25.2@sha256:2b9d53f93a93d0f3a659c81c0e44596da8941bd83c8e1f7301a24e46ca06dba2
        imagePullPolicy: IfNotPresent
        command:
        - sh
        - -c
        - |
          cp -av /var/lib/univention-ldap-local/local-schema /target/ldap-schema
          cp -av /etc/univention/templates/files/etc/ldap/slapd.conf.d /target/ldap-acls
        volumeMounts:
        - name: plugin-targets
          mountPath: /target
        resources:
          requests:
            cpu: 0.1
            memory: 256Mi
      - name: load-portal-extension
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsGroup: 102
          runAsNonRoot: true
          runAsUser: 101
          seccompProfile:
            type: RuntimeDefault
        image:
          registry.opencode.de/bmi/opendesk/components/supplier/univention/images-mirror/portal-extension:0.38.0@sha256:aa6ec6b99810e05655d98fa1192bc2eabb855335f7a04aa4cd96ed5b5645d736
        imagePullPolicy: IfNotPresent
        volumeMounts:
        - name: plugin-targets
          mountPath: /target
        resources:
          requests:
            cpu: 0.1
            memory: 256Mi
      - name: load-ox-extension
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsGroup: 102
          runAsNonRoot: true
          runAsUser: 101
          seccompProfile:
            type: RuntimeDefault
        image:
          registry.opencode.de/bmi/opendesk/components/supplier/univention/images-mirror/ox-extension:0.11.0@sha256:2cb5a9683b6ff81b995a5c71da52c2ff8177b662bb0be8f11e9cd0c6b48d8a11
        imagePullPolicy: IfNotPresent
        volumeMounts:
        - name: plugin-targets
          mountPath: /target
        resources:
          requests:
            cpu: 0.1
            memory: 256Mi
      - name: load-opendesk-extension
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsGroup: 102
          runAsNonRoot: true
          runAsUser: 101
          seccompProfile:
            type: RuntimeDefault
        image:
          registry.opencode.de/bmi/opendesk/components/platform-development/images/opendesk-nubus:1.7.4@sha256:23976c92c1b9f366b04e5e17fb52912b624720e3a97f5fee0da43afe75a6645e
        imagePullPolicy: IfNotPresent
        volumeMounts:
        - name: plugin-targets
          mountPath: /target
        resources:
          requests:
            cpu: 0.1
            memory: 256Mi
      - name: wait-for-saml-metadata
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsGroup: 102
          runAsNonRoot: true
          runAsUser: 101
          seccompProfile:
            type: RuntimeDefault
        image:
          registry.opencode.de/bmi/opendesk/components/supplier/univention/images-mirror/wait-for-dependency:0.26.0@sha256:a31fde86bf21c597a31356fe492ab7e7a03a89282ca215eb7100763d6eb96b6b
        imagePullPolicy: IfNotPresent
        command:
        - /bin/bash
        - /scripts/wait-for-saml-metadata.sh
        envFrom:
        - configMapRef:
            name: ums-ldap-server
        volumeMounts:
        - name: scripts-volume
          mountPath: /scripts
        - name: config-map-ucr
          mountPath: /etc/univention/base.conf
          subPath: base.conf
        - name: config-map-ucr
          mountPath: /etc/univention/base-defaults.conf
          subPath: base-defaults.conf
        resources:
          requests:
            cpu: 10m
            memory: 16Mi
      containers:
      - name: openldap
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsGroup: 102
          runAsNonRoot: true
          runAsUser: 101
          seccompProfile:
            type: RuntimeDefault
        image:
          registry.opencode.de/bmi/opendesk/components/supplier/univention/images-mirror/ldap-server:0.25.2@sha256:2b9d53f93a93d0f3a659c81c0e44596da8941bd83c8e1f7301a24e46ca06dba2
        imagePullPolicy: IfNotPresent
        envFrom:
        - configMapRef:
            name: ums-ldap-server
        - configMapRef:
            name: ums-ldap-server-primary
        env:
        - name: SYNC_PASSWORD
          valueFrom:
            secretKeyRef:
              name: ums-ldap-server-credentials
              key: adminPassword
        - name: LDAP_CN_ADMIN_PW
          valueFrom:
            secretKeyRef:
              name: ums-ldap-server-credentials
              key: adminPassword
        livenessProbe:
          failureThreshold: 10
          initialDelaySeconds: 15
          periodSeconds: 20
          successThreshold: 1
          tcpSocket:
            port: 389
          timeoutSeconds: 5
        readinessProbe:
          exec:
            command:
            - /bin/bash
            - -c
            - |
              /scripts/is_active_master.sh
          failureThreshold: 1
          initialDelaySeconds: 15
          periodSeconds: 20
          successThreshold: 1
          timeoutSeconds: 5
        startupProbe:
          failureThreshold: 10
          initialDelaySeconds: 15
          periodSeconds: 20
          successThreshold: 1
          tcpSocket:
            port: 389
          timeoutSeconds: 5
        ports:
        - name: ldap
          containerPort: 389
          protocol: TCP
        - name: ldaps
          containerPort: 636
          protocol: TCP
        resources:
          requests:
            cpu: 10m
            memory: 16Mi
        volumeMounts:
        - name: slapd-overlay-unix-socket-volume
          mountPath: /var/lib/univention-ldap/slapd-sock
        - name: usr-share-univention-ldap-volume
          mountPath: /usr/share/univention-ldap
        - name: usr-share-saml-volume
          mountPath: /usr/share/saml
        - name: etc-ldap-volume
          mountPath: /etc/ldap
        - name: etc-univention-volume
          mountPath: /etc/univention
        - name: primary-config-templates-volume
          mountPath: /config/templates
        - name: primary-scripts-volume
          mountPath: /entrypoint.d/90-append-slapd-conf.sh
          subPath: append-slapd.conf.sh
        - name: scripts-volume
          mountPath: /entrypoint.d/91-init-internal-database.sh
          subPath: init-internal-database.sh
        - name: scripts-volume
          mountPath: /scripts
        - name: plugin-targets
          mountPath: /var/lib/univention-ldap-local/local-schema
          subPath: ldap-schema
        - name: plugin-targets
          mountPath: /etc/univention/templates/files/etc/ldap/slapd.conf.d
          subPath: ldap-acls

        - name: shared-run
          mountPath: /var/run/slapd
        - name: config-map-ucr
          mountPath: /etc/univention/base.conf
          subPath: base.conf
        - name: config-map-ucr
          mountPath: /etc/univention/base-defaults.conf
          subPath: base-defaults.conf

        - name: shared-data
          mountPath: /var/lib/univention-ldap
        - mountPath: /entrypoint.d/30-purge.sh
          name: migration-scripts
          subPath: 30-purge.sh
        - mountPath: /entrypoint.d/95-slapadd-24-ldiff.sh
          name: migration-scripts
          subPath: 95-slapadd-24-ldif.sh
      volumes:
      - name: slapd-overlay-unix-socket-volume
        emptyDir: {}
      - name: usr-share-univention-ldap-volume
        emptyDir: {}
      - name: usr-share-saml-volume
        emptyDir: {}
      - name: etc-ldap-volume
        emptyDir: {}
      - name: etc-univention-volume
        emptyDir: {}
      - name: primary-scripts-volume
        configMap:
          name: ums-ldap-server-primary-scripts
          defaultMode: 0555
      - name: primary-config-templates-volume
        configMap:
          name: ums-ldap-server-primary-config-templates
      - name: scripts-volume
        configMap:
          name: ums-ldap-server-scripts
          defaultMode: 0555
      - name: plugin-targets
        emptyDir: {}
      - name: config-map-ucr
        configMap:
          name: ums-stack-data-ums-ucr

      - name: migration-scripts
        secret:
          defaultMode: 365
          secretName: ums-ldap-server-migration
---
# Source: nubus/charts/nubusLdapServer/templates/statefulset-secondary.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: ums-ldap-server-secondary
  namespace: tn-openbsw-opendesk
  labels:
    app.kubernetes.io/name: ldap-server
    helm.sh/chart: nubusLdapServer-0.25.2
    app.kubernetes.io/instance: ums
    app.kubernetes.io/managed-by: Helm
    ldap-server-type: secondary
  annotations:
    intents.otterize.com/service-name: ums-ldap-server
spec:
  serviceName: ums-ldap-server-secondary
  replicas: 0
  podManagementPolicy: OrderedReady
  volumeClaimTemplates:

  - metadata:
      name: shared-data
    spec:
      accessModes: [ReadWriteOnce]
      storageClassName: managed
      resources:
        requests:
          storage: 1Gi
  - metadata:
      name: shared-run
    spec:
      accessModes: [ReadWriteOnce]
      storageClassName: managed
      resources:
        requests:
          storage: 1Gi
  selector:
    matchLabels:
      app.kubernetes.io/name: ldap-server
      app.kubernetes.io/instance: ums
      ldap-server-type: secondary
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      annotations:
        checksum/configmap: ed47017dc7e6ea55e9189d6d47ba463ed4f7df3872b4f025c8946b5f730f4689
        checksum/configmap-secondary: cd3607462e65135c3b04ce316104c3955fd43dc12f2f9aaaeab00bef9c177f36
      labels:
        app.kubernetes.io/name: ldap-server
        helm.sh/chart: nubusLdapServer-0.25.2
        app.kubernetes.io/instance: ums
        app.kubernetes.io/managed-by: Helm
        ldap-server-type: secondary
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: ldap-server-type
                  operator: In
                  values:
                  - secondary
              topologyKey: kubernetes.io/hostname
            weight: 100
      securityContext:
        fsGroup: 102
        fsGroupChangePolicy: Always
        sysctls:
        - name: net.ipv4.ip_unprivileged_port_start
          value: '1'
      serviceAccountName: ums-ldap-server
      terminationGracePeriodSeconds: 5
      initContainers:
      - name: univention-compatibility
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsGroup: 102
          runAsNonRoot: true
          runAsUser: 101
          seccompProfile:
            type: RuntimeDefault
        image:
          registry.opencode.de/bmi/opendesk/components/supplier/univention/images-mirror/ldap-server:0.25.2@sha256:2b9d53f93a93d0f3a659c81c0e44596da8941bd83c8e1f7301a24e46ca06dba2
        imagePullPolicy: IfNotPresent
        command:
        - sh
        - -c
        - cp -a /usr/share/univention-ldap/* /target/usr/share/univention-ldap/; cp
          -a /etc/ldap/* /target/etc/ldap/; cp -a /etc/univention/* /target/etc/univention/
        volumeMounts:
        - name: usr-share-univention-ldap-volume
          mountPath: /target/usr/share/univention-ldap
        - name: etc-ldap-volume
          mountPath: /target/etc/ldap
        - name: etc-univention-volume
          mountPath: /target/etc/univention
        resources:
          requests:
            cpu: 10m
            memory: 16Mi
      - name: load-internal-plugins
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsGroup: 102
          runAsNonRoot: true
          runAsUser: 101
          seccompProfile:
            type: RuntimeDefault
        image:
          registry.opencode.de/bmi/opendesk/components/supplier/univention/images-mirror/ldap-server:0.25.2@sha256:2b9d53f93a93d0f3a659c81c0e44596da8941bd83c8e1f7301a24e46ca06dba2
        imagePullPolicy: IfNotPresent
        command:
        - sh
        - -c
        - |
          cp -av /var/lib/univention-ldap-local/local-schema /target/ldap-schema
          cp -av /etc/univention/templates/files/etc/ldap/slapd.conf.d /target/ldap-acls
        volumeMounts:
        - name: plugin-targets
          mountPath: /target
        resources:
          requests:
            cpu: 0.1
            memory: 256Mi
      - name: load-portal-extension
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsGroup: 102
          runAsNonRoot: true
          runAsUser: 101
          seccompProfile:
            type: RuntimeDefault
        image:
          registry.opencode.de/bmi/opendesk/components/supplier/univention/images-mirror/portal-extension:0.38.0@sha256:aa6ec6b99810e05655d98fa1192bc2eabb855335f7a04aa4cd96ed5b5645d736
        imagePullPolicy: IfNotPresent
        volumeMounts:
        - name: plugin-targets
          mountPath: /target
        resources:
          requests:
            cpu: 0.1
            memory: 256Mi
      - name: load-ox-extension
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsGroup: 102
          runAsNonRoot: true
          runAsUser: 101
          seccompProfile:
            type: RuntimeDefault
        image:
          registry.opencode.de/bmi/opendesk/components/supplier/univention/images-mirror/ox-extension:0.11.0@sha256:2cb5a9683b6ff81b995a5c71da52c2ff8177b662bb0be8f11e9cd0c6b48d8a11
        imagePullPolicy: IfNotPresent
        volumeMounts:
        - name: plugin-targets
          mountPath: /target
        resources:
          requests:
            cpu: 0.1
            memory: 256Mi
      - name: load-opendesk-extension
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsGroup: 102
          runAsNonRoot: true
          runAsUser: 101
          seccompProfile:
            type: RuntimeDefault
        image:
          registry.opencode.de/bmi/opendesk/components/platform-development/images/opendesk-nubus:1.7.4@sha256:23976c92c1b9f366b04e5e17fb52912b624720e3a97f5fee0da43afe75a6645e
        imagePullPolicy: IfNotPresent
        volumeMounts:
        - name: plugin-targets
          mountPath: /target
        resources:
          requests:
            cpu: 0.1
            memory: 256Mi
      - name: wait-for-saml-metadata
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsGroup: 102
          runAsNonRoot: true
          runAsUser: 101
          seccompProfile:
            type: RuntimeDefault
        image:
          registry.opencode.de/bmi/opendesk/components/supplier/univention/images-mirror/wait-for-dependency:0.26.0@sha256:a31fde86bf21c597a31356fe492ab7e7a03a89282ca215eb7100763d6eb96b6b
        imagePullPolicy: IfNotPresent
        command:
        - /bin/bash
        - /scripts/wait-for-saml-metadata.sh
        envFrom:
        - configMapRef:
            name: ums-ldap-server
        volumeMounts:
        - name: scripts-volume
          mountPath: /scripts
        - name: config-map-ucr
          mountPath: /etc/univention/base.conf
          subPath: base.conf
        - name: config-map-ucr
          mountPath: /etc/univention/base-defaults.conf
          subPath: base-defaults.conf
        resources:
          requests:
            cpu: 10m
            memory: 16Mi
      - name: wait-for-primary
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsGroup: 102
          runAsNonRoot: true
          runAsUser: 101
          seccompProfile:
            type: RuntimeDefault
        image:
          registry.opencode.de/bmi/opendesk/components/supplier/univention/images-mirror/ldap-server:0.25.2@sha256:2b9d53f93a93d0f3a659c81c0e44596da8941bd83c8e1f7301a24e46ca06dba2
        imagePullPolicy: IfNotPresent
        envFrom:
        - configMapRef:
            name: ums-ldap-server
        - configMapRef:
            name: ums-ldap-server-secondary
        env:
        - name: SYNC_PASSWORD
          valueFrom:
            secretKeyRef:
              name: ums-ldap-server-credentials
              key: adminPassword
        - name: LDAP_CN_ADMIN_PW
          valueFrom:
            secretKeyRef:
              name: ums-ldap-server-credentials
              key: adminPassword
        command:
        - bash
        - -c
        - /scripts-secondary/wait-for-primary.sh
        volumeMounts:
        - name: secondary-scripts-volume
          mountPath: /scripts-secondary
        resources:
          requests:
            cpu: 10m
            memory: 16Mi
      containers:
      - name: openldap
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsGroup: 102
          runAsNonRoot: true
          runAsUser: 101
          seccompProfile:
            type: RuntimeDefault
        image:
          registry.opencode.de/bmi/opendesk/components/supplier/univention/images-mirror/ldap-server:0.25.2@sha256:2b9d53f93a93d0f3a659c81c0e44596da8941bd83c8e1f7301a24e46ca06dba2
        imagePullPolicy: IfNotPresent
        envFrom:
        - configMapRef:
            name: ums-ldap-server
        - configMapRef:
            name: ums-ldap-server-secondary
        env:
        - name: SYNC_PASSWORD
          valueFrom:
            secretKeyRef:
              name: ums-ldap-server-credentials
              key: adminPassword
        - name: LDAP_CN_ADMIN_PW
          valueFrom:
            secretKeyRef:
              name: ums-ldap-server-credentials
              key: adminPassword
        livenessProbe:
          failureThreshold: 10
          initialDelaySeconds: 15
          periodSeconds: 20
          successThreshold: 1
          tcpSocket:
            port: 389
          timeoutSeconds: 5
        readinessProbe:
          failureThreshold: 10
          initialDelaySeconds: 15
          periodSeconds: 20
          successThreshold: 1
          tcpSocket:
            port: 389
          timeoutSeconds: 5
        startupProbe:
          failureThreshold: 10
          initialDelaySeconds: 15
          periodSeconds: 20
          successThreshold: 1
          tcpSocket:
            port: 389
          timeoutSeconds: 5
        ports:
        - name: ldap
          containerPort: 389
          protocol: TCP
        - name: ldaps
          containerPort: 636
          protocol: TCP
        resources:
          requests:
            cpu: 10m
            memory: 16Mi
        volumeMounts:
        - name: usr-share-univention-ldap-volume
          mountPath: /usr/share/univention-ldap
        - name: usr-share-saml-volume
          mountPath: /usr/share/saml
        - name: etc-ldap-volume
          mountPath: /etc/ldap
        - name: etc-univention-volume
          mountPath: /etc/univention
        - name: secondary-config-templates-volume
          mountPath: /config/templates
        - name: secondary-scripts-volume
          mountPath: /entrypoint.d/90-append-slapd-conf.sh
          subPath: append-slapd.conf.sh
        - name: scripts-volume
          mountPath: /entrypoint.d/91-init-internal-database.sh
          subPath: init-internal-database.sh
        - name: plugin-targets
          mountPath: /var/lib/univention-ldap-local/local-schema
          subPath: ldap-schema
        - name: plugin-targets
          mountPath: /etc/univention/templates/files/etc/ldap/slapd.conf.d
          subPath: ldap-acls

        - name: shared-run
          mountPath: /var/run/slapd
        - name: config-map-ucr
          mountPath: /etc/univention/base.conf
          subPath: base.conf
        - name: config-map-ucr
          mountPath: /etc/univention/base-defaults.conf
          subPath: base-defaults.conf

        - name: shared-data
          mountPath: /var/lib/univention-ldap
        - mountPath: /entrypoint.d/30-purge.sh
          name: migration-scripts
          subPath: 30-purge.sh
        - mountPath: /entrypoint.d/95-slapadd-24-ldiff.sh
          name: migration-scripts
          subPath: 95-slapadd-24-ldif.sh
      volumes:
      - name: usr-share-univention-ldap-volume
        emptyDir: {}
      - name: usr-share-saml-volume
        emptyDir: {}
      - name: etc-ldap-volume
        emptyDir: {}
      - name: etc-univention-volume
        emptyDir: {}
      - name: secondary-scripts-volume
        configMap:
          name: ums-ldap-server-secondary-scripts
          defaultMode: 0555
      - name: secondary-config-templates-volume
        configMap:
          name: ums-ldap-server-secondary-config-templates
      - name: scripts-volume
        configMap:
          name: ums-ldap-server-scripts
          defaultMode: 0555
      - name: plugin-targets
        emptyDir: {}
      - name: config-map-ucr
        configMap:
          name: ums-stack-data-ums-ucr

      - name: migration-scripts
        secret:
          defaultMode: 365
          secretName: ums-ldap-server-migration
---
# Source: nubus/charts/nubusPortalConsumer/templates/statefulset.yaml
# SPDX-License-Identifier: AGPL-3.0-only
# SPDX-FileCopyrightText: 2023-2024 Univention GmbH

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: ums-portal-consumer
  labels:
    app.kubernetes.io/name: portal-consumer
    helm.sh/chart: nubusPortalConsumer-0.42.2
    app.kubernetes.io/instance: ums
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 1.16.0
spec:
  serviceName: ums-portal-consumer
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: portal-consumer
      app.kubernetes.io/instance: ums
  template:
    metadata:
      annotations:
        checksum/config: 1fb58f27944e2cb892c3bf25302a3bd0534f9dfcd854e81d9da5f9ce41f95808
        checksum/secret: cc0e74cd1e0f5ec42421d3f6947df220f75fc3048fba5a8e6831551ba98cc5de
        intents.otterize.com/service-name: ums-portal-consumer
      labels:
        app.kubernetes.io/name: portal-consumer
        app.kubernetes.io/instance: ums
    spec:
      securityContext: {}
      terminationGracePeriodSeconds: 5
      initContainers:
      - name: wait-for-ldap
        command: [/bin/bash, /scripts/wait-for-ldap.sh]
        image:
          registry.opencode.de/bmi/opendesk/components/supplier/univention/images-mirror/wait-for-dependency:0.26.0@sha256:a31fde86bf21c597a31356fe492ab7e7a03a89282ca215eb7100763d6eb96b6b
        imagePullPolicy: IfNotPresent
        env:
        envFrom:
        - configMapRef:
            name: ums-portal-consumer-common
        volumeMounts:
        - name: scripts
          mountPath: /scripts

        - name: ums-portal-consumer-ldap-credentials-volume
          mountPath: /var/secrets/machine_secret
          subPath: machine.secret
          readOnly: true
        - name: ums-portal-consumer-ldap-tls-volume
          mountPath: /var/secrets/ca_cert
          subPath: ca.crt
          readOnly: true
        - name: ums-portal-consumer-ldap-tls-volume
          mountPath: /var/secrets/cert_pem
          subPath: tls.crt
          readOnly: true
        - name: ums-portal-consumer-ldap-tls-volume
          mountPath: /var/secrets/private_key
          subPath: tls.key
          readOnly: true
        resources:
          requests:
            cpu: 0.1
            memory: 256Mi
      - name: wait-for-udm
        command: [/bin/bash, /scripts/wait-for-udm.sh]
        image:
          registry.opencode.de/bmi/opendesk/components/supplier/univention/images-mirror/wait-for-dependency:0.26.0@sha256:a31fde86bf21c597a31356fe492ab7e7a03a89282ca215eb7100763d6eb96b6b
        imagePullPolicy: IfNotPresent
        env:
        envFrom:
        - configMapRef:
            name: ums-portal-consumer-common
        volumeMounts:
        - name: scripts
          mountPath: /scripts

        - name: ums-portal-consumer-ldap-credentials-volume
          mountPath: /var/secrets/machine_secret
          subPath: machine.secret
          readOnly: true
        - name: ums-portal-consumer-ldap-tls-volume
          mountPath: /var/secrets/ca_cert
          subPath: ca.crt
          readOnly: true
        - name: ums-portal-consumer-ldap-tls-volume
          mountPath: /var/secrets/cert_pem
          subPath: tls.crt
          readOnly: true
        - name: ums-portal-consumer-ldap-tls-volume
          mountPath: /var/secrets/private_key
          subPath: tls.key
          readOnly: true
        resources:
          requests:
            cpu: 0.1
            memory: 256Mi
      - name: wait-for-object-storage
        command: [/usr/bin/python3, /scripts/wait-for-object-store.py]
        image:
          registry.opencode.de/bmi/opendesk/components/supplier/univention/images-mirror/portal-consumer:0.42.2@sha256:5afee47e4d3d5f8bf51ffca66578a98318f49ee41e8f4b306cb75826b66a1804
        imagePullPolicy: IfNotPresent
        envFrom:
        - configMapRef:
            name: ums-portal-consumer-common
        env:
        - name: OBJECT_STORAGE_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: ums-portal-consumer-minio-credentials
              key: accessKey
        - name: OBJECT_STORAGE_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: ums-portal-consumer-minio-credentials
              key: secretKey
        volumeMounts:
        - name: scripts
          mountPath: /scripts
        resources:
          requests:
            cpu: 0.1
            memory: 256Mi
      - name: wait-for-provisioning-api
        image:
          registry.opencode.de/bmi/opendesk/components/supplier/univention/images-mirror/wait-for-dependency:0.26.0@sha256:a31fde86bf21c597a31356fe492ab7e7a03a89282ca215eb7100763d6eb96b6b
        imagePullPolicy: IfNotPresent
        command: [/bin/bash, /scripts/wait-for-provisioning-api.sh]
        volumeMounts:
        - name: scripts
          mountPath: /scripts
        env:
        - name: PROVISIONING_API_PASSWORD
          valueFrom:
            secretKeyRef:
              name: ums-portal-consumer-credentials
              key: PROVISIONING_API_PASSWORD
        envFrom:
        - configMapRef:
            name: ums-portal-consumer-common
        resources:
          requests:
            cpu: 0.1
            memory: 256Mi
      containers:
      - name: portal-consumer
        securityContext:
          seLinuxOptions:
          seccompProfile:
            type: RuntimeDefault
        image:
          registry.opencode.de/bmi/opendesk/components/supplier/univention/images-mirror/portal-consumer:0.42.2@sha256:5afee47e4d3d5f8bf51ffca66578a98318f49ee41e8f4b306cb75826b66a1804
        imagePullPolicy: IfNotPresent
        envFrom:
        - configMapRef:
            name: ums-portal-consumer-common
        env:
        - name: OBJECT_STORAGE_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: ums-portal-consumer-minio-credentials
              key: accessKey
        - name: OBJECT_STORAGE_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: ums-portal-consumer-minio-credentials
              key: secretKey
        - name: PROVISIONING_API_PASSWORD
          valueFrom:
            secretKeyRef:
              name: ums-portal-consumer-credentials
              key: PROVISIONING_API_PASSWORD
        volumeMounts:
        - name: group-membership-cache
          mountPath: /usr/share/univention-group-membership-cache/caches

        - name: ums-portal-consumer-ldap-credentials-volume
          mountPath: /var/secrets/machine_secret
          subPath: machine.secret
          readOnly: true
        - name: ums-portal-consumer-ldap-tls-volume
          mountPath: /var/secrets/ca_cert
          subPath: ca.crt
          readOnly: true
        - name: ums-portal-consumer-ldap-tls-volume
          mountPath: /var/secrets/cert_pem
          subPath: tls.crt
          readOnly: true
        - name: ums-portal-consumer-ldap-tls-volume
          mountPath: /var/secrets/private_key
          subPath: tls.key
          readOnly: true
        resources:
          requests:
            cpu: 0.1
            memory: 256Mi
      volumes:
      - name: scripts
        configMap:
          defaultMode: 0555
          name: ums-portal-consumer-scripts
      - name: ums-portal-consumer-ldap-credentials-volume
        secret:
          secretName: ums-portal-consumer-ldap-credentials
      - name: ums-portal-consumer-ldap-tls-volume
        secret:
          secretName: ums-portal-consumer-ldap-tls
  volumeClaimTemplates:
  - metadata:
      name: group-membership-cache
    spec:
      accessModes: [ReadWriteOnce]
      resources:
        requests:
          storage: 100Mi
---
# Source: nubus/charts/nubusProvisioning/charts/nats/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: ums-provisioning-nats
  namespace: tn-openbsw-opendesk
  labels:
    app.kubernetes.io/name: provisioning-nats
    helm.sh/chart: nats-0.1.2
    app.kubernetes.io/instance: ums
    app.kubernetes.io/managed-by: Helm
  annotations:
    intents.otterize.com/service-name: ums-provisioning-nats
spec:
  serviceName: ums-provisioning-nats-headless
  replicas: 1
  podManagementPolicy: Parallel
  volumeClaimTemplates:
  - metadata:
      name: nats-data
    spec:
      accessModes: [ReadWriteOnce]
      resources:
        requests:
          storage: 1Gi
  selector:
    matchLabels:
      app.kubernetes.io/name: provisioning-nats
      app.kubernetes.io/instance: ums
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      annotations:
        checksum/configmap: e3f6dffb47e09edad8dad33fa1b831b3ec846bf2fb15cb908527d44a8e48a3b6
      labels:
        app.kubernetes.io/name: provisioning-nats
        helm.sh/chart: nats-0.1.2
        app.kubernetes.io/instance: ums
        app.kubernetes.io/managed-by: Helm
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app.kubernetes.io/name
                operator: In
                values:
                - nats
            topologyKey: kubernetes.io/hostname
      securityContext:
        fsGroup: 1000
        fsGroupChangePolicy: Always
        sysctls:
        - name: net.ipv4.ip_unprivileged_port_start
          value: '1'
      serviceAccountName: ums-provisioning-nats
      containers:
      - name: nats
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsGroup: 1000
          runAsNonRoot: true
          runAsUser: 1000
          seLinuxOptions:
          seccompProfile:
            type: RuntimeDefault
        image:
          registry-1.docker.io/library/nats:2.10.10@sha256:fa26beda8a3187ccefa47afcfe9ea6d0e2f40a57c8f64d70bd63c792d7973938
        imagePullPolicy: IfNotPresent
        env:
        - name: SERVER_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: CLUSTER_ADVERTISE
          value: $(SERVER_NAME).nats.$(NAMESPACE).svc.cluster.local
        - name: CLUSTER_NAME
          value: ums-provisioning-nats
        - name: NATS_USER
          value: admin
        - name: NATS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: ums-provisioning-nats-credentials
              key: admin_password
        - name: NATS_API_USER
          valueFrom:
            secretKeyRef:
              name: ums-provisioning-api-credentials
              key: NATS_USER
        - name: NATS_API_PASSWORD
          valueFrom:
            secretKeyRef:
              name: ums-provisioning-api-credentials
              key: NATS_PASSWORD
        - name: NATS_DISPATCHER_USER
          valueFrom:
            secretKeyRef:
              name: ums-provisioning-dispatcher-credentials
              key: NATS_USER
        - name: NATS_DISPATCHER_PASSWORD
          valueFrom:
            secretKeyRef:
              name: ums-provisioning-dispatcher-credentials
              key: NATS_PASSWORD
        - name: NATS_UDM_TRANSFORMER_USER
          valueFrom:
            secretKeyRef:
              name: ums-provisioning-udm-transformer-credentials
              key: NATS_USER
        - name: NATS_UDM_TRANSFORMER_PASSWORD
          valueFrom:
            secretKeyRef:
              name: ums-provisioning-udm-transformer-credentials
              key: NATS_PASSWORD
        - name: NATS_PREFILL_USER
          valueFrom:
            secretKeyRef:
              name: ums-provisioning-prefill-credentials
              key: NATS_USER
        - name: NATS_PREFILL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: ums-provisioning-prefill-credentials
              key: NATS_PASSWORD
        - name: NATS_UDMLISTENER_USER
          valueFrom:
            secretKeyRef:
              name: ums-provisioning-udm-listener-credentials
              key: NATS_USER
        - name: NATS_UDMLISTENER_PASSWORD
          valueFrom:
            secretKeyRef:
              name: ums-provisioning-udm-listener-credentials
              key: NATS_PASSWORD
        args:
        - --config
        - /etc/nats-config/nats.conf
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /healthz?js-enabled-only=true
            port: monitor
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 5
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /healthz?js-enabled-only=true
            port: monitor
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        startupProbe:
          failureThreshold: 90
          httpGet:
            path: /healthz?js-enabled-only=true
            port: monitor
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        ports:
        - name: client
          containerPort: 4222
          protocol: TCP
        - name: cluster
          containerPort: 6222
          protocol: TCP
        - name: monitor
          containerPort: 8222
          protocol: TCP
        resources:
          requests:
            cpu: 0.1
            memory: 128Mi
        lifecycle:
          preStop:
            exec:
              command:
              - nats-server
              - -sl=ldm=/var/run/nats.pid
        volumeMounts:
        - name: var-run-volume
          mountPath: /var/run
        - name: config-volume
          mountPath: /etc/nats-config
        - name: nats-data
          mountPath: /data
      - name: reloader
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsGroup: 1000
          runAsNonRoot: true
          runAsUser: 1000
          seLinuxOptions:
          seccompProfile:
            type: RuntimeDefault
        image:
          registry-1.docker.io/natsio/nats-server-config-reloader:0.14.1@sha256:77dd4c60001ffbf442c6b25592e73b4fca06ea9406c677607192788d80453783
        imagePullPolicy: IfNotPresent
        env:
        - name: SERVER_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        args:
        - -pid
        - /var/run/nats.pid
        - -config
        - /etc/nats-config/nats.conf
        resources:
          requests:
            cpu: 10m
            memory: 16Mi
        volumeMounts:
        - name: config-volume
          mountPath: /etc/nats-config
        - name: var-run-volume
          mountPath: /var/run
      - name: nats-box
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsGroup: 1000
          runAsNonRoot: true
          runAsUser: 1000
          seLinuxOptions:
          seccompProfile:
            type: RuntimeDefault
        image:
          registry-1.docker.io/natsio/nats-box:0.14.2@sha256:c9b8ebaabb2ca4c227feb4f6b856dc72d4775ac3d71f80d2c65aa82303079011
        imagePullPolicy: IfNotPresent
        workingDir: /home/nats
        env:
        - name: SERVER_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: NATS_USER
          value: admin
        - name: NATS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: ums-provisioning-nats-credentials
              key: admin_password
        - name: NATS_API_USER
          valueFrom:
            secretKeyRef:
              name: ums-provisioning-api-credentials
              key: NATS_USER
        - name: NATS_API_PASSWORD
          valueFrom:
            secretKeyRef:
              name: ums-provisioning-api-credentials
              key: NATS_PASSWORD
        - name: NATS_DISPATCHER_USER
          valueFrom:
            secretKeyRef:
              name: ums-provisioning-dispatcher-credentials
              key: NATS_USER
        - name: NATS_DISPATCHER_PASSWORD
          valueFrom:
            secretKeyRef:
              name: ums-provisioning-dispatcher-credentials
              key: NATS_PASSWORD
        - name: NATS_UDM_TRANSFORMER_USER
          valueFrom:
            secretKeyRef:
              name: ums-provisioning-udm-transformer-credentials
              key: NATS_USER
        - name: NATS_UDM_TRANSFORMER_PASSWORD
          valueFrom:
            secretKeyRef:
              name: ums-provisioning-udm-transformer-credentials
              key: NATS_PASSWORD
        - name: NATS_PREFILL_USER
          valueFrom:
            secretKeyRef:
              name: ums-provisioning-prefill-credentials
              key: NATS_USER
        - name: NATS_PREFILL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: ums-provisioning-prefill-credentials
              key: NATS_PASSWORD
        - name: NATS_UDMLISTENER_USER
          valueFrom:
            secretKeyRef:
              name: ums-provisioning-udm-listener-credentials
              key: NATS_USER
        - name: NATS_UDMLISTENER_PASSWORD
          valueFrom:
            secretKeyRef:
              name: ums-provisioning-udm-listener-credentials
              key: NATS_PASSWORD
        - name: NATS_URL
          value:
            nats://$(SERVER_NAME).ums-provisioning-nats-headless.$(NAMESPACE).svc.cluster.local:4222
        args:
        - sh
        - -c
        - trap true INT TERM; sleep infinity & wait
        resources:
          requests:
            cpu: 10m
            memory: 16Mi
        volumeMounts:
      volumes:
      - name: var-run-volume
        emptyDir: {}
      - name: config-volume
        configMap:
          name: ums-provisioning-nats-config
          defaultMode: 420
---
# Source: nubus/charts/nubusUdmListener/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: ums-provisioning-listener
  labels:
    app.kubernetes.io/name: provisioning-listener
    helm.sh/chart: nubusUdmListener-0.44.0
    app.kubernetes.io/instance: ums
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 1.16.0
spec:
  serviceName: ums-provisioning-listener
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: provisioning-listener
      app.kubernetes.io/instance: ums
  template:
    metadata:
      annotations:
        checksum/config: fbca70d171c30a4df2e6316a63e4abcf4b830b523b81f7e907be932a85e6e7d4
        checksum/secret: b62cc2b618b70c5b69eaba4010994ba4af90f8aff1f6b8268f553a356a8b489b
      labels:
        app.kubernetes.io/name: provisioning-listener
        app.kubernetes.io/instance: ums
    spec:
      securityContext:
        fsGroup: 65534
        fsGroupChangePolicy: Always
        sysctls: []
      serviceAccountName: ums-provisioning-listener
      terminationGracePeriodSeconds: 5
      containers:
      - name: udm-listener
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsGroup: 65534
          runAsNonRoot: true
          runAsUser: 102
          seLinuxOptions:
          seccompProfile:
            type: RuntimeDefault
        image:
          registry.opencode.de/bmi/opendesk/components/supplier/univention/images-mirror/provisioning-udm-listener:0.44.0@sha256:03c8f03ca0fab92ecd3234d1f3fad3293629feae0123134641dad243f3ca328c
        imagePullPolicy: IfNotPresent
        envFrom:
        - configMapRef:
            name: ums-provisioning-listener
        command:
        - /bin/bash
        - -c
        - |
          /usr/sbin/univention-directory-listener \
          -F \
          -x \
          -d "${DEBUG_LEVEL}" \
          -b "${LDAP_BASE_DN}" \
          -D "cn=admin,${LDAP_BASE_DN}" \
          -n "${NOTIFIER_SERVER}" \
          -m "/usr/lib/univention-directory-listener/system" \
          -c "/var/lib/univention-directory-listener" \
          -y "${LDAP_PASSWORD_FILE}" -Z
        env:
        - name: NATS_USER
          value: udmlistener
        - name: NATS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: ums-provisioning-udm-listener-credentials
              key: NATS_PASSWORD
        - name: EVENTS_USERNAME_UDM
          valueFrom:
            secretKeyRef:
              name: ums-provisioning-udm-listener-credentials
              key: EVENTS_USERNAME_UDM
        - name: EVENTS_PASSWORD_UDM
          valueFrom:
            secretKeyRef:
              name: ums-provisioning-udm-listener-credentials
              key: EVENTS_PASSWORD_UDM
        ports:
        - name: http
          containerPort: 80
          protocol: TCP
        volumeMounts:
        - name: config-files
          mountPath: /etc/univention
        - name: config-files
          mountPath: /etc/ldap/ldap.conf
          subPath: ldap.conf
        - name: ums-provisioning-udm-listener-ldap-credentials-volume
          mountPath: /var/secrets/ldap_secret
          subPath: ldap.secret
          readOnly: true
        - name: ums-provisioning-udm-listener-ldap-credentials-volume
          mountPath: /var/secrets/machine_secret
          subPath: machine.secret
          readOnly: true
        - name: ums-provisioning-udm-listener-ldap-tls-volume
          mountPath: /var/secrets/ca_cert
          subPath: ca.crt
          readOnly: true
        - name: data
          mountPath: /var/lib/univention-directory-listener
        - name: data
          mountPath: /var/lib/univention-ldap/schema/id
        - name: data
          mountPath: /var/log/univention
        resources:
          requests:
            cpu: 0.1
            memory: 256Mi
      volumes:
      - name: config-files
        configMap:
          name: ums-provisioning-listener-files
      - name: ums-provisioning-udm-listener-ldap-credentials-volume
        secret:
          secretName: ums-provisioning-udm-listener-ldap-credentials
      - name: ums-provisioning-udm-listener-ldap-tls-volume
        secret:
          secretName: ums-provisioning-udm-listener-ldap-tls
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes: [ReadWriteOnce]
      resources:
        requests:
          storage: 1Gi

---
# Source: nubus/charts/nubusUmcServer/templates/statefulset-server.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: ums-umc-server
  namespace: tn-openbsw-opendesk
  labels:
    app.kubernetes.io/name: umc-server
    helm.sh/chart: nubusUmcServer-0.34.1
    app.kubernetes.io/instance: ums
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 12.0.29
  annotations:
    intents.otterize.com/service-name: ums-umc-server
spec:
  replicas: 1
  strategy:
  selector:
    matchLabels:
      app.kubernetes.io/name: umc-server
      app.kubernetes.io/instance: ums
  template:
    metadata:
      annotations:
        checksum/configmap: 5abd26e5cc09d30a27276c0dee2d6d4eb52a815dc37e2fb41760560ae6bdb657
      labels:
        app.kubernetes.io/name: umc-server
        helm.sh/chart: nubusUmcServer-0.34.1
        app.kubernetes.io/instance: ums
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/version: 12.0.29
    spec:
      securityContext:
        fsGroup: 0
        fsGroupChangePolicy: Always
      serviceAccountName: ums-umc-server
      terminationGracePeriodSeconds: 5
      initContainers:
      - name: prepare-config
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            add:
            - DAC_OVERRIDE
            - SETGID
            - SETUID
            - SYS_ADMIN
            - NET_ADMIN
            - AUDIT_CONTROL
            - CHOWN
            - FOWNER
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsGroup: 0
          runAsNonRoot: false
          runAsUser: 0
          seLinuxOptions:
          seccompProfile:
            type: RuntimeDefault
        resources:
          requests:
            cpu: 0.1
            memory: 256Mi
        image:
          registry.opencode.de/bmi/opendesk/components/supplier/univention/images-mirror/umc-server:0.34.1@sha256:4addb518b7b622f0e82dbdde30bbb8d8da6cc197528268d2ad856635f3bbe64a
        imagePullPolicy: IfNotPresent
        envFrom:
        - configMapRef:
            name: ums-umc-server
        command:
        - bash
        - -c
        - |
          /entrypoint.d/50-entrypoint.sh
          cp -a /var/lib/sss/* /target/var/lib/sss/
          if [[ ! -d /target/var/lib/sss/pipes/private ]]; then
            mkdir -p /target/var/lib/sss/pipes/private
          fi
          chmod 750 /target/var/lib/sss/pipes/private/
          chown root:root -R /target/var/lib/sss/pipes /target/var/lib/sss/db /etc/sssd/sssd.conf
          chmod 0600 /etc/sssd/sssd.conf
        volumeMounts:
        - name: etc-ldap
          mountPath: /etc/ldap
        - name: etc-pam
          mountPath: /etc/pam.d
        - name: etc-sssd
          mountPath: /etc/sssd
        - name: etc-univention-ssl
          mountPath: /etc/univention/ssl
        - name: etc-univention-reports
          mountPath: /etc/univention/directory/reports
        - name: acl-cache
          mountPath: /var/cache/univention-management-console/acls
        - name: config-cache
          mountPath: /var/cache/univention-config
        - name: univention-logs
          mountPath: /var/log/univention
        - name: var-lib-sss
          mountPath: /target/var/lib/sss
        - name: var-www-univention
          mountPath: /var/www/univention
        - name: run
          mountPath: /run
        - name: tmp
          mountPath: /tmp
        - name: usr-share-umc-saml-idp
          mountPath: /usr/share/univention-management-console/saml/idp
        - mountPath: /var/secrets/ssl
          name: certificates
        - name: config-map-ucr
          mountPath: /etc/univention/base.conf
          subPath: base.conf
        - name: config-map-ucr
          mountPath: /etc/univention/base-defaults.conf
          subPath: base-defaults.conf
        - name: ums-umc-server-ldap-credentials-volume
          mountPath: /etc/ldap.secret
          subPath: ldap.secret
          readOnly: true
        - name: ums-umc-server-ldap-credentials-volume
          mountPath: /etc/machine.secret
          subPath: machine.secret
          readOnly: true
        - name: ums-umc-server-smtp-credentials-custom-volume
          mountPath: /var/secrets/smtp_secret
          subPath: password
          readOnly: true
        - name: ums-umc-server-postgresql-opendesk-credentials-volume
          mountPath: /var/secrets/db_password
          subPath: umcServerDatabasePassword
          readOnly: true
        - name: ums-umc-server-memcached-opendesk-credentials-volume
          mountPath: /var/secrets/memcached_password
          subPath: umcServerMemcachedPassword
          readOnly: true
        - name: ums-umc-server-ldap-tls-volume
          mountPath: /var/secrets/ca_cert
          subPath: ca.crt
          readOnly: true
        - name: ums-umc-server-ldap-tls-volume
          mountPath: /var/secrets/cert_pem
          subPath: tls.crt
          readOnly: true
        - name: ums-umc-server-ldap-tls-volume
          mountPath: /var/secrets/private_key
          subPath: tls.key
          readOnly: true
      - name: load-internal-plugins
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsGroup: 0
          runAsNonRoot: false
          runAsUser: 0
          seLinuxOptions:
          seccompProfile:
            type: RuntimeDefault
        image:
          registry.opencode.de/bmi/opendesk/components/supplier/univention/images-mirror/umc-server:0.34.1@sha256:4addb518b7b622f0e82dbdde30bbb8d8da6cc197528268d2ad856635f3bbe64a
        imagePullPolicy: IfNotPresent
        command:
        - sh
        - -c
        - |
          cp -Rv /usr/share/univention-management-console/modules/ /target/umc-modules
          cp -Rv /usr/lib/python3/dist-packages/univention/udm/modules /target/udm-modules
          cp -Rv /usr/lib/python3/dist-packages/univention/admin/hooks.d /target/udm-hooks.d
          cp -Rv /usr/lib/python3/dist-packages/univention/admin/syntax.d /target/udm-syntax.d
          cp -Rv /usr/lib/python3/dist-packages/univention/admin/handlers /target/udm-handlers
          mkdir -p /target/udm-modules /target/udm-hooks.d /target/udm-syntax.d /target/udm-handlers /target/umc-modules /target/umc-icons
        volumeMounts:
        - name: plugin-targets
          mountPath: /target
        resources:
          requests:
            cpu: 0.1
            memory: 256Mi
      - name: load-portal-extension
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsGroup: 0
          runAsNonRoot: false
          runAsUser: 0
          seLinuxOptions:
          seccompProfile:
            type: RuntimeDefault
        image:
          registry.opencode.de/bmi/opendesk/components/supplier/univention/images-mirror/portal-extension:0.38.0@sha256:aa6ec6b99810e05655d98fa1192bc2eabb855335f7a04aa4cd96ed5b5645d736
        imagePullPolicy: IfNotPresent
        volumeMounts:
        - name: plugin-targets
          mountPath: /target
        resources:
          requests:
            cpu: 0.1
            memory: 256Mi
      - name: load-ox-extension
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsGroup: 0
          runAsNonRoot: false
          runAsUser: 0
          seLinuxOptions:
          seccompProfile:
            type: RuntimeDefault
        image:
          registry.opencode.de/bmi/opendesk/components/supplier/univention/images-mirror/ox-extension:0.11.0@sha256:2cb5a9683b6ff81b995a5c71da52c2ff8177b662bb0be8f11e9cd0c6b48d8a11
        imagePullPolicy: IfNotPresent
        volumeMounts:
        - name: plugin-targets
          mountPath: /target
        resources:
          requests:
            cpu: 0.1
            memory: 256Mi
      - name: load-opendesk-extension
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsGroup: 0
          runAsNonRoot: false
          runAsUser: 0
          seLinuxOptions:
          seccompProfile:
            type: RuntimeDefault
        image:
          registry.opencode.de/bmi/opendesk/components/platform-development/images/opendesk-nubus:1.7.4@sha256:23976c92c1b9f366b04e5e17fb52912b624720e3a97f5fee0da43afe75a6645e
        imagePullPolicy: IfNotPresent
        volumeMounts:
        - name: plugin-targets
          mountPath: /target
        resources:
          requests:
            cpu: 0.1
            memory: 256Mi

      containers:
      - name: umc-server
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsGroup: 0
          runAsNonRoot: false
          runAsUser: 0
          seLinuxOptions:
          seccompProfile:
            type: RuntimeDefault
        image:
          registry.opencode.de/bmi/opendesk/components/supplier/univention/images-mirror/umc-server:0.34.1@sha256:4addb518b7b622f0e82dbdde30bbb8d8da6cc197528268d2ad856635f3bbe64a
        imagePullPolicy: IfNotPresent
        command:
        - /bin/bash
        - -c
        - |
          /usr/sbin/univention-management-console-server \
          --no-daemonize-module-processes \
          --log-file stdout
        env:
        - name: SELF_SERVICE_DB_SECRET
          valueFrom:
            secretKeyRef:
              name: ums-umc-server-postgresql-opendesk-credentials
              key: umcServerDatabasePassword
        - name: SELF_SERVICE_MEMCACHED_SECRET
          valueFrom:
            secretKeyRef:
              name: ums-umc-server-memcached-opendesk-credentials
              key: umcServerMemcachedPassword
        - name: PYTHONDONTWRITEBYTECODE
          value: '1'
        envFrom:
        - configMapRef:
            name: ums-umc-server
        volumeMounts:
        - name: etc-ldap
          mountPath: /etc/ldap
          readOnly: true
        - name: etc-pam
          mountPath: /etc/pam.d
          readOnly: true
        - name: etc-sssd
          mountPath: /etc/sssd
          readOnly: true
        - name: etc-univention-ssl
          mountPath: /etc/univention/ssl
          readOnly: true
        - name: etc-univention-reports
          mountPath: /etc/univention/directory/reports
          readOnly: true
        - name: acl-cache
          mountPath: /var/cache/univention-management-console/acls
        - name: config-cache
          mountPath: /var/cache/univention-config
          readOnly: true
        - name: univention-logs
          mountPath: /var/log/univention
        - name: var-lib-sss
          mountPath: /var/lib/sss
        - name: var-www-univention
          mountPath: /var/www/univention
          readOnly: true
        - name: run
          mountPath: /run
        - name: tmp
          mountPath: /tmp
        - name: usr-share-umc-saml-idp
          mountPath: /usr/share/univention-management-console/saml/idp
          readOnly: true
        - mountPath: /var/secrets/ssl
          name: certificates
        - name: config-map-ucr
          mountPath: /etc/univention/base.conf
          subPath: base.conf
        - name: config-map-ucr
          mountPath: /etc/univention/base-defaults.conf
          subPath: base-defaults.conf
        - name: ums-umc-server-ldap-credentials-volume
          mountPath: /etc/ldap.secret
          subPath: ldap.secret
          readOnly: true
        - name: ums-umc-server-ldap-credentials-volume
          mountPath: /etc/machine.secret
          subPath: machine.secret
          readOnly: true
        - name: ums-umc-server-smtp-credentials-custom-volume
          mountPath: /var/secrets/smtp_secret
          subPath: password
          readOnly: true
        - name: ums-umc-server-postgresql-opendesk-credentials-volume
          mountPath: /var/secrets/db_password
          subPath: umcServerDatabasePassword
          readOnly: true
        - name: ums-umc-server-memcached-opendesk-credentials-volume
          mountPath: /var/secrets/memcached_password
          subPath: umcServerMemcachedPassword
          readOnly: true
        - name: ums-umc-server-ldap-tls-volume
          mountPath: /var/secrets/ca_cert
          subPath: ca.crt
          readOnly: true
        - name: ums-umc-server-ldap-tls-volume
          mountPath: /var/secrets/cert_pem
          subPath: tls.crt
          readOnly: true
        - name: ums-umc-server-ldap-tls-volume
          mountPath: /var/secrets/private_key
          subPath: tls.key
          readOnly: true
        - name: plugin-targets
          mountPath: /usr/lib/python3/dist-packages/univention/udm/modules
          subPath: udm-modules
          readOnly: true
        - name: plugin-targets
          mountPath: /usr/lib/python3/dist-packages/univention/admin/hooks.d
          subPath: udm-hooks.d
          readOnly: true
        - name: plugin-targets
          mountPath: /usr/lib/python3/dist-packages/univention/admin/syntax.d
          subPath: udm-syntax.d
          readOnly: true
        - name: plugin-targets
          mountPath: /usr/lib/python3/dist-packages/univention/admin/handlers
          subPath: udm-handlers
          readOnly: true
        - name: plugin-targets
          mountPath: /usr/share/univention-management-console-frontend/js/dijit/themes/umc/icons/
          subPath: umc-icons
          readOnly: true
        - name: plugin-targets
          mountPath: /usr/share/univention-management-console/modules/
          subPath: umc-modules
          readOnly: true
        - name: passwordreset-email-body
          mountPath: /usr/share/univention-self-service/email_bodies
          readOnly: true
        ports:
        - name: http
          containerPort: 8090
          protocol: TCP
        livenessProbe:
          tcpSocket:
            port: http
          initialDelaySeconds: 10
          timeoutSeconds: 3
          periodSeconds: 30
          failureThreshold: 3
          successThreshold: 1
        readinessProbe:
          tcpSocket:
            port: http
          initialDelaySeconds: 10
          timeoutSeconds: 3
          periodSeconds: 10
          failureThreshold: 30
          successThreshold: 1
        resources:
          requests:
            cpu: 0.1
            memory: 256Mi
      - name: sssd-sidecar
        securityContext:
          allowPrivilegeEscalation: true
          capabilities:
            add:
            - DAC_OVERRIDE
            - SETGID
            - AUDIT_WRITE
            - SETUID
            - CHOWN
            - SETPCAP
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            - SYS_CHROOT
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsGroup: 0
          runAsNonRoot: false
          runAsUser: 0
          seLinuxOptions:
          seccompProfile:
            type: RuntimeDefault
        image:
          registry.opencode.de/bmi/opendesk/components/supplier/univention/images-mirror/umc-server:0.34.1@sha256:4addb518b7b622f0e82dbdde30bbb8d8da6cc197528268d2ad856635f3bbe64a
        imagePullPolicy: IfNotPresent
        command:
        - sh
        - -c
        - |
          sssd -i --logger stderr --debug-level 2
        envFrom:
        - configMapRef:
            name: ums-umc-server
        volumeMounts:
        - name: etc-ldap
          mountPath: /etc/ldap
          readOnly: true
        - name: etc-pam
          mountPath: /etc/pam.d
          readOnly: true
        - name: etc-sssd
          mountPath: /etc/sssd
          readOnly: true
        - name: etc-univention-ssl
          mountPath: /etc/univention/ssl
          readOnly: true
        - name: run
          mountPath: /run
        - name: usr-share-umc-saml-idp
          readOnly: true
          mountPath: /usr/share/univention-management-console/saml/idp
        - name: var-lib-sss
          mountPath: /var/lib/sss
        - name: sssd-db
          mountPath: /var/lib/sss/db/
        - mountPath: /var/secrets/ssl
          name: certificates
        resources:
          requests:
            cpu: 0.1
            memory: 256Mi
      volumes:
      - name: certificates
        secret:
          secretName: ums-saml-tls
      - name: etc-ldap
        emptyDir:
          medium: Memory
      - name: etc-pam
        emptyDir:
          medium: Memory
      - name: etc-sssd
        emptyDir:
          medium: Memory
      - name: etc-univention-ssl
        emptyDir:
          medium: Memory
      - name: etc-univention-reports
        emptyDir:
          medium: Memory
      - name: acl-cache
        emptyDir:
          medium: Memory
      - name: config-cache
        emptyDir:
          medium: Memory
      - name: univention-logs
        emptyDir:
          medium: Memory
      - name: sssd-socket
        emptyDir:
          medium: Memory
      - name: var-lib-sss
        emptyDir: {}
      - name: var-www-univention
        emptyDir:
          medium: Memory
      - name: run
        emptyDir:
          medium: Memory
      - name: tmp
        emptyDir:
          medium: Memory
      - name: usr-share-umc-saml-idp
        emptyDir:
          medium: Memory
      - name: sssd-db
        emptyDir:
          medium: Memory
      - name: config-map-ucr
        configMap:
          name: ums-stack-data-ums-ucr
      - name: ums-umc-server-ldap-credentials-volume
        secret:
          secretName: ums-umc-server-ldap-credentials
      - name: ums-umc-server-smtp-credentials-custom-volume
        secret:
          secretName: ums-umc-server-smtp-credentials-custom
      - name: ums-umc-server-postgresql-opendesk-credentials-volume
        secret:
          secretName: ums-umc-server-postgresql-opendesk-credentials
      - name: ums-umc-server-memcached-opendesk-credentials-volume
        secret:
          secretName: ums-umc-server-memcached-opendesk-credentials
      - name: ums-umc-server-ldap-tls-volume
        secret:
          secretName: ums-umc-server-ldap-tls
      - name: passwordreset-email-body
        configMap:
          name: ums-umc-server-pw-reset-email-body
          defaultMode: 0444
      - name: plugin-targets
        emptyDir: {}
---
# Source: nubus/charts/nubusProvisioning/templates/job-register-consumer.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: ums-provisioning-register-consumers
  namespace: tn-openbsw-opendesk
  labels:
    app.kubernetes.io/instance: ums
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: ums-provisioning-registerConsumers
    helm.sh/chart: nubusProvisioning-0.44.0
  annotations:
    intents.otterize.com/service-name: ums-provisioning-register-consumers
spec:
  template:
    metadata:
      annotations:
        checksum/configmap: 917567cd1bf78b07341165ced3d60f9dafa444131455805ae1605e064a9a10c7
      labels:
        app.kubernetes.io/instance: ums
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: ums-provisioning-register-consumers
        helm.sh/chart: nubusProvisioning-0.44.0
    spec:
      restartPolicy: Never
      volumes:
      - name: consumer-secrets
        secret:
          secretName: ums-provisioning-register-consumers-json-secrets
      - name: scripts-volume
        configMap:
          name: ums-provisioning-wait-for-api
          defaultMode: 0555
      - name: wait-for-data-loader
        configMap:
          name: ums-provisioning-register-consumers
      initContainers:
      - name: wait-for-provisioning-api
        image:
          registry.opencode.de/bmi/opendesk/components/supplier/univention/images-mirror/wait-for-dependency:0.26.0@sha256:a31fde86bf21c597a31356fe492ab7e7a03a89282ca215eb7100763d6eb96b6b
        imagePullPolicy: IfNotPresent
        envFrom:
        - configMapRef:
            name: ums-provisioning-register-consumers
        command: [/bin/bash, -c, '/scripts/wait-for-api.sh ${PROVISIONING_API_BASE_URL}']
        resources:
          requests:
            cpu: 0.1
            memory: 64Mi
        volumeMounts:
        - name: scripts-volume
          mountPath: /scripts
      - name: wait-for-data-loader
        command: [/bin/bash, /scripts/wait-for-data-loader.sh]
        image:
          registry.opencode.de/bmi/opendesk/components/supplier/univention/images-mirror/wait-for-dependency:0.26.0@sha256:a31fde86bf21c597a31356fe492ab7e7a03a89282ca215eb7100763d6eb96b6b
        imagePullPolicy: IfNotPresent
        envFrom:
        - configMapRef:
            name: ums-provisioning-register-consumers
        - secretRef:
            name: ums-provisioning-register-consumers-credentials
        volumeMounts:
        - name: wait-for-data-loader
          mountPath: /scripts
        resources:
          requests:
            cpu: 0.1
            memory: 64Mi
      containers:
      - name: consumer-registration
        image:
          registry.opencode.de/bmi/opendesk/components/supplier/univention/images-mirror/wait-for-dependency:0.26.0@sha256:a31fde86bf21c597a31356fe492ab7e7a03a89282ca215eb7100763d6eb96b6b
        imagePullPolicy: IfNotPresent
        volumeMounts:
        - name: consumer-secrets
          mountPath: /secrets
        envFrom:
        - configMapRef:
            name: ums-provisioning-register-consumers
        - secretRef:
            name: ums-provisioning-register-consumers-credentials
        command:
        - /bin/sh
        - -c
        args:
        - |
          for file in /secrets/*; do
            filename=$(basename "${file}" .json)
            response=$(set +x; curl -s -o response.txt -w "%{http_code}" -u "${ADMIN_USERNAME}":"${ADMIN_PASSWORD}" \
            -H 'Content-Type: application/json' \
            -d @"${file}" "${PROVISIONING_API_BASE_URL}")

            if [ "${response}" -eq 201 ]; then
              echo "Successful registration of the consumer: "${filename}""
            elif [ "${response}" -eq 200 ]; then
              echo "Consumer with the name '"${filename}"' is already registered with the same parameters"
            else
              echo "Failed to register the consumer: "${filename}"
          Response code: "${response}"
          Response body: $(cat response.txt)"
              exit 1
            fi
            echo ------------------------------------
          done
        resources:
          requests:
            cpu: 0.1
            memory: 64Mi
---
# Source: nubus/charts/nubusStackDataUms/templates/job-load-data-ums.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: ums-stack-data-ums-1
  labels:
    app.kubernetes.io/name: stack-data-ums
    helm.sh/chart: nubusStackDataUms-0.73.0
    app.kubernetes.io/instance: ums
    app.kubernetes.io/managed-by: Helm
  annotations:

    argocd.argoproj.io/hook: Sync
    argocd.argoproj.io/hook-delete-policy: HookSucceeded
    intents.otterize.com/service-name: ums-stack-data-ums
spec:
  backoffLimit: 6
  template:
    metadata:
      name: stack-data-ums
      labels:
        app.kubernetes.io/name: stack-data-ums
        helm.sh/chart: nubusStackDataUms-0.73.0
        app.kubernetes.io/instance: ums
        app.kubernetes.io/managed-by: Helm
      annotations:
        checksum/config: 9c107d8825489848caf88309f47c3617ec193352ce68f609af3b2e53b737385c
        checksum/config-data: 88d5a5ab400888cbd0e014b3ab40e3ec9aac7bb29985d4e681a8907ca34c9c8b

        argocd.argoproj.io/hook: Sync
        argocd.argoproj.io/hook-delete-policy: HookSucceeded
        intents.otterize.com/service-name: ums-stack-data-ums
    spec:
      restartPolicy: Never

      initContainers:
      - name: load-internal-plugins
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsGroup: 1000
          runAsNonRoot: true
          runAsUser: 1000
          seLinuxOptions:
          seccompProfile:
            type: RuntimeDefault
        image:
          registry.opencode.de/bmi/opendesk/components/supplier/univention/images-mirror/data-loader:0.73.0@sha256:9babbdd0879aed7da928bf5034bf5f311511a8d07c242d2b10d067cc5dc0fd41
        imagePullPolicy: IfNotPresent
        command:
        - sh
        - -c
        - |
          mkdir /target/udm-data-loader
          cp -RLv --preserve=all /join-data/* /target/udm-data-loader
        volumeMounts:
        - name: plugin-targets
          mountPath: /target
        - name: data
          mountPath: /join-data
        resources:
      - name: load-portal-extension
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsGroup: 1000
          runAsNonRoot: true
          runAsUser: 1000
          seLinuxOptions:
          seccompProfile:
            type: RuntimeDefault
        image:
          registry.opencode.de/bmi/opendesk/components/supplier/univention/images-mirror/portal-extension:0.38.0@sha256:aa6ec6b99810e05655d98fa1192bc2eabb855335f7a04aa4cd96ed5b5645d736
        imagePullPolicy: IfNotPresent
        volumeMounts:
        - name: plugin-targets
          mountPath: /target
        resources:
      - name: load-ox-extension
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsGroup: 1000
          runAsNonRoot: true
          runAsUser: 1000
          seLinuxOptions:
          seccompProfile:
            type: RuntimeDefault
        image:
          registry.opencode.de/bmi/opendesk/components/supplier/univention/images-mirror/ox-extension:0.11.0@sha256:2cb5a9683b6ff81b995a5c71da52c2ff8177b662bb0be8f11e9cd0c6b48d8a11
        imagePullPolicy: IfNotPresent
        volumeMounts:
        - name: plugin-targets
          mountPath: /target
        resources:
      - name: load-opendesk-extension
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsGroup: 1000
          runAsNonRoot: true
          runAsUser: 1000
          seLinuxOptions:
          seccompProfile:
            type: RuntimeDefault
        image:
          registry.opencode.de/bmi/opendesk/components/platform-development/images/opendesk-nubus:1.7.4@sha256:23976c92c1b9f366b04e5e17fb52912b624720e3a97f5fee0da43afe75a6645e
        imagePullPolicy: IfNotPresent
        volumeMounts:
        - name: plugin-targets
          mountPath: /target
        resources:
      - name: wait-for-udm-rest-api
        command: [/bin/sh, -c, /usr/local/bin/wait-for-udm-rest-api.py]
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsGroup: 1000
          runAsNonRoot: true
          runAsUser: 1000
          seLinuxOptions:
          seccompProfile:
            type: RuntimeDefault
        image:
          registry.opencode.de/bmi/opendesk/components/supplier/univention/images-mirror/data-loader:0.73.0@sha256:9babbdd0879aed7da928bf5034bf5f311511a8d07c242d2b10d067cc5dc0fd41
        imagePullPolicy: IfNotPresent
        envFrom:
        - configMapRef:
            name: ums-stack-data-ums
        volumeMounts:
        - name: ums-udm-rest-api-credentials
          mountPath: /run/secrets/univention.de/data-loader/udm_secret
          subPath: machine.secret
        resources:
          requests:
            cpu: 0.1
            memory: 256Mi

      containers:
      - name: load-data-ums
        command:
        - process-all.sh
        - --template-context
        - /template-context/context.yaml
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsGroup: 1000
          runAsNonRoot: true
          runAsUser: 1000
          seLinuxOptions:
          seccompProfile:
            type: RuntimeDefault
        image:
          registry.opencode.de/bmi/opendesk/components/supplier/univention/images-mirror/data-loader:0.73.0@sha256:9babbdd0879aed7da928bf5034bf5f311511a8d07c242d2b10d067cc5dc0fd41
        imagePullPolicy: IfNotPresent
        envFrom:
        - configMapRef:
            name: ums-stack-data-ums
        env:
        - name: SET_STATUS_FLAG
          value: 'true'
        volumeMounts:
        - name: ums-udm-rest-api-credentials
          mountPath: /run/secrets/univention.de/data-loader/udm_secret
          subPath: machine.secret
        - name: plugin-targets
          mountPath: /join-data
          subPath: udm-data-loader
          readOnly: true
        - name: context-config
          mountPath: /template-context
          readOnly: true
        resources:
          requests:
            cpu: 0.1
            memory: 256Mi
      volumes:
      - name: ums-udm-rest-api-credentials
        secret:
          secretName: ums-udm-rest-api-credentials
      - name: data
        configMap:
          name: ums-stack-data-ums-data
      - name: context-config
        secret:
          secretName: ums-stack-data-ums-context
      - name: plugin-targets
        emptyDir: {}

---
# Source: nubus/charts/nubusGuardian/templates/ingresses.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ums-guardian-management-ui
  namespace: tn-openbsw-opendesk
  labels:
    app.kubernetes.io/instance: ums
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: guardian
    app.kubernetes.io/version: 2.0.0
    helm.sh/chart: nubusGuardian-0.14.0
  annotations:
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - portal.opendesk.apps.digilab.network
    secretName: opendesk-certificates-tls
  rules:
  - host: portal.opendesk.apps.digilab.network
    http:
      paths:
      - pathType: Prefix
        path: /univention/guardian/management-ui
        backend:
          service:
            name: ums-guardian-management-ui
            port:
              number: 80
---
# Source: nubus/charts/nubusGuardian/templates/ingresses.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ums-guardian-management-api
  namespace: tn-openbsw-opendesk
  labels:
    app.kubernetes.io/instance: ums
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: guardian
    app.kubernetes.io/version: 2.0.0
    helm.sh/chart: nubusGuardian-0.14.0
  annotations:
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - portal.opendesk.apps.digilab.network
    secretName: opendesk-certificates-tls
  rules:
  - host: portal.opendesk.apps.digilab.network
    http:
      paths:
      - pathType: Prefix
        path: /guardian/management
        backend:
          service:
            name: ums-guardian-management-api
            port:
              number: 80
---
# Source: nubus/charts/nubusGuardian/templates/ingresses.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ums-guardian-authorization-api
  namespace: tn-openbsw-opendesk
  labels:
    app.kubernetes.io/instance: ums
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: guardian
    app.kubernetes.io/version: 2.0.0
    helm.sh/chart: nubusGuardian-0.14.0
  annotations:
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - portal.opendesk.apps.digilab.network
    secretName: opendesk-certificates-tls
  rules:
  - host: portal.opendesk.apps.digilab.network
    http:
      paths:
      - pathType: Prefix
        path: /guardian/authorization
        backend:
          service:
            name: ums-guardian-authorization-api
            port:
              number: 80
---
# Source: nubus/charts/nubusKeycloakExtensions/templates/ingress-proxy.yaml
# SPDX-License-Identifier: AGPL-3.0-only
# SPDX-FileCopyrightText: 2024 Univention GmbH---

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ums-keycloak-extensions-proxy
  labels:
    app.kubernetes.io/instance: ums
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: ums-keycloak-extensions-proxy
    app.kubernetes.io/version: 21.0.1
    helm.sh/chart: nubusKeycloakExtensions-0.11.0
  annotations:
    nginx.ingress.kubernetes.io/proxy-buffer-size: 8k
    nginx.org/proxy-buffer-size: 8k
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - id.opendesk.apps.digilab.network
    secretName: opendesk-certificates-tls
  rules:
  - host: id.opendesk.apps.digilab.network
    http:
      paths:
      - pathType: Prefix
        path: /realms/
        backend:
          service:
            name: ums-keycloak-extensions-proxy
            port:
              name: http
      - pathType: Prefix
        path: /admin/
        backend:
          service:
            name: ums-keycloak-extensions-proxy
            port:
              name: http
      - pathType: Prefix
        path: /js/
        backend:
          service:
            name: ums-keycloak-extensions-proxy
            port:
              name: http
      - pathType: Prefix
        path: /resources/
        backend:
          service:
            name: ums-keycloak-extensions-proxy
            port:
              name: http
      - pathType: Prefix
        path: /fingerprintjs
        backend:
          service:
            name: ums-keycloak-extensions-proxy
            port:
              name: http
---
# Source: nubus/charts/nubusNotificationsApi/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ums-notifications-api
  namespace: tn-openbsw-opendesk
  labels:
    app.kubernetes.io/instance: ums
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: notifications-api
    app.kubernetes.io/version: 1.16.0
    helm.sh/chart: nubusNotificationsApi-0.42.2
  annotations:
    intents.otterize.com/service-name: ums-notifications-api
    nginx.ingress.kubernetes.io/rewrite-target: /$2$3
    nginx.ingress.kubernetes.io/use-regex: 'true'
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - portal.opendesk.apps.digilab.network
    secretName: opendesk-certificates-tls
  rules:
  - host: portal.opendesk.apps.digilab.network
    http:
      paths:
      - pathType: ImplementationSpecific
        path: /(univention/portal/notifications-api/)(.*)$
        backend:
          service:
            name: ums-notifications-api
            port:
              name: http
---
# Source: nubus/charts/nubusPortalFrontend/templates/ingresses.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ums-portal-frontend-rewrites
  namespace: tn-openbsw-opendesk
  labels:
    app.kubernetes.io/instance: ums
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: portal-frontend
    app.kubernetes.io/version: 1.16.0
    helm.sh/chart: nubusPortalFrontend-0.42.2
  annotations:
    intents.otterize.com/service-name: ums-portal-frontend
    nginx.ingress.kubernetes.io/rewrite-target: /$2$3
    nginx.ingress.kubernetes.io/use-regex: 'true'
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - portal.opendesk.apps.digilab.network
    secretName: opendesk-certificates-tls
  rules:
  - host: portal.opendesk.apps.digilab.network
    http:
      paths:
      - pathType: ImplementationSpecific
        path: /univention/(portal|selfservice)/$
        backend:
          service:
            name: ums-portal-frontend
            port:
              name: http
      - pathType: ImplementationSpecific
        path: /univention/(portal|selfservice)/index.html$
        backend:
          service:
            name: ums-portal-frontend
            port:
              name: http
      - pathType: ImplementationSpecific
        path: /univention/(portal|selfservice)/(css|fonts|i18n|media|js|oidc|custom)(/.*)$
        backend:
          service:
            name: ums-portal-frontend
            port:
              name: http
      - pathType: ImplementationSpecific
        path: /univention/(portal)/(icons)(/.*)$
        backend:
          service:
            name: ums-portal-frontend
            port:
              name: http
---
# Source: nubus/charts/nubusPortalFrontend/templates/ingresses.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ums-portal-frontend-redirects
  namespace: tn-openbsw-opendesk
  labels:
    app.kubernetes.io/instance: ums
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: portal-frontend
    app.kubernetes.io/version: 1.16.0
    helm.sh/chart: nubusPortalFrontend-0.42.2
  annotations:
    intents.otterize.com/service-name: ums-portal-frontend
    nginx.ingress.kubernetes.io/permanent-redirect: /univention/portal/
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - portal.opendesk.apps.digilab.network
    secretName: opendesk-certificates-tls
  rules:
  - host: portal.opendesk.apps.digilab.network
    http:
      paths:
      - pathType: ImplementationSpecific
        path: /$
        backend:
          service:
            name: ums-portal-frontend
            port:
              name: http
      - pathType: ImplementationSpecific
        path: /univention$
        backend:
          service:
            name: ums-portal-frontend
            port:
              name: http
      - pathType: ImplementationSpecific
        path: /univention/$
        backend:
          service:
            name: ums-portal-frontend
            port:
              name: http
      - pathType: ImplementationSpecific
        path: /univention/portal$
        backend:
          service:
            name: ums-portal-frontend
            port:
              name: http
      - pathType: ImplementationSpecific
        path: /univention/selfservice$
        backend:
          service:
            name: ums-portal-frontend
            port:
              name: http
---
# Source: nubus/charts/nubusPortalServer/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ums-portal-server
  namespace: tn-openbsw-opendesk
  labels:
    app.kubernetes.io/instance: ums
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: portal-server
    app.kubernetes.io/version: 1.16.0
    helm.sh/chart: nubusPortalServer-0.42.2
  annotations:
    intents.otterize.com/service-name: ums-portal-server
    nginx.ingress.kubernetes.io/rewrite-target: /$2$3
    nginx.ingress.kubernetes.io/use-regex: 'true'
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - portal.opendesk.apps.digilab.network
    secretName: opendesk-certificates-tls
  rules:
  - host: portal.opendesk.apps.digilab.network
    http:
      paths:
      - pathType: ImplementationSpecific
        path: /()(univention/portal/|univention/selfservice/)(portal.json|navigation.json)$
        backend:
          service:
            name: ums-portal-server
            port:
              name: http
---
# Source: nubus/charts/nubusUdmRestApi/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ums-udm-rest-api
  namespace: tn-openbsw-opendesk
  labels:
    app.kubernetes.io/instance: ums
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: udm-rest-api
    app.kubernetes.io/version: 12.0.7
    helm.sh/chart: nubusUdmRestApi-0.25.1
  annotations:
    intents.otterize.com/service-name: ums-udm-rest-api
    nginx.ingress.kubernetes.io/configuration-snippet-disabled: |
      rewrite ^/univention(/udm/.*)$ $1 break;
    nginx.ingress.kubernetes.io/proxy-buffer-size: 64k
    nginx.ingress.kubernetes.io/rewrite-target: /$2$3
    nginx.ingress.kubernetes.io/use-regex: 'true'
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - portal.opendesk.apps.digilab.network
    secretName: opendesk-certificates-tls
  rules:
  - host: portal.opendesk.apps.digilab.network
    http:
      paths:
      - pathType: ImplementationSpecific
        path: /(univention/)(udm/.*)$
        backend:
          service:
            name: ums-udm-rest-api
            port:
              name: http
---
# Source: nubus/charts/nubusUmcGateway/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ums-umc-gateway
  namespace: tn-openbsw-opendesk
  labels:
    app.kubernetes.io/instance: ums
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: umc-gateway
    app.kubernetes.io/version: 12.0.29
    helm.sh/chart: nubusUmcGateway-0.34.1
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /$2$3
    nginx.ingress.kubernetes.io/use-regex: 'true'
    nginx.ingress.kubernetes.io/enable-cors: 'true'
    nginx.ingress.kubernetes.io/cors-allow-origin: https://portal.opendesk.apps.digilab.network,
      https://id.opendesk.apps.digilab.network
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - portal.opendesk.apps.digilab.network
    secretName: opendesk-certificates-tls
  rules:
  - host: portal.opendesk.apps.digilab.network
    http:
      paths:
      - pathType: ImplementationSpecific
        path: /()(univention/)(languages.json|meta.json|theme.css)$
        backend:
          service:
            name: ums-umc-gateway
            port:
              name: http
      - pathType: ImplementationSpecific
        path: /()(univention/)((js|management|themes)/.*)$
        backend:
          service:
            name: ums-umc-gateway
            port:
              name: http
      - pathType: ImplementationSpecific
        path: /()(univention/login/)(dialog.js|main.js|LoginDialog.js|i18n/en/main.json)$
        backend:
          service:
            name: ums-umc-gateway
            port:
              name: http
---
# Source: nubus/charts/nubusUmcServer/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ums-umc-server
  namespace: tn-openbsw-opendesk
  labels:
    app.kubernetes.io/instance: ums
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: umc-server
    app.kubernetes.io/version: 12.0.29
    helm.sh/chart: nubusUmcServer-0.34.1
  annotations:
    intents.otterize.com/service-name: ums-umc-server
    nginx.ingress.kubernetes.io/configuration-snippet: |
      proxy_set_header X-UMC-HTTPS 'on';
    nginx.ingress.kubernetes.io/rewrite-target: /$2$3
    nginx.ingress.kubernetes.io/use-regex: 'true'
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - portal.opendesk.apps.digilab.network
    secretName: opendesk-certificates-tls
  rules:
  - host: portal.opendesk.apps.digilab.network
    http:
      paths:
      - pathType: ImplementationSpecific
        path: /(univention)/(auth|logout|saml|get|set|command|upload)(.*)$
        backend:
          service:
            name: ums-umc-server
            port:
              name: http
---
# Source: nubus/templates/ingresses.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ums-portal-customization
  annotations:

    nginx.ingress.kubernetes.io/proxy-body-size: 128k
    nginx.ingress.kubernetes.io/proxy-buffer-size: 64k
    nginx.ingress.kubernetes.io/proxy-buffers-number: '4'
    nginx.ingress.kubernetes.io/proxy-busy-buffers-size: 128k
    nginx.ingress.kubernetes.io/proxy-http-version: '1.1'
    nginx.ingress.kubernetes.io/proxy-set-headers: |
      Host $http_host;
      X-Forwarded-For $proxy_add_x_forwarded_for;
      X-Forwarded-Host $http_x_forwarded_host;
      X-Forwarded-Port $http_x_forwarded_port;
      X-Forwarded-Proto $http_x_forwarded_proto;
    nginx.ingress.kubernetes.io/use-regex: 'true'
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - portal.opendesk.apps.digilab.network
    secretName: opendesk-certificates-tls
  rules:
  - host: portal.opendesk.apps.digilab.network
    http:
      paths:
      - path: /favicon.ico$
        pathType: ImplementationSpecific
        backend:
          service:
            name: ums-portal-frontend
            port:
              number: 80
---
# Source: nubus/templates/ingresses.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ums-minio-rewrites
  annotations:

    nginx.ingress.kubernetes.io/proxy-body-size: 128k
    nginx.ingress.kubernetes.io/proxy-buffer-size: 64k
    nginx.ingress.kubernetes.io/proxy-buffers-number: '4'
    nginx.ingress.kubernetes.io/proxy-busy-buffers-size: 128k
    nginx.ingress.kubernetes.io/proxy-http-version: '1.1'
    nginx.ingress.kubernetes.io/proxy-set-headers: |
      Host $http_host;
      X-Forwarded-For $proxy_add_x_forwarded_for;
      X-Forwarded-Host $http_x_forwarded_host;
      X-Forwarded-Port $http_x_forwarded_port;
      X-Forwarded-Proto $http_x_forwarded_proto;
    nginx.ingress.kubernetes.io/use-regex: 'true'
    nginx.ingress.kubernetes.io/rewrite-target: /ums/portal-assets/icons/$2/$3
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - portal.opendesk.apps.digilab.network
    secretName: opendesk-certificates-tls
  rules:
  - host: portal.opendesk.apps.digilab.network
    http:
      paths:
      - path: /univention/(portal|selfservice)/icons/(logos|entries)/(.*)$
        pathType: ImplementationSpecific
        backend:
          service:
            name: minio
            port:
              number: 9000
---
# Source: nubus/templates/cert-manager.yaml
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: ums-ecdsa-ca-cert
spec:
  secretName: ums-ecdsa-ca-secret
  duration: 87600h0m0s
  renewBefore: 78840h0m0s
  privateKey:
    algorithm: ECDSA
    size: 256
  isCA: true
  issuerRef:
    name: ums-ecdsa-ss-issuer
    kind: Issuer
  commonName: opendesk.apps.digilab.network
  dnsNames:
  - opendesk.apps.digilab.network
---
# Source: nubus/templates/cert-manager.yaml
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: ums-saml
spec:
  secretName: ums-saml-tls
  duration: 87600h0m0s
  renewBefore: 78840h0m0s
  subject:
    organizations:
    - opendesk.apps.digilab.network
  privateKey:
    algorithm: RSA
    encoding: PKCS1
    size: 2048
  usages:
  - digital signature
  - key encipherment
  - server auth
  - client auth
  dnsNames:
  - ums-umc-server
  - ums-umc-server.tn-openbsw-opendesk.svc.cluster.local
  issuerRef:
    name: ums-ca-issuer
    kind: Issuer
---
# Source: nubus/templates/cert-manager.yaml
apiVersion: cert-manager.io/v1
kind: Issuer
metadata:
  name: ums-ca-issuer
spec:
  ca:
    secretName: ums-ecdsa-ca-secret
---
# Source: nubus/templates/cert-manager.yaml
apiVersion: cert-manager.io/v1
kind: Issuer
metadata:
  name: ums-ecdsa-ss-issuer
spec:
  selfSigned: {}
---
# Source: nubus/charts/nubusPortalServer/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: ums-portal-server-test-connection
  labels:
    app.kubernetes.io/name: portal-server
    helm.sh/chart: nubusPortalServer-0.42.2
    app.kubernetes.io/instance: ums
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 1.16.0
  annotations:
    helm.sh/hook: test
spec:
  containers:
  - name: wget
    image: busybox
    command: [wget]
    args: [ums-portal-server:80]
  restartPolicy: Never
---
# Source: nubus/charts/nubusUdmRestApi/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: ums-udm-rest-api-test-connection
  labels:
    app.kubernetes.io/name: udm-rest-api
    helm.sh/chart: nubusUdmRestApi-0.25.1
    app.kubernetes.io/instance: ums
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 12.0.7
  annotations:
    helm.sh/hook: test
spec:
  containers:
  - name: wget
    image: busybox
    command: [wget]
    args: [ums-udm-rest-api:9979]
  restartPolicy: Never
---
# Source: nubus/charts/nubusKeycloakBootstrap/templates/job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: ums-keycloak-bootstrap-bootstrap-1
  labels:
    app.kubernetes.io/name: keycloak-bootstrap
    helm.sh/chart: nubusKeycloakBootstrap-0.3.0
    app.kubernetes.io/instance: ums
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: 0.0.1
  annotations:
    helm.sh/hook: post-install,post-upgrade
    argocd.argoproj.io/hook: Sync
spec:
  template:
    metadata:
      annotations:
        checksum/config: 7986021ccd89d8001098f64a91c340b922b60791e0c3db2b7c15e41bedc8cb9e
        intents.otterize.com/service-name: ums-keycloak-bootstrap
      labels:
        app.kubernetes.io/name: keycloak-bootstrap
        helm.sh/chart: nubusKeycloakBootstrap-0.3.0
        app.kubernetes.io/instance: ums
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/version: 0.0.1
    spec:
      restartPolicy: Never
      serviceAccountName: ums-keycloak-bootstrap
      terminationGracePeriodSeconds: 5
      containers:
      - name: univention-keycloak-bootstrap
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: false
          runAsGroup: 1000
          runAsNonRoot: true
          runAsUser: 1000
          seLinuxOptions:
          seccompProfile:
            type: RuntimeDefault
        image:
          registry.opencode.de/bmi/opendesk/components/supplier/univention/images-mirror/keycloak-bootstrap:0.3.0@sha256:2911e8d5409f4e302b5c8c073cc6bf3f3622582e6eef43c63672ac4551712750
        imagePullPolicy: IfNotPresent
        command:
        - /app/entrypoint.sh
        envFrom:
        - configMapRef:
            name: ums-keycloak-bootstrap
        env:
        - name: KEYCLOAK_PASSWORD
          valueFrom:
            secretKeyRef:
              name: ums-opendesk-keycloak-credentials
              key: admin_password
        - name: LDAP_BIND_PW
          valueFrom:
            secretKeyRef:
              name: ums-keycloak-bootstrap-ldap-opendesk-credentials
              key: password
        volumeMounts:
        - mountPath: /bootstrap
          name: bootstrap-volume
        - mountPath: /credentials/ldapread.secret
          name: ldap-credentials-volume
          subPath: password
        - mountPath: /credentials/keycloak.secret
          name: keycloak-credentials-volume
          subPath: admin_password
        - mountPath: /tmp
          name: temp-dir
        resources:
          requests:
            cpu: 0.1
            memory: 256Mi
      volumes:
      - name: keycloak-credentials-volume
        secret:
          secretName: ums-opendesk-keycloak-credentials
      - name: ldap-credentials-volume
        secret:
          secretName: ums-keycloak-bootstrap-ldap-opendesk-credentials
      - name: bootstrap-volume
        configMap:
          name: ums-keycloak-bootstrap-bootstrap-data
      - name: temp-dir
        emptyDir:
          sizeLimit: 20Mi
---
# Source: intercom-service/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: intercom-service
  namespace: tn-openbsw-opendesk
  labels:
    app.kubernetes.io/name: intercom-service
    helm.sh/chart: intercom-service-2.4.0
    app.kubernetes.io/instance: intercom-service
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: '1.4'
  annotations:
automountServiceAccountToken: false
---
# Source: intercom-service/templates/configmap-provisioning.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: intercom-service-provisioning-init
  namespace: tn-openbsw-opendesk
  labels:
    app.kubernetes.io/name: intercom-service
    helm.sh/chart: intercom-service-2.4.0
    app.kubernetes.io/instance: intercom-service
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: '1.4'

data:
  KEYCLOAK_URL: http://ums-keycloak:8080/realms/opendesk/
  wait-for-keycloak.py: |
    #!/usr/bin/python3
    import requests
    import time
    import sys
    import os

    keycloak_url = os.environ.get('KEYCLOAK_URL')
    max_retries = 60
    retries = 0

    while True:
        try:
            response = requests.get(keycloak_url)
            if response.status_code == 200:
                print('Keycloak is available')
                sys.exit(0)
            elif response.status_code == 404:
                print('Realm not ready')
                pass
        except requests.exceptions.ConnectionError:
            print('Could not reach keycloak, retrying...')
            pass
        time.sleep(1)

---
# Source: intercom-service/templates/configmap-provisioning.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: intercom-service-provisioning-env
  namespace: tn-openbsw-opendesk
  labels:
    app.kubernetes.io/name: intercom-service
    helm.sh/chart: intercom-service-2.4.0
    app.kubernetes.io/instance: intercom-service
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: '1.4'
data:
  DEBUG: 'false'
  DOMAIN: opendesk.apps.digilab.network
  KEYCLOAK_USERNAME: kcadmin
  KEYCLOAK_HOST: id.opendesk.apps.digilab.network
  KEYCLOAK_REALM: opendesk
  KEYCLOAK_URL: http://ums-keycloak:8080
  UNIVENTION_KEYCLOAK_BOOTSTRAP_TEMP_DIR: /tmp
  UNIVENTION_KEYCLOAK_BOOTSTRAP_DEBUG_PAUSE_BEFORE_SCRIPT_START: '0'
  KEYCLOAK_APP_BASE_URL: https://ics.opendesk.apps.digilab.network
---
# Source: intercom-service/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: intercom-service
  namespace: tn-openbsw-opendesk
  labels:
    app.kubernetes.io/name: intercom-service
    helm.sh/chart: intercom-service-2.4.0
    app.kubernetes.io/instance: intercom-service
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: '1.4'
  annotations:
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 8008
    targetPort: http
    protocol: TCP
  selector:
    app.kubernetes.io/name: intercom-service
    app.kubernetes.io/instance: intercom-service
---
# Source: intercom-service/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: intercom-service
  namespace: tn-openbsw-opendesk
  labels:
    app.kubernetes.io/name: intercom-service
    helm.sh/chart: intercom-service-2.4.0
    app.kubernetes.io/instance: intercom-service
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: '1.4'
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: intercom-service
      app.kubernetes.io/instance: intercom-service
  strategy:
    type: RollingUpdate
  template:
    metadata:
      annotations:
        checksum/secret: b9d7a0eacc5f71517841432a23ae3ceac58309df8fe2a7a902301cdbf0d9fdb5
      labels:
        app.kubernetes.io/name: intercom-service
        helm.sh/chart: intercom-service-2.4.0
        app.kubernetes.io/instance: intercom-service
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/version: '1.4'
    spec:
      securityContext:
        fsGroup: 1000
        fsGroupChangePolicy: Always
      serviceAccountName: intercom-service
      initContainers:
      - name: wait-for-keycloak-container
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          privileged: false
          readOnlyRootFilesystem: true
          runAsGroup: 1000
          runAsNonRoot: true
          runAsUser: 1000
          seLinuxOptions:
          seccompProfile:
            type: RuntimeDefault
        image:
          registry.opencode.de/bmi/opendesk/components/supplier/univention/images-mirror/wait-for-dependency:0.26.0@sha256:a31fde86bf21c597a31356fe492ab7e7a03a89282ca215eb7100763d6eb96b6b
        imagePullPolicy: IfNotPresent
        envFrom:
        - configMapRef:
            name: intercom-service-provisioning-init
        command: [/usr/bin/python3, /scripts/wait-for-keycloak.py]
        volumeMounts:
        - name: wait-for-keycloak
          mountPath: /scripts
      - name: keycloak-provisioning
        securityContext:
          seLinuxOptions:
          seccompProfile:
            type: RuntimeDefault
        image:
          registry.opencode.de/bmi/opendesk/components/supplier/univention/images-mirror/keycloak-bootstrap:0.3.0@sha256:2911e8d5409f4e302b5c8c073cc6bf3f3622582e6eef43c63672ac4551712750
        imagePullPolicy: IfNotPresent
        command:
        - /bin/bash
        - -c
        - |
          univention-keycloak \
          --keycloak-url $KEYCLOAK_URL \
          --realm $KEYCLOAK_REALM \
          --binduser $KEYCLOAK_USERNAME \
          --bindpwdfile /credentials/keycloak.secret \
          oidc/rp create \
          opendesk-intercom \
          --direct-access-grants \
          --backchannel-logout-url $KEYCLOAK_APP_BASE_URL/backchannel-logout \
          --web-origins $KEYCLOAK_APP_BASE_URL \
          --client-secret $ICS_CLIENT_SECRET \
          --redirect-uri $KEYCLOAK_APP_BASE_URL/callback \
          --add-ics-mappers \
          --backchannel-logout-revoke-session \
          --pkce-code-challenge-method "" \
          --host-fqdn $KEYCLOAK_HOST
        envFrom:
        - configMapRef:
            name: intercom-service-provisioning-env
        env:
        - name: KEYCLOAK_PASSWORD
          valueFrom:
            secretKeyRef:
              name: ums-opendesk-keycloak-credentials
              key: admin_password
        - name: ICS_CLIENT_SECRET
          value: 643c367e70e79a30f3db662d081eb2bd763e4d7c
        volumeMounts:
        - mountPath: /credentials/keycloak.secret
          name: keycloak-credentials-volume
          subPath: admin_password
        - name: temp-dir
          mountPath: /tmp
      containers:
      - name: intercom-service
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          privileged: false
          readOnlyRootFilesystem: true
          runAsGroup: 1000
          runAsNonRoot: true
          runAsUser: 1000
          seLinuxOptions:
          seccompProfile:
            type: RuntimeDefault
        image:
          registry.opencode.de/bmi/opendesk/components/supplier/univention/images-mirror/intercom-service:2.4.0@sha256:df743b7ea30077dc941815ccc60198820d67bbba94853fa7a6f939c0f36af335
        imagePullPolicy: IfNotPresent
        env:
        envFrom:
        - secretRef:
            name: intercom-service
        livenessProbe:
          tcpSocket:
            port: http
          initialDelaySeconds: 15
          periodSeconds: 5
          timeoutSeconds: 2
          failureThreshold: 3
          successThreshold: 1
        readinessProbe:
          tcpSocket:
            port: http
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 1
          failureThreshold: 15
          successThreshold: 1
        ports:
        - name: http
          containerPort: 8008
          protocol: TCP
        resources:
          requests:
            cpu: 0.1
            memory: 64Mi
        volumeMounts:
      volumes:
      - name: wait-for-keycloak
        configMap:
          name: intercom-service-provisioning-init
      - name: keycloak-credentials-volume
        secret:
          secretName: ums-opendesk-keycloak-credentials
      - name: temp-dir
        emptyDir:
          sizeLimit: 20Mi

---
# Source: intercom-service/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: intercom-service
  labels:
    app.kubernetes.io/name: intercom-service
    helm.sh/chart: intercom-service-2.4.0
    app.kubernetes.io/instance: intercom-service
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: '1.4'
  annotations:
spec:
  tls:
  - hosts:
    - ics.opendesk.apps.digilab.network
    secretName: opendesk-certificates-tls
  rules:
  - host: ics.opendesk.apps.digilab.network
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: intercom-service
            port:
              name: http
---
# Source: opendesk-keycloak-bootstrap/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: opendesk-keycloak-bootstrap
  namespace: tn-openbsw-opendesk
  labels:
    app.kubernetes.io/name: opendesk-keycloak-bootstrap
    helm.sh/chart: opendesk-keycloak-bootstrap-2.1.3
    app.kubernetes.io/instance: opendesk-keycloak-bootstrap
    app.kubernetes.io/managed-by: Helm
  annotations:
automountServiceAccountToken: false
---
# Source: opendesk-keycloak-bootstrap/templates/configmap.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  name: opendesk-keycloak-bootstrap-ansible
  labels:
    app.kubernetes.io/name: opendesk-keycloak-bootstrap
    helm.sh/chart: opendesk-keycloak-bootstrap-2.1.3
    app.kubernetes.io/instance: opendesk-keycloak-bootstrap
    app.kubernetes.io/managed-by: Helm
data:

  configure_client_access_restriction.yml: |
    # SPDX-FileCopyrightText: 2024 Zentrum für Digitale Souveränität der Öffentlichen Verwaltung (ZenDiS) GmbH
    # SPDX-License-Identifier: Apache-2.0
    ---

    - name: "Configuring client role/group based required scopes to restrict access based on group membership"
      ansible.builtin.include_tasks: "configure_client_access_restriction_loop.yml"
      loop: "{{ client_access_restriction_details }}"
      loop_control:
        loop_var: "client_access_config"

    ...
  configure_client_access_restriction_loop.yml: |
    # SPDX-FileCopyrightText: 2024 Zentrum für Digitale Souveränität der Öffentlichen Verwaltung (ZenDiS) GmbH
    # SPDX-License-Identifier: Apache-2.0
    ---
    - ansible.builtin.include_tasks: "./set_global_accesstoken.yml"

    #
    # create client role
    # 1. get client_uuid
    # 2. POST https://keycloak/admin/realms/opendesk/clients/<client_uuid>/roles
    #
    - name: "Fetch client info"
      ansible.builtin.uri:
        url: "{{ global_keycloak_url }}/admin/realms/{{ global_opendesk_realm }}/clients"
        headers:
          Accept: "application/json"
          Authorization: "Bearer {{ global_accesstoken }}"
        method: "GET"
        status_code: [200]
      register: "clientqueryresult"

    - name: "Set fact for client_uuid of {{ client_access_config.client }}"
      ansible.builtin.set_fact:
        client_uuid: "{{ clientqueryresult['json'] | json_query('[?clientId==`'+client_access_config.client+'`].id') | first }}"

    - name: "Create client role"
      ansible.builtin.uri:
        url: "{{ global_keycloak_url }}/admin/realms/{{ global_opendesk_realm }}/clients/{{ client_uuid }}/roles"
        headers:
          Accept: "application/json"
          Authorization: "Bearer {{ global_accesstoken }}"
        method: "POST"
        body_format: "json"
        body: |
          {
            "name":"{{ client_access_config.role }}",
            "description":"",
            "attributes":{}
          }
        status_code: [201, 409]

    #
    # create client role <> scope mapping
    # 1. get clientscope_uuid
    # 2. get clientrole_uuid
    # 3. POST https://keycloak/admin/realms/opendesk/client-scopes/<clientscope_uuid>/scope-mappings/clients/<client_uuid>
    #    [{"id":"<clientrole_uuid>","name":"<client_access_config.role>","description":""}]
    #
    - name: "Fetch clientscope info"
      ansible.builtin.uri:
        url: "{{ global_keycloak_url }}/admin/realms/{{ global_opendesk_realm }}/client-scopes"
        headers:
          Accept: "application/json"
          Authorization: "Bearer {{ global_accesstoken }}"
        method: "GET"
        status_code: [200]
      register: "clientscopequeryresult"

    - name: "Set fact for clientscope_uuid of {{ client_access_config.scope }}"
      ansible.builtin.set_fact:
        clientscope_uuid: "{{ clientscopequeryresult['json'] | json_query('[?name==`'+client_access_config.scope+'`].id') | first }}"

    - name: "Fetch clientroles info"
      ansible.builtin.uri:
        url: "{{ global_keycloak_url }}/admin/realms/{{ global_opendesk_realm }}/clients/{{ client_uuid }}/roles"
        headers:
          Accept: "application/json"
          Authorization: "Bearer {{ global_accesstoken }}"
        method: "GET"
        status_code: [200]
      register: "clientrolesqueryresult"

    - name: "Set fact for clientrole_uuid of {{ client_access_config.role }}"
      ansible.builtin.set_fact:
        clientrole_uuid: "{{ clientrolesqueryresult['json'] | json_query('[?name==`'+client_access_config.role+'`].id') | first }}"

    - name: "Create client role <> scope mapping"
      ansible.builtin.uri:
        url: "{{ global_keycloak_url }}/admin/realms/{{ global_opendesk_realm }}/client-scopes/{{ clientscope_uuid }}/scope-mappings/clients/{{ client_uuid }}"
        headers:
          Accept: "application/json"
          Authorization: "Bearer {{ global_accesstoken }}"
        method: "POST"
        body_format: "json"
        body: |
          [
            {
              "id":"{{ clientrole_uuid }}",
              "name":"{{ client_access_config.role }}",
              "description":""
            }
          ]
        status_code: [204, 409]

    #
    # map client role to (ldap) group
    # 1. create group or accept if it already exists (as we cannot force Keycloak to just get the groups from LDAP without users being sync'd)
    # 2. get group_uuid
    # 3. POST https://keycloak/admin/realms/opendesk/groups/9357d539-a2a3-48db-8345-e689a7bc2cda/role-mappings/clients/8432f49d-d820-4419-960d-b496dfbdc76c
    #    [{"id":"6bc7c56f-739f-415d-98e8-6222f7ffb5d3","name":"opendesk-matrix-access-control","description":""}]
    #
    - name: "Create group {{ client_access_config.group }} (accept if it already exists)"
      ansible.builtin.uri:
        url: "{{ global_keycloak_url }}/admin/realms/{{ global_opendesk_realm }}/groups"
        headers:
          Accept: "application/json"
          Authorization: "Bearer {{ global_accesstoken }}"
        body_format: "json"
        method: "POST"
        body: |
          { "name": "{{ client_access_config.group }}" }
        status_code: [201, 409]

    - name: "Fetch groups info"
      ansible.builtin.uri:
        url: "{{ global_keycloak_url }}/admin/realms/{{ global_opendesk_realm }}/groups"
        headers:
          Accept: "application/json"
          Authorization: "Bearer {{ global_accesstoken }}"
        method: "GET"
        status_code: [200]
      register: "groupsqueryresult"

    - name: "Set fact for group_uuid of group {{ client_access_config.group }}"
      ansible.builtin.set_fact:
        group_uuid: "{{ groupsqueryresult['json'] | json_query('[?name==`'+client_access_config.group+'`].id') | first }}"

    - name: "Map client role {{ client_access_config.role }} to group {{ client_access_config.group }}"
      ansible.builtin.uri:
        url: "{{ global_keycloak_url }}/admin/realms/{{ global_opendesk_realm }}/groups/{{ group_uuid }}/role-mappings/clients/{{ client_uuid }}"
        headers:
          Accept: "application/json"
          Authorization: "Bearer {{ global_accesstoken }}"
        method: "POST"
        body_format: "json"
        body: |
          [
            {
              "id":"{{ clientrole_uuid }}",
              "name":"{{ client_access_config.role }}",
              "description":""
            }
          ]
        status_code: [204, 409]

    ...
  configure_clientpermissions.yml: |
    # SPDX-FileCopyrightText: 2024 Zentrum für Digitale Souveränität der Öffentlichen Verwaltung (ZenDiS) GmbH
    # SPDX-FileCopyrightText: 2023 Bundesministerium des Innern und für Heimat, PG ZenDiS "Projektgruppe für Aufbau ZenDiS"
    # SPDX-License-Identifier: Apache-2.0
    ---
    - name: "Ensure IntercomService is up and running with retries."
      ansible.builtin.uri:
        url: "{{ global_intercom_url }}"
        method: "GET"
      register: "ics_alive_response"
      until: "ics_alive_response.status == 200"
      retries: 60
      delay: 10

    - name: "Fetch client info"
      ansible.builtin.uri:
        url: "{{ global_keycloak_url }}/admin/realms/{{ global_opendesk_realm }}/clients"
        headers:
          Accept: "application/json"
          Authorization: "Bearer {{ global_accesstoken }}"
        method: "GET"
        status_code: [200]
      register: "clientqueryresult"

    - name: "Set clientids"
      ansible.builtin.set_fact:
        clientid_realmmanagement: "{{ clientqueryresult['json'] | json_query('[?clientId==`realm-management`].id')
          | first }}"
        clientid_intercom: "{{ clientqueryresult['json'] | json_query('[?clientId==`opendesk-intercom`].id')
          | first }}"
        clientid_nextcloud: "{{ clientqueryresult['json'] | json_query('[?clientId==`opendesk-nextcloud`].id')
          | first }}"
        clientid_oxappsuite: "{{ clientqueryresult['json'] | json_query('[?clientId==`opendesk-oxappsuite`].id')
          | first }}"
        clientid_matrix: "{{ clientqueryresult['json'] | json_query('[?clientId==`opendesk-matrix`].id')
          | first }}"

    # Enable permissions on the given clients
    - name: "Enable permissions on client opendesk-intercom"
      ansible.builtin.uri:
        url: "{{ global_keycloak_url }}/admin/realms/{{ global_opendesk_realm }}/clients/{{ clientid_intercom }}\
          /management/permissions"
        headers:
          Accept: "application/json"
          Authorization: "Bearer {{ global_accesstoken }}"
        body_format: "json"
        method: "PUT"
        body: "{ \"enabled\": true }"
        status_code: [200]
    - name: "Enable permissions on client opendesk-nextcloud"
      ansible.builtin.uri:
        url: "{{ global_keycloak_url }}/admin/realms/{{ global_opendesk_realm }}/clients/{{ clientid_nextcloud }}\
          /management/permissions"
        headers:
          Accept: "application/json"
          Authorization: "Bearer {{ global_accesstoken }}"
        body_format: "json"
        method: "PUT"
        body: "{ \"enabled\": true }"
        status_code: [200]
    - name: "Enable permissions on client opendesk-oxappsuite"
      ansible.builtin.uri:
        url: "{{ global_keycloak_url }}/admin/realms/{{ global_opendesk_realm }}/clients/{{ clientid_oxappsuite }}\
          /management/permissions"
        headers:
          Accept: "application/json"
          Authorization: "Bearer {{ global_accesstoken }}"
        body_format: "json"
        method: "PUT"
        body: "{ \"enabled\": true }"
        status_code: [200]
    - name: "Enable permissions on client opendesk-matrix"
      ansible.builtin.uri:
        url: "{{ global_keycloak_url }}/admin/realms/{{ global_opendesk_realm }}/clients/{{ clientid_matrix }}\
          /management/permissions"
        headers:
          Accept: "application/json"
          Authorization: "Bearer {{ global_accesstoken }}"
        body_format: "json"
        method: "PUT"
        body: "{ \"enabled\": true }"
        status_code: [200]

    - name: "Add intercom policy to management client"
      ansible.builtin.uri:
        url: "{{ global_keycloak_url }}/admin/realms/{{ global_opendesk_realm }}/clients/{{ clientid_realmmanagement }}\
          /authz/resource-server/policy"
        headers:
          Accept: "application/json"
          Authorization: "Bearer {{ global_accesstoken }}"
        body_format: "json"
        method: "POST"
        body: |
          {
            "name": "opendesk-intercom",
            "type": "client",
            "logic": "POSITIVE",
            "decisionStrategy": "UNANIMOUS",
            "config": {
              "clients": "[\"opendesk-intercom\"]"
            }
          }
        status_code: [201, 409]

    - name: "Fetch policy info"
      ansible.builtin.uri:
        url: "{{ global_keycloak_url }}/admin/realms/{{ global_opendesk_realm }}/clients/{{ clientid_realmmanagement }}\
          /authz/resource-server/policy"
        headers:
          Accept: "application/json"
          Authorization: "Bearer {{ global_accesstoken }}"
        method: "GET"
        status_code: [200]
      register: "policyqueryresult"

    - name: "set intercom_policy_id"
      ansible.builtin.set_fact:
        intercom_policy_id: "{{ policyqueryresult['json'] | json_query('[?name==`opendesk-intercom`].id') | first }}"

    # We also set the intercom client on create, but when re-creating clients the assignment to the policy gets lost and
    # just assigning the client on create does not add the client when the policy already exists.
    - name: "Update the intercom policy to be sure it includes the intercom client"
      ansible.builtin.uri:
        url: "{{ global_keycloak_url }}/admin/realms/{{ global_opendesk_realm }}/clients/{{ clientid_realmmanagement }}\
          /authz/resource-server/policy/{{ intercom_policy_id }}"
        headers:
          Accept: "application/json"
          Authorization: "Bearer {{ global_accesstoken }}"
        body_format: "json"
        method: "PUT"
        body: |
          {
            "name": "opendesk-intercom",
            "type": "client",
            "logic": "POSITIVE",
            "decisionStrategy": "UNANIMOUS",
            "config": {
              "clients": "[\"opendesk-intercom\"]"
            }
          }
        status_code: [201, 409]

    - name: "Fetch scope info"
      ansible.builtin.uri:
        url: "{{ global_keycloak_url }}/admin/realms/{{ global_opendesk_realm }}/clients/{{ clientid_realmmanagement }}\
          /authz/resource-server/scope"
        headers:
          Accept: "application/json"
          Authorization: "Bearer {{ global_accesstoken }}"
        method: "GET"
        status_code: [200]
      register: "scopequeryresult"

    - name: "set tokenexchange_scope_id"
      ansible.builtin.set_fact:
        tokenexchange_scope_id: "{{ scopequeryresult['json'] | json_query('[?name==`token-exchange`].id') | first }}"

    - name: "Fetch permission scope info"
      ansible.builtin.uri:
        url: "{{ global_keycloak_url }}/admin/realms/{{ global_opendesk_realm }}/clients/{{ clientid_realmmanagement }}\
          /authz/resource-server/permission/scope"
        headers:
          Accept: "application/json"
          Authorization: "Bearer {{ global_accesstoken }}"
        method: "GET"
        status_code: [200]
      register: "permissionscopequeryresult"

    - name: "Will loop over"
      ansible.builtin.debug:
        # cannot use json_query's start with due to https://github.com/ansible/ansible/issues/27299
        msg: "{{ permissionscopequeryresult['json'] | selectattr('name', 'contains', 'token-exchange.permission.client.')
          | list | json_query('[*].name') }}"

    - name: "Looping now"
      ansible.builtin.include_tasks: "configure_clientpermissions_loop.yml"
      loop: "{{ permissionscopequeryresult['json'] | selectattr('name', 'contains', 'token-exchange.permission.client.')
        | list | json_query('[*].name') }}"
      loop_control:
        loop_var: "loop_client_string"
    ...
  configure_clientpermissions_loop.yml: |
    # SPDX-FileCopyrightText: 2023 Bundesministerium des Innern und für Heimat, PG ZenDiS "Projektgruppe für Aufbau ZenDiS"
    # SPDX-License-Identifier: Apache-2.0
    ---
    - name: "get loop_client_id from loop_client_string"
      ansible.builtin.set_fact:
        loop_client_id: "{{ loop_client_string.split('.')[-1] }}"

    - name: "Get tokenExchange_permission_scope_id_for_loop_client"
      ansible.builtin.uri:
        url: "{{ global_keycloak_url }}/admin/realms/{{ global_opendesk_realm }}/clients/{{ clientid_realmmanagement }}\
          /authz/resource-server/permission/scope"
        headers:
          Accept: "application/json"
          Authorization: "Bearer {{ global_accesstoken }}"
        method: "GET"
        status_code: [200]
      register: "result"

    - name: "Set tokenExchange_permission_scope_id_for_loop_client"
      ansible.builtin.set_fact:
        tokenExchange_permission_scope_id_for_loop_client: "{{ result['json'] |
          json_query('[?name==`token-exchange.permission.client.'+loop_client_id+'`].id') | first }}"

    - name: "Get resource_id_for_loop_client"
      ansible.builtin.uri:
        url: "{{ global_keycloak_url }}/admin/realms/{{ global_opendesk_realm }}/clients/{{ clientid_realmmanagement }}\
          /authz/resource-server/resource"
        headers:
          Accept: "application/json"
          Authorization: "Bearer {{ global_accesstoken }}"
        method: "GET"
        status_code: [200]
      register: "result"

    - name: "Set resource_id_for_loop_client"
      ansible.builtin.set_fact:
        resource_id_for_loop_client: "{{ result['json'] | json_query('[?name==`client.resource.'+loop_client_id+'`]._id')
          | first }}"

    - name: "Set body for request"
      ansible.builtin.set_fact:
        request_body: |
          {
            "name":"token-exchange.permission.client.{{ loop_client_id }}",
            "type":"scope",
            "logic":"POSITIVE",
            "decisionStrategy":"UNANIMOUS",
            "resources":[
                "{{ resource_id_for_loop_client }}"
            ],
            "scopes":[
                "{{ tokenexchange_scope_id }}"
            ],
            "policies":[
                "{{ intercom_policy_id }}"
            ]
          }

    - name: "set the policy (realm_management > authorization > permissions > token-xchange.permission.client.<clientid>"
      ansible.builtin.uri:
        url: "{{ global_keycloak_url }}/admin/realms/{{ global_opendesk_realm }}/clients/{{ clientid_realmmanagement }}\
          /authz/resource-server/permission/scope/{{ tokenExchange_permission_scope_id_for_loop_client }}"
        headers:
          Accept: "application/json"
          Authorization: "Bearer {{ global_accesstoken }}"
        method: "PUT"
        body_format: "json"
        body: "{{ request_body }}"
        status_code: [200, 201]
    ...
  configure_realmsettings.yml: |
    # SPDX-FileCopyrightText: 2023 Bundesministerium des Innern und für Heimat, PG ZenDiS "Projektgruppe für Aufbau ZenDiS"
    # SPDX-License-Identifier: Apache-2.0
    ---
    - name: "Configure rememberMe options"
      ansible.builtin.uri:
        url: "{{ global_keycloak_url }}/admin/realms/{{ global_opendesk_realm }}"
        headers:
          Accept: "application/json"
          Authorization: "Bearer {{ global_accesstoken }}"
        method: "PUT"
        body_format: "json"
        body: |
          {
            "accessTokenLifespan": {{ global_cfgobj.config.realmSettings.accessTokenLifespan }},
            "ssoSessionIdleTimeout": {{ global_cfgobj.config.realmSettings.ssoSessionIdleTimeout }},
            "ssoSessionMaxLifespan": {{ global_cfgobj.config.realmSettings.ssoSessionMaxLifespan }},
            "rememberMe": {{ global_cfgobj.config.realmSettings.rememberMe }},
            "ssoSessionIdleTimeoutRememberMe":
              {{ global_cfgobj.config.realmSettings.ssoSessionIdleTimeoutRememberMe }},
            "ssoSessionMaxLifespanRememberMe":
              {{ global_cfgobj.config.realmSettings.ssoSessionMaxLifespanRememberMe }}
          }
        status_code: [204]

    - name: "Enable login with email"
      ansible.builtin.uri:
        url: "{{ global_keycloak_url }}/admin/realms/{{ global_opendesk_realm }}"
        headers:
          Accept: "application/json"
          Authorization: "Bearer {{ global_accesstoken }}"
        method: "PUT"
        body_format: "json"
        body: |
          {
            "loginWithEmailAllowed": true,
            "duplicateEmailsAllowed": false
          }
        status_code: [204]

    - name: "Enable 'save events' required for Keycloak Extensions Brute Force Protection"
      ansible.builtin.uri:
        url: "{{ global_keycloak_url }}/admin/realms/{{ global_opendesk_realm }}"
        headers:
          Accept: "application/json"
          Authorization: "Bearer {{ global_accesstoken }}"
        method: "PUT"
        body_format: "json"
        body: |
          {
            "eventsEnabled": true
          }
        status_code: [204]

    - name: "Explicitly set HTTP headers"
      ansible.builtin.uri:
        url: "{{ global_keycloak_url }}/admin/realms/{{ global_opendesk_realm }}"
        headers:
          Accept: "application/json"
          Authorization: "Bearer {{ global_accesstoken }}"
        method: "PUT"
        body_format: "json"
        body: |
          {
            "browserSecurityHeaders": {
              "contentSecurityPolicyReportOnly": "",
              "xContentTypeOptions": "nosniff",
              "referrerPolicy": "no-referrer",
              "xRobotsTag": "noindex",
              "xFrameOptions": "SAMEORIGIN",
              "contentSecurityPolicy": "frame-src 'self'; frame-ancestors 'self' {{ global_portal_url }} ; object-src 'none';",
              "xXSSProtection": "1; mode=block",
              "strictTransportSecurity": "max-age=31536000; includeSubDomains"
            }
          }
        status_code: [204]

    ...
  configure_set_2fa_groups.yml: |
    # SPDX-FileCopyrightText: 2024 Zentrum für Digitale Souveränität der Öffentlichen Verwaltung (ZenDiS) GmbH
    # SPDX-License-Identifier: Apache-2.0
    ---
    - name: "Get 2FA role"
      ansible.builtin.uri:
        url: "{{ global_keycloak_url }}/admin/realms/{{ global_opendesk_realm }}/roles"
        headers:
          Accept: "application/json"
          Authorization: "Bearer {{ global_accesstoken }}"
        method: "GET"
        status_code: [200]
      register: "rolesqueryresult"

    - name: "Set role id for 2FA role"
      ansible.builtin.set_fact:
        two_factor_role_id: "{{ rolesqueryresult['json'] | json_query('[?name==`'+two_factor_role_name+'`].id') | first }}"

    - name: "Adding groups now to 2FA role"
      ansible.builtin.include_tasks: "configure_set_2fa_groups_loop.yml"
      loop: "{{ two_factor_additional_groups }}"
      loop_control:
        loop_var: "loop_group_name"
    ...
  configure_set_2fa_groups_loop.yml: |
    # SPDX-FileCopyrightText: 2024 Zentrum für Digitale Souveränität der Öffentlichen Verwaltung (ZenDiS) GmbH
    # SPDX-License-Identifier: Apache-2.0
    ---
    - name: "Create group {{ loop_group_name }} (and accept if it already exists)"
      ansible.builtin.uri:
        url: "{{ global_keycloak_url }}/admin/realms/{{ global_opendesk_realm }}/groups"
        headers:
          Accept: "application/json"
          Authorization: "Bearer {{ global_accesstoken }}"
        body_format: "json"
        method: "POST"
        body: |
          { "name": "{{ loop_group_name }}" }
        status_code: [201, 409]

    - name: "Get groups"
      ansible.builtin.uri:
        url: "{{ global_keycloak_url }}/admin/realms/{{ global_opendesk_realm }}/groups"
        headers:
          Accept: "application/json"
          Authorization: "Bearer {{ global_accesstoken }}"
        method: "GET"
        status_code: [200]
      register: "groupsqueryresult"

    - name: "Set group id for group {{ loop_group_name }} that should be 2FA enabled"
      ansible.builtin.set_fact:
        loop_group_id: "{{ groupsqueryresult['json'] | json_query('[?name==`'+loop_group_name+'`].id') | first }}"

    - name: "Add mapping for group {{ loop_group_name }} / {{ loop_group_id }} to 2FA role {{ two_factor_role_name }} / {{ two_factor_role_id }}"
      ansible.builtin.uri:
        url: "{{ global_keycloak_url }}/admin/realms/{{ global_opendesk_realm }}/groups/{{ loop_group_id }}/role-mappings/realm"
        headers:
          Accept: "application/json"
          Authorization: "Bearer {{ global_accesstoken }}"
        body_format: "json"
        method: "POST"
        body: |
          [
            {
                "id": "{{ two_factor_role_id }}",
                "containerId": "{{ global_opendesk_realm }}",
                "clientRole": false,
                "composite": false,
                "name": "{{ two_factor_role_name }}"
            }
          ]
        status_code: [204, 409]
    ...
  main.yml: |
    # SPDX-FileCopyrightText: 2023 Bundesministerium des Innern und für Heimat, PG ZenDiS "Projektgruppe für Aufbau ZenDiS"
    # SPDX-License-Identifier: Apache-2.0
    ---
    - hosts: "localhost"
      tasks:

        - ansible.builtin.include_tasks: "./set_global_facts.yml"
        - name: "Debug output"
          ansible.builtin.debug:
            var: "global_cfgobj"
          when: "global_cfgobj.config.debug.enabled|bool"

        # To get the access token the Keycloak must be up and running,
        # we do some loops in order to wait for the service in
        # `set_global_accesstoken.yml`
        - ansible.builtin.include_tasks: "./set_global_accesstoken.yml"
        - ansible.builtin.include_tasks: "./configure_realmsettings.yml"

        - ansible.builtin.include_tasks: "./set_global_accesstoken.yml"
        # To configure the client permissions we require the intercomservice
        # deployment to be completed as it creates the related OIDC client
        # that is required for the client permission setup.
        - ansible.builtin.include_tasks: "./configure_clientpermissions.yml"

        - ansible.builtin.include_tasks: "./set_global_accesstoken.yml"
        - ansible.builtin.include_tasks: "./configure_set_2fa_groups.yml"

        # In the following case we request the access token on every loop, not upfront.
        - ansible.builtin.include_tasks: "./configure_client_access_restriction.yml"

    ...
  set_global_accesstoken.yml: |
    # SPDX-FileCopyrightText: 2023 Bundesministerium des Innern und für Heimat, PG ZenDiS "Projektgruppe für Aufbau ZenDiS"
    # SPDX-License-Identifier: Apache-2.0
    ---
    - name: "get authentication token"
      ansible.builtin.uri:
        url: "{{ global_keycloak_url }}/realms/master/protocol/openid-connect/token"
        method: "POST"
        body_format: "form-urlencoded"
        body:
          client_id: "admin-cli"
          username: "{{ global_admin_username }}"
          password: "{{ global_admin_password }}"
          grant_type: "password"
      register: "access_token_response"
      # Keycloak is required to be up and running, so we allow some retries
      until: "access_token_response.status == 200"
      retries: 30
      delay: 10

    - name: "Set fact global_accesstoken"
      ansible.builtin.set_fact:
        global_accesstoken: "{{ access_token_response['json']['access_token'] }}"
    ...
  set_global_facts.yml: |
    # SPDX-FileCopyrightText: 2023 Bundesministerium des Innern und für Heimat, PG ZenDiS "Projektgruppe für Aufbau ZenDiS"
    # SPDX-License-Identifier: Apache-2.0
    ---
    - name: "Global: Read and parse config.yaml"
      ansible.builtin.set_fact:
        global_cfgobj: "{{ lookup('file', '/app/values.yaml') | from_yaml }}"

    - name: "Global: Set variables"
      ansible.builtin.set_fact:
        global_admin_username: "{{ global_cfgobj.config.keycloak.adminUser }}"
        global_admin_password: "{{ global_cfgobj.config.keycloak.adminPassword }}"
        global_keycloak_host: "{{ global_cfgobj.global.hosts.keycloak }}.{{ global_cfgobj.global.domain }}"
        global_portal_url: "https://{{ global_cfgobj.global.hosts.portal }}.{{ global_cfgobj.global.domain }}"
        global_intercom_url: "https://{{ global_cfgobj.global.hosts.intercomService }}.{{ global_cfgobj.global.domain }}"
        global_opendesk_realm: "{{ global_cfgobj.config.keycloak.realm }}"
        two_factor_role_name: "{{ global_cfgobj.config.twoFactorSettings.roleName }}"
        two_factor_additional_groups: "{{ [] +  global_cfgobj.config.twoFactorSettings.additionalGroups }}"
        client_access_restriction_details:
          - client: "opendesk-matrix"
            scope: "opendesk-matrix-scope"
            role: "opendesk-matrix-access-control"
            group: "managed-by-attribute-Livecollaboration"
          - client: "opendesk-jitsi"
            scope: "opendesk-jitsi-scope"
            role: "opendesk-jitsi-access-control"
            group: "managed-by-attribute-Videoconference"
          - client: "opendesk-xwiki"
            scope: "opendesk-xwiki-scope"
            role: "opendesk-xwiki-access-control"
            group: "managed-by-attribute-Knowledgemanagement"
          - client: "opendesk-openproject"
            scope: "opendesk-openproject-scope"
            role: "opendesk-openproject-access-control"
            group: "managed-by-attribute-Projectmanagement"
          - client: "opendesk-nextcloud"
            scope: "opendesk-nextcloud-scope"
            role: "opendesk-nextcloud-access-control"
            group: "managed-by-attribute-Fileshare"
          - client: "opendesk-oxappsuite"
            scope: "opendesk-oxappsuite-scope"
            role: "opendesk-oxappsuite-access-control"
            group: "managed-by-attribute-Groupware"
          - client: "opendesk-dovecot"
            scope: "opendesk-dovecot-scope"
            role: "opendesk-dovecot-access-control"
            group: "managed-by-attribute-Groupware"

    - name: "Global: Set Keycloak URL for external connection"
      ansible.builtin.set_fact:
        global_keycloak_url: "https://{{ global_keycloak_host }}"
      when: "not global_cfgobj.config.keycloak.intraCluster.enabled"

    - name: "Global: Set Keycloak URL for internal connection"
      ansible.builtin.set_fact:
        global_keycloak_url: "{{ global_cfgobj.config.keycloak.intraCluster.internalBaseUrl }}"
      when: "global_cfgobj.config.keycloak.intraCluster.enabled"

    ...
---
# Source: opendesk-keycloak-bootstrap/templates/job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: opendesk-keycloak-bootstrap-bootstrap-1
  labels:
    app.kubernetes.io/name: opendesk-keycloak-bootstrap
    helm.sh/chart: opendesk-keycloak-bootstrap-2.1.3
    app.kubernetes.io/instance: opendesk-keycloak-bootstrap
    app.kubernetes.io/managed-by: Helm
  annotations:
    argocd.argoproj.io/hook: Sync
    argocd.argoproj.io/hook-delete-policy: BeforeHookCreation
spec:
  ttlSecondsAfterFinished: 1800
  template:
    metadata:
      annotations:
        checksum/configmap: bae3ae12548a82e4696400e620ef96653ed31639fd13f35d0ef21f7a53288917
        intents.otterize.com/service-name: ums-keycloak-bootstrap
      labels:
        app.kubernetes.io/name: opendesk-keycloak-bootstrap
        helm.sh/chart: opendesk-keycloak-bootstrap-2.1.3
        app.kubernetes.io/instance: opendesk-keycloak-bootstrap
        app.kubernetes.io/managed-by: Helm
    spec:
      restartPolicy: Never
      securityContext:
        fsGroup: 1000
        fsGroupChangePolicy: OnRootMismatch
      serviceAccountName: opendesk-keycloak-bootstrap
      containers:
      - name: opendesk-keycloak-bootstrap
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          privileged: false
          readOnlyRootFilesystem: true
          runAsGroup: 1000
          runAsNonRoot: true
          runAsUser: 1000
          seLinuxOptions:
          seccompProfile:
            type: RuntimeDefault
        image:
          registry.opencode.de/bmi/opendesk/components/platform-development/images/opendesk-keycloak-bootstrap:1.2.1@sha256:f5ce0be27580c6347c5e700c4fa271a811d45d8a0e4b40ffe8a4d0e3d47e670f
        imagePullPolicy: IfNotPresent
        command:
        - /app/entrypoint.sh
        volumeMounts:
        - mountPath: /app/values.yaml
          name: secrets-volume
          subPath: values.yaml
        - mountPath: /app/ansible
          name: ansible-directory-volume
        - mountPath: /tmp
          name: temp-dir
        resources:
          requests:
            cpu: 0.1
            memory: 256Mi
        env:
        - name: OPENDESK_KEYCLOAK_BOOTSTRAP_TEMP_DIR
          value: /tmp
        - name: OPENDESK_KEYCLOAK_BOOTSTRAP_DEBUG_PAUSE_BEFORE_SCRIPT_START
          value: '0'
      volumes:
      - name: secrets-volume
        secret:
          secretName: opendesk-keycloak-bootstrap
      - name: temp-dir
        emptyDir:
          sizeLimit: 20Mi
      - name: ansible-directory-volume
        configMap:
          name: opendesk-keycloak-bootstrap-ansible
